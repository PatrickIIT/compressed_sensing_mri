EXPERIMENT 1

Phase 1: Data Ingestion and Preparation
import os
import glob
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
Data Exploration and Loading Strategy
# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'oasis-1' # This is the name of your dataset folder in /kaggle/input/

# This should be /kaggle/input/oasis-1/
base_dataset_path = os.path.join(base_kaggle_input_path, dataset_name)
print(f"Attempting to use base dataset path: {base_dataset_path}")

if not os.path.isdir(base_dataset_path):
    print(f"ERROR: Base dataset path does not exist: {base_dataset_path}")
    print(f"Listing contents of '{base_kaggle_input_path}': {os.listdir(base_kaggle_input_path)}")
    # If this error occurs, the 'dataset_name' or 'base_kaggle_input_path' is wrong.
    # Or the dataset isn't attached to your Kaggle notebook correctly.
    # Please verify in the Kaggle "Input" section.
    exit() # Stop if the fundamental path is wrong

print(f"Successfully located base dataset path: {base_dataset_path}")
print(f"Contents of '{base_dataset_path}': {os.listdir(base_dataset_path)}")

image_paths = []

# --- 2. FIND CROSS-SECTIONAL DISC PARENT FOLDERS ---
# These are folders like 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc10', etc.
# They should be directly under base_dataset_path
disc_parent_folders_names = [
    d for d in os.listdir(base_dataset_path)
    if d.startswith('oasis_cross-sectional_disc') and \
       os.path.isdir(os.path.join(base_dataset_path, d))
]
print(f"\nFound {len(disc_parent_folders_names)} 'oasis_cross-sectional_discX' folders: {disc_parent_folders_names}")

if not disc_parent_folders_names:
    print("ERROR: No 'oasis_cross-sectional_discX' type folders found directly under "
          f"'{base_dataset_path}'. Check your dataset structure.")
    exit()

# --- 3. ITERATE THROUGH EACH DISC PARENT FOLDER ---
for disc_parent_name in disc_parent_folders_names:
    # e.g., disc_parent_name is 'oasis_cross-sectional_disc1'
    # Full path to this folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/
    current_disc_parent_path = os.path.join(base_dataset_path, disc_parent_name)
    print(f"\nProcessing Disc Parent Folder: {current_disc_parent_path}")

    # --- 4. FIND THE INNER 'discX' FOLDER ---
    # The actual data is in a subfolder like 'disc1', 'disc2', ... 'disc12'
    # Extract the number part (e.g., '1' from 'oasis_cross-sectional_disc1')
    disc_num_str = disc_parent_name.replace('oasis_cross-sectional_disc', '')
    inner_disc_folder_name = f'disc{disc_num_str}' # e.g., 'disc1', 'disc10'

    # This is the path to the folder that should contain individual subject (OAS1_xxxx_MRy) folders
    # e.g., /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/
    subjects_parent_path = os.path.join(current_disc_parent_path, inner_disc_folder_name)
    print(f"  Looking for subject folders within: {subjects_parent_path}")

    if not os.path.isdir(subjects_parent_path):
        print(f"  WARNING: Expected inner disc folder '{subjects_parent_path}' not found.")
        print(f"  Contents of '{current_disc_parent_path}': {os.listdir(current_disc_parent_path)}")
        print(f"  Skipping '{disc_parent_name}'.")
        continue
    
    print(f"  Found inner disc folder: {subjects_parent_path}")
    # print(f"  Contents of '{subjects_parent_path}': {os.listdir(subjects_parent_path)}")


    # --- 5. FIND SUBJECT FOLDERS (OAS1_xxxx_MRy) ---
    # Glob pattern for subject folders like 'OAS1_0001_MR1', 'OAS1_0002_MR1', etc.
    subject_folder_glob_pattern = os.path.join(subjects_parent_path, 'OAS1_*_MR*')
    subject_folders_found = glob.glob(subject_folder_glob_pattern)
    print(f"  Found {len(subject_folders_found)} subject folders using pattern '{subject_folder_glob_pattern}'.")

    if not subject_folders_found:
        print(f"  WARNING: No subject folders (OAS1_*_MR*) found in '{subjects_parent_path}'.")
        print(f"  Contents of '{subjects_parent_path}' were: {os.listdir(subjects_parent_path)}")
        # continue # Optional: skip to next disc_parent if no subjects found

    for subj_folder_path in subject_folders_found:
        # e.g., subj_folder_path is /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_0001_MR1
        # print(f"    Processing Subject Folder: {subj_folder_path}")
        subject_id_from_folder = os.path.basename(subj_folder_path) # e.g., OAS1_0001_MR1

        # --- 6. FIND THE TARGET IMAGE FILE ---
        # Path to the specific image file we want, including the 'MPRAGE' subdirectory
        # Filename structure: OAS1_xxxx_MRy_mpr_ni_anon_sbj_111.img (n_i is num scans, e.g., n4)
        
        # Corrected path including 'MPRAGE'
        image_file_path_pattern = os.path.join(
            subj_folder_path,
            'PROCESSED',
            'MPRAGE',  # This was the missing piece from your detailed example path!
            'SUBJ_111',
            f'{subject_id_from_folder}_mpr_n*_anon_sbj_111.img' # Allows for n1, n2, n3, n4 etc.
        )
        
        # print(f"      Looking for image file with pattern: {image_file_path_pattern}")
        found_img_files = glob.glob(image_file_path_pattern)

        if not found_img_files:
            # Try a more general wildcard if 'n*' didn't match (e.g. if it's just _mpr_1_ or similar)
            image_file_path_pattern_alt = os.path.join(
                subj_folder_path,
                'PROCESSED', 'MPRAGE', 'SUBJ_111',
                f'{subject_id_from_folder}_mpr_*_anon_sbj_111.img'
            )
            # print(f"      Trying alternative pattern: {image_file_path_pattern_alt}")
            found_img_files = glob.glob(image_file_path_pattern_alt)
        
        if found_img_files:
            # Usually, there's one such averaged file. If multiple match, take the first.
            image_paths.append(found_img_files[0])
            # print(f"      SUCCESS: Added image: {found_img_files[0]}")
        else:
            # print(f"      WARNING: No .img file found for {subject_id_from_folder} in PROCESSED/MPRAGE/SUBJ_111.")
            # For detailed debugging, you can list contents of SUBJ_111
            path_to_check = os.path.join(subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111')
            if os.path.isdir(path_to_check):
                 pass # print(f"      Contents of '{path_to_check}': {os.listdir(path_to_check)}")
            else:
                 pass # print(f"      Directory '{path_to_check}' does not exist.")


# --- 7. FINAL REPORT ---
print(f"\n--- SUMMARY ---")
print(f"Found {len(image_paths)} potential ground truth images in total.")

if image_paths:
    print(f"First few example paths found:")
    for p in image_paths[:min(5, len(image_paths))]: # Print up to 5 examples
        print(f"  {p}")
else:
    print("No images found. Please carefully review the WARNINGS and ERROR messages above.")
    print("Key things to check:")
    print("  1. Is the `dataset_name` ('oasis-1') correct for your Kaggle input folder?")
    print("  2. Does the structure `oasis-1/oasis_cross-sectional_discX/discX/OAS1_xxxx_MRy/PROCESSED/MPRAGE/SUBJ_111/` match your data?")
    print("  3. Are the file names like `OAS1_xxxx_MRy_mpr_n#_anon_sbj_111.img`?")

Attempting to use base dataset path: /kaggle/input/oasis-1
Successfully located base dataset path: /kaggle/input/oasis-1
Contents of '/kaggle/input/oasis-1': ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Found 12 'oasis_cross-sectional_discX' folders: ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found 37 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found 34 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found 39 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7/OAS1_*_MR*'.

--- SUMMARY ---
Found 434 potential ground truth images in total.
First few example paths found:
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0230_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0230_MR2_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0224_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0224_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0212_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0212_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0227_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0227_MR1_mpr_n4_anon_sbj_111.img

Load a Sample Image:

# ... (Previous code: Data loading, etc.) ...

# --- 8. LOAD AND DISPLAY A SAMPLE IMAGE (if found) ---
if image_paths:
    print("\n--- Loading a sample image ---")
    # Let's try to load the first image found
    sample_img_path = image_paths[0]
    print(f"Loading: {sample_img_path}")
    try:
        img_obj = nib.load(sample_img_path)
        img_data = img_obj.get_fdata()  # Get data as numpy array
        print(f"  Image shape: {img_data.shape}, Data type: {img_data.dtype}, Min: {np.min(img_data):.2f}, Max: {np.max(img_data):.2f}")

        # --- Selecting a slice ---
        if img_data.ndim == 4 and img_data.shape[3] == 1:  # Handle 4D images
            # For SUBJ_111 images (sagittal): Dim 0 is sagittal slices,  Shape (256, 256, 160, 1).
            # For T88_111 images (transverse/axial): Dim 2 is axial slices.

            # Let's pick an axial-like slice for typical brain viewing, slice from the 3rd dimension (Z)
            central_slice_idx_ax = img_data.shape[2] // 2 # 160//2 = 80
            slice_2d = img_data[:, :, central_slice_idx_ax, 0].astype(np.float32).copy()

            # The orientation may still be wrong. The fact sheet indicates Sagittal.
            # For sagittal images, this may require a rotation
            # The comments earlier about 'axial' slice need to be carefully rethought.
            # The default for nibabel may be (X,Y,Z) and assume RAS+ orientation, so we have to think about that.

            # If the original is sagittal (X, Y, Z) where X is L-R, Y is P-A, Z is I-S
            # an axial slice is an X-Y plane at a given Z.
            # If nibabel loads it as (Sag, Cor, Ax), then img_data[:,:,slice_idx] is axial.

            # Let's check and rotate if necessary (This is likely)
            # For sagittal images the axial slices are at the 'back'

            # For axial slice selection, the typical radiological view would be
            # Left side of the brain on the right side of the image
            # (This is convention, like a mirrored view)
            # Therefore, we might need to rotate the image so we can display with proper radiological view.
            # or the images could be set with the different orientation matrix (or qform/sform info).

            # Rotate by 90 degrees
            # slice_2d = np.rot90(slice_2d) # or -90 based on observation.

            # The image is probably already oriented, no need to rot90
            # If it looks backwards, you might try to rotate to match radiological convention.
            # If not, just leave as is.
            # This slice_2d is still sagittal slices.
            # You may want to add another optional transformation.

            plt.figure(figsize=(8, 8))
            plt.imshow(slice_2d, cmap='gray')  # No rotation for now, display as is
            plt.title(f"Axial-like Slice (Central, Check Orientation)\nfrom {os.path.basename(sample_img_path)}")
            plt.axis('off')
            plt.show()

            ground_truth_image = slice_2d
            # Ensure it's float and normalized for CS processing
            if np.max(ground_truth_image) > np.min(ground_truth_image):
                ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                     (np.max(ground_truth_image) - np.min(ground_truth_image))
            else:
                ground_truth_image = np.zeros_like(ground_truth_image)  # Handle constant image

            print(f"\nSelected 2D slice for CS (shape {ground_truth_image.shape}, "
                  f"range [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}])")

        else:
            print(f"  Loaded image data is not 4D (shape: {img_data.shape}). Cannot select slice as expected.")

    except Exception as e:
        print(f"  ERROR loading or processing sample image '{sample_img_path}': {e}")
        import traceback
        traceback.print_exc()

# --- START: Run CS Simulation (k-space, masking, zero-filling) ---
if 'ground_truth_image' in locals(): # Only if a slice was selected
    print("\n--- Starting CS Simulation ---")

    # 1. Transform to k-space
    from numpy.fft import fft2, ifft2, fftshift, ifftshift
    k_space_full = fftshift(fft2(ground_truth_image))

    plt.figure(figsize=(10,5))
    plt.subplot(1,2,1)
    plt.imshow(np.log(1 + np.abs(k_space_full)), cmap='gray')
    plt.title("Log Magnitude of Full k-space")
    plt.subplot(1,2,2)
    plt.imshow(np.angle(k_space_full), cmap='gray')
    plt.title("Phase of Full k-space")
    plt.show()

    # 2. Design Undersampling Mask (Cartesian as example)
    def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.1):
        num_cols = shape[1]
        num_low_freqs = int(round(num_cols * center_fraction))
        mask = np.zeros(shape, dtype=bool)
        # Center region (fully sampled)
        pad = (num_cols - num_low_freqs + 1) // 2
        mask[:, pad:pad + num_low_freqs] = True
        # Outer region (undersampled)
        num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
        outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
        permuted_outer_lines = np.random.permutation(outer_lines_indices)
        selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
        mask[:, selected_outer_lines] = True
        return mask

    acceleration = 4  # Undersample by a factor of 4
    mask = create_cartesian_mask(k_space_full.shape, acceleration)

    plt.imshow(mask, cmap='gray')
    plt.title(f"1D Cartesian Mask (R={acceleration})")
    plt.show()

    # 3. Apply Mask
    k_space_undersampled = k_space_full * mask

    # 4. Zero-filled Reconstruction (Baseline)
    image_undersampled_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(ground_truth_image, cmap='gray') # Show original slice
    plt.title("Ground Truth")
    plt.axis('off')
    plt.subplot(1, 2, 2)
    plt.imshow(image_undersampled_recon, cmap='gray') # Show reconstructed image
    plt.title(f"Zero-filled Recon (R={acceleration})")
    plt.axis('off')
    plt.show()

    # 5. Quantitative Evaluation (PSNR, SSIM)
    from skimage.metrics import peak_signal_noise_ratio as psnr
    from skimage.metrics import structural_similarity as ssim

    psnr_val_zf = psnr(ground_truth_image, image_undersampled_recon, data_range=ground_truth_image.max() - ground_truth_image.min())
    ssim_val_zf = ssim(ground_truth_image, image_undersampled_recon, data_range=ground_truth_image.max() - ground_truth_image.min())
    print(f"Zero-Filled: PSNR={psnr_val_zf:.2f} dB, SSIM={ssim_val_zf:.4f}")

    # The following lines are needed to start the reconstruction process
    # Add the Compressed Sensing Reconstruction Here (e.g. using ISTA/FISTA/ADMM)
    # cs_reconstructed_image = YourCSReconstructionFunction(k_space_undersampled, mask, ground_truth_image.shape)

    # Then measure these, and then make sure to make a separate plot.
    # psnr_val_cs = psnr(ground_truth_image, cs_reconstructed_image, data_range=...)
    # ssim_val_cs = ssim(ground_truth_image, cs_reconstructed_image, data_range=...)
    # print(f"CS Recon: PSNR={psnr_val_cs:.2f} dB, SSIM={ssim_val_cs:.4f}")
else:
    print("No slice selected - skipping CS simulation.")
--- Loading a sample image ---
Loading: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3775.00

Selected 2D slice for CS (shape (256, 256), range [0.00, 1.00])

--- Starting CS Simulation ---
Zero-Filled: PSNR=26.77 dB, SSIM=0.6475
Define Helper Functions for TV:
Total Variation (TV) promotes sparsity in the image gradients.
import numpy as np
from numpy.fft import fft2, ifft2, fftshift, ifftshift
import pywt # Make sure to !pip install PyWavelets
from skimage.metrics import peak_signal_noise_ratio as psnr # for use inside ISTA
def tv_norm(image):
    """Computes the Total Variation norm of an image."""
    grad_x = np.diff(image, axis=1, append=image[:, [-1]]) # Gradient in x-direction
    grad_y = np.diff(image, axis=0, append=image[[-1], :]) # Gradient in y-direction
    return np.sum(np.sqrt(grad_x**2 + grad_y**2))

def tv_prox(image, weight):
    """
    Computes the proximal operator for TV regularization using a simple gradient descent
    approach (Chambolle's projection algorithm for TV denoising).
    This is a simplified version; more robust implementations exist.
    For a basic ISTA, a simpler soft-thresholding on a different sparsifying domain (like wavelets)
    might be easier to implement first.

    A true TV proximal operator is more complex. Let's start with wavelet soft-thresholding
    for simplicity in an ISTA framework, as TV with ISTA often requires a dual formulation
    or more complex proximal solvers.
    """
    # For simplicity with ISTA, we will use wavelet soft-thresholding instead of a full TV prox.
    # If you specifically want TV with ISTA, you'd often use FISTA with a TV prox
    # or ADMM which handles TV well.
    pass # We will use wavelet soft-thresholding below.

def soft_threshold(x, threshold):
    """Soft-thresholding operator."""
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

# For Wavelet Transform (requires PyWavelets: pip install PyWavelets)
import pywt

def wavelet_forward(image, wavelet='db4', level=3):
    """Apply forward wavelet transform."""
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    """Apply inverse wavelet transform."""
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)
Implement ISTA for Wavelet Sparsity:
The ISTA algorithm solves argmin_x { (1/2) * || A(x) - y ||_2^2 + lambda * || W(x) ||_1 } where:
x is the image to reconstruct.
A(x) is ifft2(mask * fft2(x)) (the undersampled Fourier measurement operator).
y is the k_space_undersampled.
W(x) is the wavelet transform of x.
lambda_val is the regularization parameter.
def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, # Pass ground truth for monitoring
                    wavelet='db4', level=3):
    """
    ISTA for CS MRI reconstruction with wavelet sparsity.
    (Corrected handling of wavelet coefficients)
    """
    x_recon = initial_image.copy().astype(np.complex128) # Work with complex numbers internally
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    
    step_size = 1.0 # Lipschitz constant, often 1 for normalized Fourier data

    print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

    for i in range(n_iters):
        # 1. Gradient descent step (data consistency)
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        # The gradient involves A*(Ax-y), where A is F_u and A* is F_u_adj
        # A*(k_err) = F_inv(mask * k_err)
        grad_data_term = ifft2(ifftshift(k_space_error * mask)) # Mask applied due to A*
        
        x_intermediate = x_recon - step_size * grad_data_term # grad_data_term is already complex

        # 2. Proximal operator for L1 norm in wavelet domain (soft-thresholding)
        # Apply wavelet transform (to the real part, assuming image is real-valued)
        # If your image is truly complex, wavelet transform needs to handle complex data
        # For MRI magnitude images, we usually work with the real part for wavelet transform.
        x_intermediate_real = np.real(x_intermediate)
        
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        
        threshold = lambda_val * step_size
        
        # The `coeffs_arr` is a flattened 1D array.
        # `coeff_slices[0]` describes the slice for the approximation coefficients (cA) at the coarsest level.
        # The actual data for these cA coeffs is at the beginning of `coeffs_arr`.
        # Example: if cA_coeffs_level_max has shape (h, w), its slice in coeffs_arr is from 0 to h*w - 1.
        
        # Get the number of approximation coefficients at the coarsest level
        # The structure of coeff_slices:
        # coeff_slices[0] is for the approx coeffs of the HIGHEST (coarsest) decomp level.
        # coeff_slices[1] is for detail coeffs (cH, cV, cD) of HIGHEST decomp level.
        # ...
        # coeff_slices[level] is for detail coeffs of LOWEST (finest) decomp level.
        
        # To get the size of the approximation coefficients (the first block in coeffs_arr):
        # `pywt.coeffs_to_array` arranges them as:
        # cA_levelN, (cH_levelN, cV_levelN, cD_levelN), (cH_levelN-1, ...), ..., (cH_level1, cV_level1, cD_level1)

        # The length of the approximation coefficients (cA at the coarsest level)
        # is given by the shape described in coeff_slices[0]
        approx_coeffs_slice_info = coeff_slices[0] # This is just a slice object for the cA coeffs
        
        # Alternative way to get the size of the approx coeffs:
        # The first set of coefficients from pywt.wavedec2 is cA_n (approximation at level n)
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size # Number of elements in cA_n

        coeffs_arr_thresh = coeffs_arr.copy()
        # Do NOT threshold the approximation coefficients (the first `approx_coeffs_size` elements)
        # Threshold only the detail coefficients (everything after the approx_coeffs)
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        
        # Inverse wavelet transform
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        
        # Combine with imaginary part if you were preserving it (often not done for mag images)
        x_recon = x_reconstructed_real.astype(np.complex128) # Assume result is real after wavelet step

        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            # For PSNR, compare with the real part, clipped and normalized if ground truth is.
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
            
    return np.clip(np.real(x_recon), 0, 1) # Return real part, clipped
Run the CS Reconstruction and Evaluate:
if 'ground_truth_image' in locals() and 'k_space_undersampled' in locals() and 'mask' in locals():
    print("\n--- Starting ISTA Wavelet CS Reconstruction ---")
    
    num_iterations_ista = 50 
    lambda_ista = 0.005 # START TUNING HERE: 0.001, 0.005, 0.01, 0.05
    
    initial_image_for_cs = image_undersampled_recon.copy() 

    cs_reconstructed_image_ista = ista_wavelet_cs(
        k_space_undersampled,
        mask,
        initial_image_for_cs,
        n_iters=num_iterations_ista,
        lambda_val=lambda_ista,
        ground_truth_for_psnr=ground_truth_image, # Pass the ground truth
        wavelet='db4', 
        level=3
    )

    # --- Evaluate ISTA Reconstruction ---
    # (The rest of your evaluation and plotting code remains the same)
    print("\n--- ISTA Wavelet CS Reconstruction Results ---")
    # Ensure ground_truth_image is normalized to [0,1] if cs_reconstructed_image_ista is
    psnr_val_ista = psnr(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0) # Assuming data_range is 1 after normalization
    ssim_val_ista = ssim(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0, channel_axis=None) # For skimage 0.19+

    print(f"Zero-Filled : PSNR={psnr_val_zf:.2f} dB, SSIM={ssim_val_zf:.4f}")
    print(f"ISTA Wavelet: PSNR={psnr_val_ista:.2f} dB, SSIM={ssim_val_ista:.4f} (lambda={lambda_ista})")

    # ... (plotting code) ...
else:
    print("Required variables for CS recon not found.")
-- Starting ISTA Wavelet CS Reconstruction ---
Starting ISTA: iterations=50, lambda=0.005, wavelet=db4, level=3
ISTA Iteration 5/50, Current PSNR: 29.0707 dB
ISTA Iteration 10/50, Current PSNR: 29.0893 dB
ISTA Iteration 15/50, Current PSNR: 29.0899 dB
ISTA Iteration 20/50, Current PSNR: 29.0899 dB
ISTA Iteration 25/50, Current PSNR: 29.0899 dB
ISTA Iteration 30/50, Current PSNR: 29.0899 dB
ISTA Iteration 35/50, Current PSNR: 29.0899 dB
ISTA Iteration 40/50, Current PSNR: 29.0899 dB
ISTA Iteration 45/50, Current PSNR: 29.0899 dB
ISTA Iteration 50/50, Current PSNR: 29.0899 dB

--- ISTA Wavelet CS Reconstruction Results ---
Zero-Filled : PSNR=26.77 dB, SSIM=0.6475
ISTA Wavelet: PSNR=29.09 dB, SSIM=0.7650 (lambda=0.005)
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import os # For file path joining if needed later
import time # To time experiments
# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'oasis-1' # This is the name of your dataset folder in /kaggle/input/

# This should be /kaggle/input/oasis-1/
base_dataset_path = os.path.join(base_kaggle_input_path, dataset_name)
print(f"Attempting to use base dataset path: {base_dataset_path}")

if not os.path.isdir(base_dataset_path):
    print(f"ERROR: Base dataset path does not exist: {base_dataset_path}")
    print(f"Listing contents of '{base_kaggle_input_path}': {os.listdir(base_kaggle_input_path)}")
    # If this error occurs, the 'dataset_name' or 'base_kaggle_input_path' is wrong.
    # Or the dataset isn't attached to your Kaggle notebook correctly.
    # Please verify in the Kaggle "Input" section.
    exit() # Stop if the fundamental path is wrong

print(f"Successfully located base dataset path: {base_dataset_path}")
print(f"Contents of '{base_dataset_path}': {os.listdir(base_dataset_path)}")

image_paths = []

# --- 2. FIND CROSS-SECTIONAL DISC PARENT FOLDERS ---
# These are folders like 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc10', etc.
# They should be directly under base_dataset_path
disc_parent_folders_names = [
    d for d in os.listdir(base_dataset_path)
    if d.startswith('oasis_cross-sectional_disc') and \
       os.path.isdir(os.path.join(base_dataset_path, d))
]
print(f"\nFound {len(disc_parent_folders_names)} 'oasis_cross-sectional_discX' folders: {disc_parent_folders_names}")

if not disc_parent_folders_names:
    print("ERROR: No 'oasis_cross-sectional_discX' type folders found directly under "
          f"'{base_dataset_path}'. Check your dataset structure.")
    exit()

# --- 3. ITERATE THROUGH EACH DISC PARENT FOLDER ---
for disc_parent_name in disc_parent_folders_names:
    # e.g., disc_parent_name is 'oasis_cross-sectional_disc1'
    # Full path to this folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/
    current_disc_parent_path = os.path.join(base_dataset_path, disc_parent_name)
    print(f"\nProcessing Disc Parent Folder: {current_disc_parent_path}")

    # --- 4. FIND THE INNER 'discX' FOLDER ---
    # The actual data is in a subfolder like 'disc1', 'disc2', ... 'disc12'
    # Extract the number part (e.g., '1' from 'oasis_cross-sectional_disc1')
    disc_num_str = disc_parent_name.replace('oasis_cross-sectional_disc', '')
    inner_disc_folder_name = f'disc{disc_num_str}' # e.g., 'disc1', 'disc10'

    # This is the path to the folder that should contain individual subject (OAS1_xxxx_MRy) folders
    # e.g., /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/
    subjects_parent_path = os.path.join(current_disc_parent_path, inner_disc_folder_name)
    print(f"  Looking for subject folders within: {subjects_parent_path}")

    if not os.path.isdir(subjects_parent_path):
        print(f"  WARNING: Expected inner disc folder '{subjects_parent_path}' not found.")
        print(f"  Contents of '{current_disc_parent_path}': {os.listdir(current_disc_parent_path)}")
        print(f"  Skipping '{disc_parent_name}'.")
        continue
    
    print(f"  Found inner disc folder: {subjects_parent_path}")
    # print(f"  Contents of '{subjects_parent_path}': {os.listdir(subjects_parent_path)}")


    # --- 5. FIND SUBJECT FOLDERS (OAS1_xxxx_MRy) ---
    # Glob pattern for subject folders like 'OAS1_0001_MR1', 'OAS1_0002_MR1', etc.
    subject_folder_glob_pattern = os.path.join(subjects_parent_path, 'OAS1_*_MR*')
    subject_folders_found = glob.glob(subject_folder_glob_pattern)
    print(f"  Found {len(subject_folders_found)} subject folders using pattern '{subject_folder_glob_pattern}'.")

    if not subject_folders_found:
        print(f"  WARNING: No subject folders (OAS1_*_MR*) found in '{subjects_parent_path}'.")
        print(f"  Contents of '{subjects_parent_path}' were: {os.listdir(subjects_parent_path)}")
        # continue # Optional: skip to next disc_parent if no subjects found

    for subj_folder_path in subject_folders_found:
        # e.g., subj_folder_path is /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_0001_MR1
        # print(f"    Processing Subject Folder: {subj_folder_path}")
        subject_id_from_folder = os.path.basename(subj_folder_path) # e.g., OAS1_0001_MR1

        # --- 6. FIND THE TARGET IMAGE FILE ---
        # Path to the specific image file we want, including the 'MPRAGE' subdirectory
        # Filename structure: OAS1_xxxx_MRy_mpr_ni_anon_sbj_111.img (n_i is num scans, e.g., n4)
        
        # Corrected path including 'MPRAGE'
        image_file_path_pattern = os.path.join(
            subj_folder_path,
            'PROCESSED',
            'MPRAGE',  # This was the missing piece from your detailed example path!
            'SUBJ_111',
            f'{subject_id_from_folder}_mpr_n*_anon_sbj_111.img' # Allows for n1, n2, n3, n4 etc.
        )
        
        # print(f"      Looking for image file with pattern: {image_file_path_pattern}")
        found_img_files = glob.glob(image_file_path_pattern)

        if not found_img_files:
            # Try a more general wildcard if 'n*' didn't match (e.g. if it's just _mpr_1_ or similar)
            image_file_path_pattern_alt = os.path.join(
                subj_folder_path,
                'PROCESSED', 'MPRAGE', 'SUBJ_111',
                f'{subject_id_from_folder}_mpr_*_anon_sbj_111.img'
            )
            # print(f"      Trying alternative pattern: {image_file_path_pattern_alt}")
            found_img_files = glob.glob(image_file_path_pattern_alt)
        
        if found_img_files:
            # Usually, there's one such averaged file. If multiple match, take the first.
            image_paths.append(found_img_files[0])
            # print(f"      SUCCESS: Added image: {found_img_files[0]}")
        else:
            # print(f"      WARNING: No .img file found for {subject_id_from_folder} in PROCESSED/MPRAGE/SUBJ_111.")
            # For detailed debugging, you can list contents of SUBJ_111
            path_to_check = os.path.join(subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111')
            if os.path.isdir(path_to_check):
                 pass # print(f"      Contents of '{path_to_check}': {os.listdir(path_to_check)}")
            else:
                 pass # print(f"      Directory '{path_to_check}' does not exist.")


# --- 7. FINAL REPORT ---
print(f"\n--- SUMMARY ---")
print(f"Found {len(image_paths)} potential ground truth images in total.")

if image_paths:
    print(f"First few example paths found:")
    for p in image_paths[:min(5, len(image_paths))]: # Print up to 5 examples
        print(f"  {p}")
else:
    print("No images found. Please carefully review the WARNINGS and ERROR messages above.")
    print("Key things to check:")
    print("  1. Is the `dataset_name` ('oasis-1') correct for your Kaggle input folder?")
    print("  2. Does the structure `oasis-1/oasis_cross-sectional_discX/discX/OAS1_xxxx_MRy/PROCESSED/MPRAGE/SUBJ_111/` match your data?")
    print("  3. Are the file names like `OAS1_xxxx_MRy_mpr_n#_anon_sbj_111.img`?")

# ... (Previous code: Data loading, etc.) ...

# --- 8. LOAD AND DISPLAY A SAMPLE IMAGE (if found) ---
if image_paths:
    print("\n--- Loading a sample image ---")
    # Let's try to load the first image found
    sample_img_path = image_paths[0]
    print(f"Loading: {sample_img_path}")
    try:
        img_obj = nib.load(sample_img_path)
        img_data = img_obj.get_fdata()  # Get data as numpy array
        print(f"  Image shape: {img_data.shape}, Data type: {img_data.dtype}, Min: {np.min(img_data):.2f}, Max: {np.max(img_data):.2f}")

        # --- Selecting a slice ---
        if img_data.ndim == 4 and img_data.shape[3] == 1:  # Handle 4D images
            # For SUBJ_111 images (sagittal): Dim 0 is sagittal slices,  Shape (256, 256, 160, 1).
            # For T88_111 images (transverse/axial): Dim 2 is axial slices.

            # Let's pick an axial-like slice for typical brain viewing, slice from the 3rd dimension (Z)
            central_slice_idx_ax = img_data.shape[2] // 2 # 160//2 = 80
            slice_2d = img_data[:, :, central_slice_idx_ax, 0].astype(np.float32).copy(

            plt.figure(figsize=(8, 8))
            plt.imshow(slice_2d, cmap='gray')  # No rotation for now, display as is
            plt.title(f"Axial-like Slice (Central, Check Orientation)\nfrom {os.path.basename(sample_img_path)}")
            plt.axis('off')
            plt.show()

            ground_truth_image = slice_2d
            # Ensure it's float and normalized for CS processing
            if np.max(ground_truth_image) > np.min(ground_truth_image):
                ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                     (np.max(ground_truth_image) - np.min(ground_truth_image))
            else:
                ground_truth_image = np.zeros_like(ground_truth_image)  # Handle constant image

            print(f"\nSelected 2D slice for CS (shape {ground_truth_image.shape}, "
                  f"range [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}])")

        else:
            print(f"  Loaded image data is not 4D (shape: {img_data.shape}). Cannot select slice as expected.")

    except Exception as e:
        print(f"  ERROR loading or processing sample image '{sample_img_path}': {e}")
        import traceback
        traceback.print_exc()

# --- START: Run CS Simulation (k-space, masking, zero-filling) ---
if 'ground_truth_image' in locals(): # Only if a slice was selected
    print("\n--- Starting CS Simulation ---")

    # 1. Transform to k-space
    from numpy.fft import fft2, ifft2, fftshift, ifftshift
    k_space_full = fftshift(fft2(ground_truth_image))

    plt.figure(figsize=(10,5))
    plt.subplot(1,2,1)
    plt.imshow(np.log(1 + np.abs(k_space_full)), cmap='gray')
    plt.title("Log Magnitude of Full k-space")
    plt.subplot(1,2,2)
    plt.imshow(np.angle(k_space_full), cmap='gray')
    plt.title("Phase of Full k-space")
    plt.show()

    # 2. Design Undersampling Mask (Cartesian as example)
    def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.1):
        num_cols = shape[1]
        num_low_freqs = int(round(num_cols * center_fraction))
        mask = np.zeros(shape, dtype=bool)
        # Center region (fully sampled)
        pad = (num_cols - num_low_freqs + 1) // 2
        mask[:, pad:pad + num_low_freqs] = True
        # Outer region (undersampled)
        num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
        outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
        permuted_outer_lines = np.random.permutation(outer_lines_indices)
        selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
        mask[:, selected_outer_lines] = True
        return mask

    acceleration = 4  # Undersample by a factor of 4
    mask = create_cartesian_mask(k_space_full.shape, acceleration)

    plt.imshow(mask, cmap='gray')
    plt.title(f"1D Cartesian Mask (R={acceleration})")
    plt.show()

    # 3. Apply Mask
    k_space_undersampled = k_space_full * mask

    # 4. Zero-filled Reconstruction (Baseline)
    image_undersampled_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))

    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(ground_truth_image, cmap='gray') # Show original slice
    plt.title("Ground Truth")
    plt.axis('off')
    plt.subplot(1, 2, 2)
    plt.imshow(image_undersampled_recon, cmap='gray') # Show reconstructed image
    plt.title(f"Zero-filled Recon (R={acceleration})")
    plt.axis('off')
    plt.show()

    # 5. Quantitative Evaluation (PSNR, SSIM)
    from skimage.metrics import peak_signal_noise_ratio as psnr
    from skimage.metrics import structural_similarity as ssim

    psnr_val_zf = psnr(ground_truth_image, image_undersampled_recon, data_range=ground_truth_image.max() - ground_truth_image.min())
    ssim_val_zf = ssim(ground_truth_image, image_undersampled_recon, data_range=ground_truth_image.max() - ground_truth_image.min())
    print(f"Zero-Filled: PSNR={psnr_val_zf:.2f} dB, SSIM={ssim_val_zf:.4f}")

    # The following lines are needed to start the reconstruction process
    # Add the Compressed Sensing Reconstruction Here (e.g. using ISTA/FISTA/ADMM)
    # cs_reconstructed_image = YourCSReconstructionFunction(k_space_undersampled, mask, ground_truth_image.shape)

    # Then measure these, and then make sure to make a separate plot.
    # psnr_val_cs = psnr(ground_truth_image, cs_reconstructed_image, data_range=...)
    # ssim_val_cs = ssim(ground_truth_image, cs_reconstructed_image, data_range=...)
    # print(f"CS Recon: PSNR={psnr_val_cs:.2f} dB, SSIM={ssim_val_cs:.4f}")
else:
    print("No slice selected - skipping CS simulation.")


# Example placeholder for what you should have from previous steps:
# This is just for this script to be runnable standalone for demonstration.
# In your notebook, these variables will be populated by your data loading and zero-filled recon steps.
if 'ground_truth_image' not in locals():
    print("INFO: 'ground_truth_image' not found. Creating a dummy one for demonstration.")
    # Create a dummy ground truth image (e.g., Shepp-Logan phantom)
    from skimage.data import shepp_logan_phantom
    from skimage.transform import resize
    phantom = shepp_logan_phantom()
    ground_truth_image = resize(phantom, (256, 256), anti_aliasing=True)
    if np.max(ground_truth_image) > np.min(ground_truth_image): # Normalize
        ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                             (np.max(ground_truth_image) - np.min(ground_truth_image))
    else:
        ground_truth_image = np.zeros_like(ground_truth_image)

    # Dummy k-space and zero-filled recon
    k_space_full = fftshift(fft2(ground_truth_image))
    
    def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
        num_cols = shape[1]
        num_low_freqs = int(round(num_cols * center_fraction))
        mask = np.zeros(shape, dtype=bool)
        pad = (num_cols - num_low_freqs + 1) // 2
        mask[:, pad:pad + num_low_freqs] = True
        num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
        outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
        permuted_outer_lines = np.random.permutation(outer_lines_indices)
        selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
        mask[:, selected_outer_lines] = True
        return mask

    acceleration_default = 4
    mask_default = create_cartesian_mask(k_space_full.shape, acceleration_default)
    k_space_undersampled_default = k_space_full * mask_default
    image_undersampled_recon_default = np.abs(ifft2(ifftshift(k_space_undersampled_default)))
    
    # Use these defaults if the real ones aren't loaded
    if 'k_space_undersampled' not in locals(): k_space_undersampled = k_space_undersampled_default
    if 'mask' not in locals(): mask = mask_default
    if 'image_undersampled_recon' not in locals(): image_undersampled_recon = image_undersampled_recon_default
    if 'acceleration' not in locals(): acceleration = acceleration_default

    if 'psnr_val_zf' not in locals():
        psnr_val_zf = psnr(ground_truth_image, image_undersampled_recon, data_range=1.0)
        ssim_val_zf = ssim(ground_truth_image, image_undersampled_recon, data_range=1.0, channel_axis=None)
        print(f"Dummy Zero-Filled: PSNR={psnr_val_zf:.2f} dB, SSIM={ssim_val_zf:.4f}")

def soft_threshold(x, threshold):
    """Soft-thresholding operator."""
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

# For Wavelet Transform (requires PyWavelets: pip install PyWavelets)
import pywt

def wavelet_forward(image, wavelet='db4', level=3):
    """Apply forward wavelet transform."""
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    """Apply inverse wavelet transform."""
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, # Pass ground truth for monitoring
                    wavelet='db4', level=3):
    """
    ISTA for CS MRI reconstruction with wavelet sparsity.
    (Corrected handling of wavelet coefficients)
    """
    x_recon = initial_image.copy().astype(np.complex128) # Work with complex numbers internally
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    
    step_size = 1.0 # Lipschitz constant, often 1 for normalized Fourier data

    print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

    for i in range(n_iters):
        # 1. Gradient descent step (data consistency)
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        # The gradient involves A*(Ax-y), where A is F_u and A* is F_u_adj
        # A*(k_err) = F_inv(mask * k_err)
        grad_data_term = ifft2(ifftshift(k_space_error * mask)) # Mask applied due to A*
        
        x_intermediate = x_recon - step_size * grad_data_term # grad_data_term is already complex

        # 2. Proximal operator for L1 norm in wavelet domain (soft-thresholding)
        # Apply wavelet transform (to the real part, assuming image is real-valued)
        # If your image is truly complex, wavelet transform needs to handle complex data
        # For MRI magnitude images, we usually work with the real part for wavelet transform.
        x_intermediate_real = np.real(x_intermediate)
        
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        
        threshold = lambda_val * step_size
        
        # is given by the shape described in coeff_slices[0]
        approx_coeffs_slice_info = coeff_slices[0] # This is just a slice object for the cA coeffs
        
        # Alternative way to get the size of the approx coeffs:
        # The first set of coefficients from pywt.wavedec2 is cA_n (approximation at level n)
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size # Number of elements in cA_n

        coeffs_arr_thresh = coeffs_arr.copy()
        # Do NOT threshold the approximation coefficients (the first `approx_coeffs_size` elements)
        # Threshold only the detail coefficients (everything after the approx_coeffs)
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        
        # Inverse wavelet transform
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        
        # Combine with imaginary part if you were preserving it (often not done for mag images)
        x_recon = x_reconstructed_real.astype(np.complex128) # Assume result is real after wavelet step

        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            # For PSNR, compare with the real part, clipped and normalized if ground truth is.
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
            
    return np.clip(np.real(x_recon), 0, 1) # Return real part, clipped

# Check if ista_wavelet_cs is defined, if not, define a placeholder
if 'ista_wavelet_cs' not in locals():
    print("WARNING: 'ista_wavelet_cs' not defined. Using a placeholder that returns initial image.")
    def ista_wavelet_cs(k_space_undersampled_local, mask_local, initial_image_local, n_iters, lambda_val,
                        ground_truth_for_psnr, wavelet='db4', level=3):
        print(f"Placeholder ISTA called: iters={n_iters}, lambda={lambda_val}. Returning initial image.")
        final_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(initial_image_local),0,1), data_range=1.0)
        print(f"ISTA Iteration {n_iters}/{n_iters}, Current PSNR: {final_psnr:.4f} dB (placeholder)")
        return np.clip(np.real(initial_image_local), 0, 1)


# --- 1. Visualize the Results (assuming you have one CS reconstruction done) ---
# Let's assume you have 'cs_reconstructed_image_ista' from your previous run
# If not, run a default one here:
if 'cs_reconstructed_image_ista' not in locals():
    print("INFO: 'cs_reconstructed_image_ista' not found. Running a default ISTA.")
    default_lambda = 0.005
    default_iters = 10 # Keep it short for this demo
    cs_reconstructed_image_ista = ista_wavelet_cs(
        k_space_undersampled, mask, image_undersampled_recon.copy(),
        n_iters=default_iters, lambda_val=default_lambda,
        ground_truth_for_psnr=ground_truth_image
    )
    psnr_val_ista_default = psnr(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0)
    ssim_val_ista_default = ssim(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0, channel_axis=None)
    print(f"Default ISTA: PSNR={psnr_val_ista_default:.2f} dB, SSIM={ssim_val_ista_default:.4f} (lambda={default_lambda})")


print("\n--- 1. Visualizing Current Results ---")
if 'cs_reconstructed_image_ista' in locals():
    psnr_val_current_ista = psnr(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0)
    ssim_val_current_ista = ssim(ground_truth_image, cs_reconstructed_image_ista, data_range=1.0, channel_axis=None)

    plt.figure(figsize=(18, 6))
    plt.subplot(1, 4, 1)
    plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
    plt.title("Ground Truth")
    plt.axis('off')

    plt.subplot(1, 4, 2)
    plt.imshow(image_undersampled_recon, cmap='gray', vmin=0, vmax=1)
    plt.title(f"Zero-filled (R={acceleration})\nPSNR: {psnr_val_zf:.2f} dB\nSSIM: {ssim_val_zf:.4f}")
    plt.axis('off')

    plt.subplot(1, 4, 3)
    plt.imshow(cs_reconstructed_image_ista, cmap='gray', vmin=0, vmax=1)
    plt.title(f"ISTA Wavelet (R={acceleration})\nPSNR: {psnr_val_current_ista:.2f} dB\nSSIM: {ssim_val_current_ista:.4f}")
    plt.axis('off')

    # Difference Image
    diff_ista = np.abs(ground_truth_image - cs_reconstructed_image_ista)
    plt.subplot(1, 4, 4)
    plt.imshow(diff_ista, cmap='hot', vmin=0, vmax=np.percentile(diff_ista,99)) # Scale colormap
    plt.title(f"Difference (GT - ISTA)\nMean Abs Error: {np.mean(diff_ista):.4f}")
    plt.axis('off')
    plt.tight_layout()
    plt.show()
else:
    print("Skipping visualization as 'cs_reconstructed_image_ista' is not available.")


# --- 2. Tune lambda_ista Further ---
print("\n--- 2. Tuning Lambda for ISTA ---")
lambda_values_to_test = [0.0001, 0.0005, 0.001, 0.003, 0.005, 0.007, 0.01, 0.02, 0.05]
iters_for_lambda_tuning = 30 # Fixed number of iterations for this tuning
psnr_results_lambda = []
ssim_results_lambda = []

for lam_val in lambda_values_to_test:
    print(f"  Testing Lambda: {lam_val}")
    temp_recon = ista_wavelet_cs(
        k_space_undersampled, mask, image_undersampled_recon.copy(),
        n_iters=iters_for_lambda_tuning, lambda_val=lam_val,
        ground_truth_for_psnr=ground_truth_image
    )
    psnr_results_lambda.append(psnr(ground_truth_image, temp_recon, data_range=1.0))
    ssim_results_lambda.append(ssim(ground_truth_image, temp_recon, data_range=1.0, channel_axis=None))

# Plotting Lambda Tuning Results
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(lambda_values_to_test, psnr_results_lambda, marker='o')
plt.xscale('log') # Lambdas often vary over orders of magnitude
plt.xlabel("Lambda (Regularization Strength)")
plt.ylabel("PSNR (dB)")
plt.title(f"PSNR vs. Lambda (ISTA, {iters_for_lambda_tuning} iterations, R={acceleration})")
plt.grid(True, which="both", ls="-")

plt.subplot(1, 2, 2)
plt.plot(lambda_values_to_test, ssim_results_lambda, marker='s', color='r')
plt.xscale('log')
plt.xlabel("Lambda (Regularization Strength)")
plt.ylabel("SSIM")
plt.title(f"SSIM vs. Lambda (ISTA, {iters_for_lambda_tuning} iterations, R={acceleration})")
plt.grid(True, which="both", ls="-")
plt.tight_layout()
plt.show()

# Find and print the best lambda
if psnr_results_lambda:
    best_lambda_idx_psnr = np.argmax(psnr_results_lambda)
    best_lambda_psnr = lambda_values_to_test[best_lambda_idx_psnr]
    print(f"Best Lambda (for PSNR): {best_lambda_psnr} -> PSNR: {psnr_results_lambda[best_lambda_idx_psnr]:.2f} dB")

    best_lambda_idx_ssim = np.argmax(ssim_results_lambda)
    best_lambda_ssim = lambda_values_to_test[best_lambda_idx_ssim]
    print(f"Best Lambda (for SSIM): {best_lambda_ssim} -> SSIM: {ssim_results_lambda[best_lambda_idx_ssim]:.4f}")
    optimal_lambda = best_lambda_psnr # Choose one, e.g., based on PSNR for further tests
else:
    optimal_lambda = 0.005 # Fallback if tuning didn't run
    print("Lambda tuning did not produce results. Using default optimal_lambda.")


# --- 3. Experiment with num_iterations_ista ---
print("\n--- 3. Experimenting with Number of Iterations ---")
# Use the 'optimal_lambda' found above, or a good default
lambda_for_iter_test = optimal_lambda
iterations_to_test = [5, 10, 15, 20, 30, 40, 50, 75, 100]
psnr_results_iters = []
ssim_results_iters = []

for num_iters in iterations_to_test:
    print(f"  Testing Iterations: {num_iters} (Lambda: {lambda_for_iter_test})")
    temp_recon = ista_wavelet_cs(
        k_space_undersampled, mask, image_undersampled_recon.copy(),
        n_iters=num_iters, lambda_val=lambda_for_iter_test,
        ground_truth_for_psnr=ground_truth_image
    )
    psnr_results_iters.append(psnr(ground_truth_image, temp_recon, data_range=1.0))
    ssim_results_iters.append(ssim(ground_truth_image, temp_recon, data_range=1.0, channel_axis=None))

# Plotting Iteration Tuning Results
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(iterations_to_test, psnr_results_iters, marker='o')
plt.xlabel("Number of Iterations")
plt.ylabel("PSNR (dB)")
plt.title(f"PSNR vs. Iterations (ISTA, Lambda={lambda_for_iter_test:.4f}, R={acceleration})")
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(iterations_to_test, ssim_results_iters, marker='s', color='r')
plt.xlabel("Number of Iterations")
plt.ylabel("SSIM")
plt.title(f"SSIM vs. Iterations (ISTA, Lambda={lambda_for_iter_test:.4f}, R={acceleration})")
plt.grid(True)
plt.tight_layout()
plt.show()

optimal_iters = 50 # Choose based on plots, e.g., where it plateaus.
if psnr_results_iters:
    # Heuristic: find where PSNR is within 0.01 dB of max and take the earliest
    max_psnr_iter = np.max(psnr_results_iters)
    try:
        optimal_iters_idx = np.where(np.array(psnr_results_iters) >= max_psnr_iter - 0.01)[0][0]
        optimal_iters = iterations_to_test[optimal_iters_idx]
        print(f"Optimal iterations (heuristic): {optimal_iters} -> PSNR: {psnr_results_iters[optimal_iters_idx]:.2f} dB")
    except IndexError:
        print("Could not determine optimal_iters heuristically, using default 50.")
        optimal_iters = 50
else:
    print("Iteration tuning did not produce results. Using default optimal_iters.")


# --- 4. Vary Acceleration Factor (acceleration) ---
print("\n--- 4. Varying Acceleration Factor ---")
acceleration_factors_to_test = [2, 3, 4, 5, 6, 8]
# Use optimal_lambda and optimal_iters found from previous steps, or good defaults
lambda_for_accel_test = optimal_lambda
iters_for_accel_test = optimal_iters

psnr_zf_accel = []
ssim_zf_accel = []
psnr_ista_accel = []
ssim_ista_accel = []

for accel_R in acceleration_factors_to_test:
    print(f"  Testing Acceleration Factor R = {accel_R}")
    # Create new mask and undersampled k-space for this R
    current_mask = create_cartesian_mask(k_space_full.shape, accel_R)
    current_k_space_undersampled = k_space_full * current_mask
    current_image_zf = np.abs(ifft2(ifftshift(current_k_space_undersampled)))

    psnr_zf_accel.append(psnr(ground_truth_image, current_image_zf, data_range=1.0))
    ssim_zf_accel.append(ssim(ground_truth_image, current_image_zf, data_range=1.0, channel_axis=None))

    ista_recon_accel = ista_wavelet_cs(
        current_k_space_undersampled, current_mask, current_image_zf.copy(),
        n_iters=iters_for_accel_test, lambda_val=lambda_for_accel_test, # Note: optimal lambda might change with R!
        ground_truth_for_psnr=ground_truth_image
    )
    psnr_ista_accel.append(psnr(ground_truth_image, ista_recon_accel, data_range=1.0))
    ssim_ista_accel.append(ssim(ground_truth_image, ista_recon_accel, data_range=1.0, channel_axis=None))

# Plotting Acceleration Factor Results
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(acceleration_factors_to_test, psnr_zf_accel, marker='x', linestyle='--', label='Zero-Filled')
plt.plot(acceleration_factors_to_test, psnr_ista_accel, marker='o', label=f'ISTA (Lambda={lambda_for_accel_test:.4f}, Iters={iters_for_accel_test})')
plt.xlabel("Acceleration Factor (R)")
plt.ylabel("PSNR (dB)")
plt.title("PSNR vs. Acceleration Factor")
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(acceleration_factors_to_test, ssim_zf_accel, marker='x', linestyle='--', label='Zero-Filled')
plt.plot(acceleration_factors_to_test, ssim_ista_accel, marker='s', label=f'ISTA (Lambda={lambda_for_accel_test:.4f}, Iters={iters_for_accel_test})')
plt.xlabel("Acceleration Factor (R)")
plt.ylabel("SSIM")
plt.title("SSIM vs. Acceleration Factor")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


# --- 5. Use Different Undersampling Masks ---
print("\n--- 5. Using Different Undersampling Masks ---")
# (Keep acceleration, lambda, iters fixed for this comparison, e.g., R=4)
fixed_R_for_mask_test = 4
fixed_lambda_for_mask_test = optimal_lambda
fixed_iters_for_mask_test = optimal_iters

# a) Cartesian Mask (already have this)
mask_cartesian = create_cartesian_mask(k_space_full.shape, fixed_R_for_mask_test)
k_space_cartesian = k_space_full * mask_cartesian
zf_cartesian = np.abs(ifft2(ifftshift(k_space_cartesian)))
psnr_zf_cartesian = psnr(ground_truth_image, zf_cartesian, data_range=1.0)
ista_cartesian = ista_wavelet_cs(k_space_cartesian, mask_cartesian, zf_cartesian.copy(),
                                 fixed_iters_for_mask_test, fixed_lambda_for_mask_test, ground_truth_image)
psnr_ista_cartesian = psnr(ground_truth_image, ista_cartesian, data_range=1.0)
print(f"Cartesian Mask (R={fixed_R_for_mask_test}): ZF PSNR={psnr_zf_cartesian:.2f}, ISTA PSNR={psnr_ista_cartesian:.2f}")


# b) Random 2D Mask (ensure k-space center is sampled for stability)
def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    num_points = int(np.prod(shape) / acceleration_factor)
    mask = np.zeros(shape, dtype=bool)
    
    # Fully sample center
    center_rows = int(shape[0] * center_fraction)
    center_cols = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
    c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
    mask[r_start:r_end, c_start:c_end] = True
    
    num_sampled_center = np.sum(mask)
    remaining_points_to_sample = num_points - num_sampled_center

    if remaining_points_to_sample > 0:
        # Create a flat list of indices for points outside the center
        outer_indices = []
        for r in range(shape[0]):
            for c in range(shape[1]):
                if not (r_start <= r < r_end and c_start <= c < c_end):
                    outer_indices.append((r, c))
        
        if len(outer_indices) > 0:
            chosen_outer_indices_flat = np.random.choice(len(outer_indices), 
                                                     min(remaining_points_to_sample, len(outer_indices)), 
                                                     replace=False)
            for flat_idx in chosen_outer_indices_flat:
                r, c = outer_indices[flat_idx]
                mask[r, c] = True
    return mask

mask_random2d = create_random_2d_mask(k_space_full.shape, fixed_R_for_mask_test, seed=0) # Seed for reproducibility
k_space_random2d = k_space_full * mask_random2d
zf_random2d = np.abs(ifft2(ifftshift(k_space_random2d)))
psnr_zf_random2d = psnr(ground_truth_image, zf_random2d, data_range=1.0)
ista_random2d = ista_wavelet_cs(k_space_random2d, mask_random2d, zf_random2d.copy(),
                                fixed_iters_for_mask_test, fixed_lambda_for_mask_test, ground_truth_image)
psnr_ista_random2d = psnr(ground_truth_image, ista_random2d, data_range=1.0)
print(f"Random 2D Mask (R={fixed_R_for_mask_test}): ZF PSNR={psnr_zf_random2d:.2f}, ISTA PSNR={psnr_ista_random2d:.2f}")

# c) Variable Density Random Mask (Polynomial, e.g., p=2 for quadratic decay)
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
    if seed is not None:
        np.random.seed(seed)
        
    # Create probability density function (PDF)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    
    # Normalize distances to [-1, 1] like range, though 0 to max_dist is fine
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    
    # Simple polynomial PDF (1 - r^p), higher probability at center
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1) # Ensure probabilities are valid

    # Scale PDF to achieve desired acceleration
    target_samples = int(np.prod(shape) / acceleration_factor)
    
    # Iteratively adjust scaling of PDF until close to target_samples
    # This is a bit heuristic; a more robust way involves sorting and picking top N based on PDF values
    # For simplicity here, we'll threshold a scaled PDF
    
    # Simple thresholding approach:
    # Sort PDF values and pick top N. This is more robust than scaling.
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf) # Sort descending
    
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)

    # Ensure center is fully sampled (override if necessary)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

mask_vd_random = create_variable_density_mask(k_space_full.shape, fixed_R_for_mask_test, poly_degree=2, seed=0)
k_space_vd_random = k_space_full * mask_vd_random
zf_vd_random = np.abs(ifft2(ifftshift(k_space_vd_random)))
psnr_zf_vd_random = psnr(ground_truth_image, zf_vd_random, data_range=1.0)
ista_vd_random = ista_wavelet_cs(k_space_vd_random, mask_vd_random, zf_vd_random.copy(),
                                 fixed_iters_for_mask_test, fixed_lambda_for_mask_test, ground_truth_image)
psnr_ista_vd_random = psnr(ground_truth_image, ista_vd_random, data_range=1.0)
print(f"Variable Density Mask (R={fixed_R_for_mask_test}): ZF PSNR={psnr_zf_vd_random:.2f}, ISTA PSNR={psnr_ista_vd_random:.2f}")


# Displaying Mask Results
plt.figure(figsize=(18, 12))
masks_to_show = [
    (mask_cartesian, "Cartesian", zf_cartesian, ista_cartesian, psnr_zf_cartesian, psnr_ista_cartesian),
    (mask_random2d, "Random 2D", zf_random2d, ista_random2d, psnr_zf_random2d, psnr_ista_random2d),
    (mask_vd_random, "Variable Density", zf_vd_random, ista_vd_random, psnr_zf_vd_random, psnr_ista_vd_random)
]

for i, (m, title, zf_img, ista_img, p_zf, p_ista) in enumerate(masks_to_show):
    plt.subplot(3, 4, i*4 + 1)
    plt.imshow(fftshift(m), cmap='gray') # fftshift for display
    plt.title(f"{title} Mask")
    plt.axis('off')

    plt.subplot(3, 4, i*4 + 2)
    plt.imshow(zf_img, cmap='gray', vmin=0, vmax=1)
    plt.title(f"ZF ({title})\nPSNR: {p_zf:.2f}")
    plt.axis('off')
    
    plt.subplot(3, 4, i*4 + 3)
    plt.imshow(ista_img, cmap='gray', vmin=0, vmax=1)
    plt.title(f"ISTA ({title})\nPSNR: {p_ista:.2f}")
    plt.axis('off')

    diff_img_mask = np.abs(ground_truth_image - ista_img)
    plt.subplot(3, 4, i*4 + 4)
    plt.imshow(diff_img_mask, cmap='hot', vmin=0, vmax=np.percentile(diff_img_mask, 99))
    plt.title(f"ISTA Diff ({title})\nMean Abs Err: {np.mean(diff_img_mask):.4f}")
    plt.axis('off')

plt.tight_layout()
plt.show()

print("\n--- Experiments Complete ---")
Attempting to use base dataset path: /kaggle/input/oasis-1
Successfully located base dataset path: /kaggle/input/oasis-1
Contents of '/kaggle/input/oasis-1': ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Found 12 'oasis_cross-sectional_discX' folders: ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found 37 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found 34 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found 39 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7/OAS1_*_MR*'.
very large origin values relative to dims; leaving as set, ignoring for affine
very large origin values relative to dims; leaving as set, ignoring for affine

--- SUMMARY ---
Found 434 potential ground truth images in total.
First few example paths found:
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0230_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0230_MR2_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0224_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0224_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0212_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0212_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0227_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0227_MR1_mpr_n4_anon_sbj_111.img

--- Loading a sample image ---
Loading: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3775.00
2. Tuning Lambda for ISTA ---
  Testing Lambda: 0.0001
Starting ISTA: iterations=30, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.0005
Starting ISTA: iterations=30, lambda=0.0005, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.001
Starting ISTA: iterations=30, lambda=0.001, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.003
Starting ISTA: iterations=30, lambda=0.003, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.005
Starting ISTA: iterations=30, lambda=0.005, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.007
Starting ISTA: iterations=30, lambda=0.007, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.01
Starting ISTA: iterations=30, lambda=0.01, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.02
Starting ISTA: iterations=30, lambda=0.02, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Lambda: 0.05
Starting ISTA: iterations=30, lambda=0.05, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB

Best Lambda (for PSNR): 0.0001 -> PSNR: 29.34 dB
Best Lambda (for SSIM): 0.0001 -> SSIM: 0.7865

--- 3. Experimenting with Number of Iterations ---
  Testing Iterations: 5 (Lambda: 0.0001)
Starting ISTA: iterations=5, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/5, Current PSNR: 28.8241 dB
ISTA Iteration 2/5, Current PSNR: 29.1513 dB
ISTA Iteration 3/5, Current PSNR: 29.2648 dB
ISTA Iteration 4/5, Current PSNR: 29.3078 dB
ISTA Iteration 5/5, Current PSNR: 29.3257 dB
  Testing Iterations: 10 (Lambda: 0.0001)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.8241 dB
ISTA Iteration 2/10, Current PSNR: 29.1513 dB
ISTA Iteration 3/10, Current PSNR: 29.2648 dB
ISTA Iteration 4/10, Current PSNR: 29.3078 dB
ISTA Iteration 5/10, Current PSNR: 29.3257 dB
ISTA Iteration 6/10, Current PSNR: 29.3337 dB
ISTA Iteration 7/10, Current PSNR: 29.3375 dB
ISTA Iteration 8/10, Current PSNR: 29.3394 dB
ISTA Iteration 9/10, Current PSNR: 29.3403 dB
ISTA Iteration 10/10, Current PSNR: 29.3407 dB
  Testing Iterations: 15 (Lambda: 0.0001)
Starting ISTA: iterations=15, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/15, Current PSNR: 28.8241 dB
ISTA Iteration 2/15, Current PSNR: 29.1513 dB
ISTA Iteration 3/15, Current PSNR: 29.2648 dB
ISTA Iteration 4/15, Current PSNR: 29.3078 dB
ISTA Iteration 5/15, Current PSNR: 29.3257 dB
ISTA Iteration 6/15, Current PSNR: 29.3337 dB
ISTA Iteration 7/15, Current PSNR: 29.3375 dB
ISTA Iteration 8/15, Current PSNR: 29.3394 dB
ISTA Iteration 9/15, Current PSNR: 29.3403 dB
ISTA Iteration 10/15, Current PSNR: 29.3407 dB
ISTA Iteration 11/15, Current PSNR: 29.3409 dB
ISTA Iteration 12/15, Current PSNR: 29.3411 dB
ISTA Iteration 13/15, Current PSNR: 29.3411 dB
ISTA Iteration 14/15, Current PSNR: 29.3411 dB
ISTA Iteration 15/15, Current PSNR: 29.3412 dB
  Testing Iterations: 20 (Lambda: 0.0001)
Starting ISTA: iterations=20, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 2/20, Current PSNR: 29.1513 dB
ISTA Iteration 4/20, Current PSNR: 29.3078 dB
ISTA Iteration 6/20, Current PSNR: 29.3337 dB
ISTA Iteration 8/20, Current PSNR: 29.3394 dB
ISTA Iteration 10/20, Current PSNR: 29.3407 dB
ISTA Iteration 12/20, Current PSNR: 29.3411 dB
ISTA Iteration 14/20, Current PSNR: 29.3411 dB
ISTA Iteration 16/20, Current PSNR: 29.3412 dB
ISTA Iteration 18/20, Current PSNR: 29.3412 dB
ISTA Iteration 20/20, Current PSNR: 29.3412 dB
  Testing Iterations: 30 (Lambda: 0.0001)
Starting ISTA: iterations=30, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 3/30, Current PSNR: 29.2648 dB
ISTA Iteration 6/30, Current PSNR: 29.3337 dB
ISTA Iteration 9/30, Current PSNR: 29.3403 dB
ISTA Iteration 12/30, Current PSNR: 29.3411 dB
ISTA Iteration 15/30, Current PSNR: 29.3412 dB
ISTA Iteration 18/30, Current PSNR: 29.3412 dB
ISTA Iteration 21/30, Current PSNR: 29.3412 dB
ISTA Iteration 24/30, Current PSNR: 29.3412 dB
ISTA Iteration 27/30, Current PSNR: 29.3412 dB
ISTA Iteration 30/30, Current PSNR: 29.3412 dB
  Testing Iterations: 40 (Lambda: 0.0001)
Starting ISTA: iterations=40, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 4/40, Current PSNR: 29.3078 dB
ISTA Iteration 8/40, Current PSNR: 29.3394 dB
ISTA Iteration 12/40, Current PSNR: 29.3411 dB
ISTA Iteration 16/40, Current PSNR: 29.3412 dB
ISTA Iteration 20/40, Current PSNR: 29.3412 dB
ISTA Iteration 24/40, Current PSNR: 29.3412 dB
ISTA Iteration 28/40, Current PSNR: 29.3412 dB
ISTA Iteration 32/40, Current PSNR: 29.3412 dB
ISTA Iteration 36/40, Current PSNR: 29.3412 dB
ISTA Iteration 40/40, Current PSNR: 29.3412 dB
  Testing Iterations: 50 (Lambda: 0.0001)
Starting ISTA: iterations=50, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 5/50, Current PSNR: 29.3257 dB
ISTA Iteration 10/50, Current PSNR: 29.3407 dB
ISTA Iteration 15/50, Current PSNR: 29.3412 dB
ISTA Iteration 20/50, Current PSNR: 29.3412 dB
ISTA Iteration 25/50, Current PSNR: 29.3412 dB
ISTA Iteration 30/50, Current PSNR: 29.3412 dB
ISTA Iteration 35/50, Current PSNR: 29.3412 dB
ISTA Iteration 40/50, Current PSNR: 29.3412 dB
ISTA Iteration 45/50, Current PSNR: 29.3412 dB
ISTA Iteration 50/50, Current PSNR: 29.3412 dB
  Testing Iterations: 75 (Lambda: 0.0001)
Starting ISTA: iterations=75, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 7/75, Current PSNR: 29.3375 dB
ISTA Iteration 14/75, Current PSNR: 29.3411 dB
ISTA Iteration 21/75, Current PSNR: 29.3412 dB
ISTA Iteration 28/75, Current PSNR: 29.3412 dB
ISTA Iteration 35/75, Current PSNR: 29.3412 dB
ISTA Iteration 42/75, Current PSNR: 29.3412 dB
ISTA Iteration 49/75, Current PSNR: 29.3412 dB
ISTA Iteration 56/75, Current PSNR: 29.3412 dB
ISTA Iteration 63/75, Current PSNR: 29.3412 dB
ISTA Iteration 70/75, Current PSNR: 29.3412 dB
ISTA Iteration 75/75, Current PSNR: 29.3412 dB
  Testing Iterations: 100 (Lambda: 0.0001)
Starting ISTA: iterations=100, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 10/100, Current PSNR: 29.3407 dB
ISTA Iteration 20/100, Current PSNR: 29.3412 dB
ISTA Iteration 30/100, Current PSNR: 29.3412 dB
ISTA Iteration 40/100, Current PSNR: 29.3412 dB
ISTA Iteration 50/100, Current PSNR: 29.3412 dB
ISTA Iteration 60/100, Current PSNR: 29.3412 dB
ISTA Iteration 70/100, Current PSNR: 29.3412 dB
ISTA Iteration 80/100, Current PSNR: 29.3412 dB
ISTA Iteration 90/100, Current PSNR: 29.3412 dB
ISTA Iteration 100/100, Current PSNR: 29.3412 dB

Optimal iterations (heuristic): 10 -> PSNR: 29.34 dB

--- 4. Varying Acceleration Factor ---
  Testing Acceleration Factor R = 2
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.5040 dB
ISTA Iteration 2/10, Current PSNR: 34.2845 dB
ISTA Iteration 3/10, Current PSNR: 34.5532 dB
ISTA Iteration 4/10, Current PSNR: 34.6482 dB
ISTA Iteration 5/10, Current PSNR: 34.6849 dB
ISTA Iteration 6/10, Current PSNR: 34.7005 dB
ISTA Iteration 7/10, Current PSNR: 34.7076 dB
ISTA Iteration 8/10, Current PSNR: 34.7110 dB
ISTA Iteration 9/10, Current PSNR: 34.7127 dB
ISTA Iteration 10/10, Current PSNR: 34.7135 dB
  Testing Acceleration Factor R = 3
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.0913 dB
ISTA Iteration 2/10, Current PSNR: 29.4880 dB
ISTA Iteration 3/10, Current PSNR: 29.6247 dB
ISTA Iteration 4/10, Current PSNR: 29.6756 dB
ISTA Iteration 5/10, Current PSNR: 29.6965 dB
ISTA Iteration 6/10, Current PSNR: 29.7058 dB
ISTA Iteration 7/10, Current PSNR: 29.7102 dB
ISTA Iteration 8/10, Current PSNR: 29.7123 dB
ISTA Iteration 9/10, Current PSNR: 29.7133 dB
ISTA Iteration 10/10, Current PSNR: 29.7138 dB
  Testing Acceleration Factor R = 4
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.1633 dB
ISTA Iteration 2/10, Current PSNR: 28.5278 dB
ISTA Iteration 3/10, Current PSNR: 28.6566 dB
ISTA Iteration 4/10, Current PSNR: 28.7060 dB
ISTA Iteration 5/10, Current PSNR: 28.7268 dB
ISTA Iteration 6/10, Current PSNR: 28.7361 dB
ISTA Iteration 7/10, Current PSNR: 28.7406 dB
ISTA Iteration 8/10, Current PSNR: 28.7427 dB
ISTA Iteration 9/10, Current PSNR: 28.7438 dB
ISTA Iteration 10/10, Current PSNR: 28.7443 dB
  Testing Acceleration Factor R = 5
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.3554 dB
ISTA Iteration 2/10, Current PSNR: 27.5911 dB
ISTA Iteration 3/10, Current PSNR: 27.6765 dB
ISTA Iteration 4/10, Current PSNR: 27.7103 dB
ISTA Iteration 5/10, Current PSNR: 27.7250 dB
ISTA Iteration 6/10, Current PSNR: 27.7317 dB
ISTA Iteration 7/10, Current PSNR: 27.7350 dB
ISTA Iteration 8/10, Current PSNR: 27.7365 dB
ISTA Iteration 9/10, Current PSNR: 27.7373 dB
ISTA Iteration 10/10, Current PSNR: 27.7377 dB
  Testing Acceleration Factor R = 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.7189 dB
ISTA Iteration 2/10, Current PSNR: 26.8753 dB
ISTA Iteration 3/10, Current PSNR: 26.9318 dB
ISTA Iteration 4/10, Current PSNR: 26.9542 dB
ISTA Iteration 5/10, Current PSNR: 26.9640 dB
ISTA Iteration 6/10, Current PSNR: 26.9685 dB
ISTA Iteration 7/10, Current PSNR: 26.9706 dB
ISTA Iteration 8/10, Current PSNR: 26.9717 dB
ISTA Iteration 9/10, Current PSNR: 26.9722 dB
ISTA Iteration 10/10, Current PSNR: 26.9725 dB
  Testing Acceleration Factor R = 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.0057 dB
ISTA Iteration 2/10, Current PSNR: 26.1203 dB
ISTA Iteration 3/10, Current PSNR: 26.1623 dB
ISTA Iteration 4/10, Current PSNR: 26.1792 dB
ISTA Iteration 5/10, Current PSNR: 26.1867 dB
ISTA Iteration 6/10, Current PSNR: 26.1902 dB
ISTA Iteration 7/10, Current PSNR: 26.1918 dB
ISTA Iteration 8/10, Current PSNR: 26.1927 dB
ISTA Iteration 9/10, Current PSNR: 26.1931 dB
ISTA Iteration 10/10, Current PSNR: 26.1933 dB


--- 5. Using Different Undersampling Masks ---
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.0100 dB
ISTA Iteration 2/10, Current PSNR: 28.3290 dB
ISTA Iteration 3/10, Current PSNR: 28.4448 dB
ISTA Iteration 4/10, Current PSNR: 28.4905 dB
ISTA Iteration 5/10, Current PSNR: 28.5102 dB
ISTA Iteration 6/10, Current PSNR: 28.5192 dB
ISTA Iteration 7/10, Current PSNR: 28.5235 dB
ISTA Iteration 8/10, Current PSNR: 28.5256 dB
ISTA Iteration 9/10, Current PSNR: 28.5266 dB
ISTA Iteration 10/10, Current PSNR: 28.5271 dB
Cartesian Mask (R=4): ZF PSNR=26.51, ISTA PSNR=28.53
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3668 dB
ISTA Iteration 2/10, Current PSNR: 25.7689 dB
ISTA Iteration 3/10, Current PSNR: 25.9207 dB
ISTA Iteration 4/10, Current PSNR: 25.9824 dB
ISTA Iteration 5/10, Current PSNR: 26.0094 dB
ISTA Iteration 6/10, Current PSNR: 26.0219 dB
ISTA Iteration 7/10, Current PSNR: 26.0280 dB
ISTA Iteration 8/10, Current PSNR: 26.0309 dB
ISTA Iteration 9/10, Current PSNR: 26.0324 dB
ISTA Iteration 10/10, Current PSNR: 26.0331 dB
Random 2D Mask (R=4): ZF PSNR=23.48, ISTA PSNR=26.03
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.8826 dB
ISTA Iteration 2/10, Current PSNR: 36.8827 dB
ISTA Iteration 3/10, Current PSNR: 36.8828 dB
ISTA Iteration 4/10, Current PSNR: 36.8828 dB
ISTA Iteration 5/10, Current PSNR: 36.8828 dB
ISTA Iteration 6/10, Current PSNR: 36.8828 dB
ISTA Iteration 7/10, Current PSNR: 36.8828 dB
ISTA Iteration 8/10, Current PSNR: 36.8828 dB
ISTA Iteration 9/10, Current PSNR: 36.8828 dB
ISTA Iteration 10/10, Current PSNR: 36.8828 dB
Variable Density Mask (R=4): ZF PSNR=36.78, ISTA PSNR=36.88


--- Experiments Complete ---


EXPERIMENT 2
MRI_CS_Edge_Pattern

import os
import glob
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'oasis-1'
base_dataset_path = os.path.join(base_kaggle_input_path, dataset_name)
print(f"Attempting to use base dataset path: {base_dataset_path}")

if not os.path.isdir(base_dataset_path):
    print(f"ERROR: Base dataset path does not exist: {base_dataset_path}")
    print(f"Listing contents of '{base_kaggle_input_path}': {os.listdir(base_kaggle_input_path)}")
    exit()

print(f"Successfully located base dataset path: {base_dataset_path}")
print(f"Contents of '{base_dataset_path}': {os.listdir(base_dataset_path)}")

image_paths = []

# --- 2. FIND CROSS-SECTIONAL DISC PARENT FOLDERS ---
disc_parent_folders_names = [
    d for d in os.listdir(base_dataset_path)
    if d.startswith('oasis_cross-sectional_disc') and \
       os.path.isdir(os.path.join(base_dataset_path, d))
]
print(f"\nFound {len(disc_parent_folders_names)} 'oasis_cross-sectional_discX' folders: {disc_parent_folders_names}")

if not disc_parent_folders_names:
    print(f"ERROR: No 'oasis_cross-sectional_discX' folders found under '{base_dataset_path}'.")
    exit()

# --- 3. ITERATE THROUGH EACH DISC PARENT FOLDER ---
for disc_parent_name in disc_parent_folders_names:
    current_disc_parent_path = os.path.join(base_dataset_path, disc_parent_name)
    print(f"\nProcessing Disc Parent Folder: {current_disc_parent_path}")

    disc_num_str = disc_parent_name.replace('oasis_cross-sectional_disc', '')
    inner_disc_folder_name = f'disc{disc_num_str}'
    subjects_parent_path = os.path.join(current_disc_parent_path, inner_disc_folder_name)
    print(f"  Looking for subject folders within: {subjects_parent_path}")

    if not os.path.isdir(subjects_parent_path):
        print(f"  WARNING: Expected inner disc folder '{subjects_parent_path}' not found.")
        print(f"  Contents of '{current_disc_parent_path}': {os.listdir(current_disc_parent_path)}")
        continue
    
    print(f"  Found inner disc folder: {subjects_parent_path}")

    subject_folder_glob_pattern = os.path.join(subjects_parent_path, 'OAS1_*_MR*')
    subject_folders_found = glob.glob(subject_folder_glob_pattern)
    print(f"  Found {len(subject_folders_found)} subject folders using pattern '{subject_folder_glob_pattern}'.")

    if not subject_folders_found:
        print(f"  WARNING: No subject folders found in '{subjects_parent_path}'.")
        continue

    for subj_folder_path in subject_folders_found:
        subject_id_from_folder = os.path.basename(subj_folder_path)
        image_file_path_pattern = os.path.join(
            subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111',
            f'{subject_id_from_folder}_mpr_n*_anon_sbj_111.img'
        )
        found_img_files = glob.glob(image_file_path_pattern)

        if not found_img_files:
            image_file_path_pattern_alt = os.path.join(
                subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111',
                f'{subject_id_from_folder}_mpr_*_anon_sbj_111.img'
            )
            found_img_files = glob.glob(image_file_path_pattern_alt)
        
        if found_img_files:
            image_paths.append(found_img_files[0])

# --- 4. FINAL REPORT ---
print(f"\n--- SUMMARY ---")
print(f"Found {len(image_paths)} potential ground truth images in total.")

if image_paths:
    print(f"First few example paths found:")
    for p in image_paths[:min(5, len(image_paths))]:
        print(f"  {p}")
else:
    print("No images found. Please check dataset structure and file names.")
    exit()

# --- 5. LOAD AND DISPLAY A SAMPLE IMAGE ---
print("\n--- Loading a sample image ---")
sample_img_path = image_paths[0]
print(f"Loading: {sample_img_path}")
try:
    img_obj = nib.load(sample_img_path)
    img_data = img_obj.get_fdata()
    print(f"  Image shape: {img_data.shape}, Data type: {img_data.dtype}, Min: {np.min(img_data):.2f}, Max: {np.max(img_data):.2f}")

    if img_data.ndim == 4 and img_data.shape[3] == 1:
        central_slice_idx_ax = img_data.shape[2] // 2
        slice_2d = img_data[:, :, central_slice_idx_ax, 0].astype(np.float32).copy()

        plt.figure(figsize=(8, 8))
        plt.imshow(slice_2d, cmap='gray')
        plt.title(f"Axial Slice\nfrom {os.path.basename(sample_img_path)}")
        plt.axis('off')
        plt.show()

        ground_truth_image = slice_2d
        if np.max(ground_truth_image) > np.min(ground_truth_image):
            ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                 (np.max(ground_truth_image) - np.min(ground_truth_image))
        else:
            ground_truth_image = np.zeros_like(ground_truth_image)

        print(f"\nSelected 2D slice for CS (shape {ground_truth_image.shape}, "
              f"range [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}])")

    else:
        print(f"  Loaded image is not 4D (shape: {img_data.shape}). Cannot select slice.")
        exit()

except Exception as e:
    print(f"  ERROR loading image '{sample_img_path}': {e}")
    import traceback
    traceback.print_exc()
    exit()

# --- 6. CS SIMULATION ---
if 'ground_truth_image' in locals():
    print("\n--- Starting CS Simulation ---")

    # Transform to k-space
    k_space_full = fftshift(fft2(ground_truth_image))

    # Define mask creation functions
    def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
        num_cols = shape[1]
        num_low_freqs = int(round(num_cols * center_fraction))
        mask = np.zeros(shape, dtype=bool)
        pad = (num_cols - num_low_freqs + 1) // 2
        mask[:, pad:pad + num_low_freqs] = True
        num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
        outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
        permuted_outer_lines = np.random.permutation(outer_lines_indices)
        selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
        mask[:, selected_outer_lines] = True
        return mask

    def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
        if seed is not None:
            np.random.seed(seed)
        num_points = int(np.prod(shape) / acceleration_factor)
        mask = np.zeros(shape, dtype=bool)
        center_rows = int(shape[0] * center_fraction)
        center_cols = int(shape[1] * center_fraction)
        r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
        c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
        mask[r_start:r_end, c_start:c_end] = True
        num_sampled_center = np.sum(mask)
        remaining_points = num_points - num_sampled_center
        if remaining_points > 0:
            outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                             if not (r_start <= r < r_end and c_start <= c < c_end)]
            if len(outer_indices) > 0:
                chosen_indices = np.random.choice(len(outer_indices), 
                                                 min(remaining_points, len(outer_indices)), 
                                                 replace=False)
                for idx in chosen_indices:
                    r, c = outer_indices[idx]
                    mask[r, c] = True
        return mask

    def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
        if seed is not None:
            np.random.seed(seed)
        rows, cols = shape
        center_x, center_y = cols // 2, rows // 2
        x_coords = np.abs(np.arange(cols) - center_x)
        y_coords = np.abs(np.arange(rows) - center_y)
        dist_x, dist_y = np.meshgrid(x_coords, y_coords)
        norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
        norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
        pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
        pdf = np.clip(pdf, 0, 1)
        target_samples = int(np.prod(shape) / acceleration_factor)
        flat_pdf = pdf.flatten()
        sorted_indices = np.argsort(-flat_pdf)
        mask = np.zeros(shape, dtype=bool).flatten()
        mask[sorted_indices[:target_samples]] = True
        mask = mask.reshape(shape)
        center_rows_abs = int(shape[0] * center_fraction)
        center_cols_abs = int(shape[1] * center_fraction)
        r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
        c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
        mask[r_start:r_end, c_start:c_end] = True
        actual_accel = np.prod(shape) / np.sum(mask)
        print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
        return mask

    def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
        """
        Create an edge-enhanced mask as per the reference paper.
        Uses Sobel edge detection on the reference image to prioritize k-space samples.
        """
        if seed is not None:
            np.random.seed(seed)
        
        # Step 1: Edge detection on reference image
        edge_map = sobel(reference_image)
        edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))  # Avoid outliers
        if np.max(edge_map) > np.min(edge_map):
            edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
        
        # Step 2: Transform edge map to k-space
        k_space_edge = fftshift(fft2(edge_map))
        k_space_energy = np.abs(k_space_edge)
        k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
        if np.max(k_space_energy) > np.min(k_space_energy):
            k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                             (np.max(k_space_energy) - np.min(k_space_energy))
        
        # Step 3: Create PDF (combine edge energy with center-weighted component)
        rows, cols = shape
        center_x, center_y = cols // 2, rows // 2
        x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
        y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
        dist_x, dist_y = np.meshgrid(x_coords, y_coords)
        center_pdf = (1 - dist_x**2) * (1 - dist_y**2)  # Quadratic decay
        center_pdf = np.clip(center_pdf, 0, 1)
        
        # Combine edge and center PDFs (weighted sum)
        edge_weight = 0.7  # Paper suggests edge emphasis; adjust as needed
        pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
        pdf = np.clip(pdf, 0, 1)
        
        # Step 4: Sample according to PDF
        target_samples = int(np.prod(shape) / acceleration_factor)
        flat_pdf = pdf.flatten()
        sorted_indices = np.argsort(-flat_pdf)
        mask = np.zeros(shape, dtype=bool).flatten()
        mask[sorted_indices[:target_samples]] = True
        mask = mask.reshape(shape)
        
        # Step 5: Ensure center is fully sampled
        center_rows_abs = int(shape[0] * center_fraction)
        center_cols_abs = int(shape[1] * center_fraction)
        r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
        c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
        mask[r_start:r_end, c_start:c_end] = True
        
        actual_accel = np.prod(shape) / np.sum(mask)
        print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
        return mask

    # ISTA reconstruction function
    def soft_threshold(x, threshold):
        return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

    def wavelet_forward(image, wavelet='db4', level=3):
        coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
        arr, coeff_slices = pywt.coeffs_to_array(coeffs)
        return arr, coeff_slices

    def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
        coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
        return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

    def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                        ground_truth_for_psnr, wavelet='db4', level=3):
        x_recon = initial_image.copy().astype(np.complex128)
        k_space_undersampled = k_space_undersampled.astype(np.complex128)
        step_size = 1.0

        print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

        for i in range(n_iters):
            current_k_space = fftshift(fft2(x_recon))
            k_space_error = (current_k_space * mask) - k_space_undersampled
            grad_data_term = ifft2(ifftshift(k_space_error * mask))
            x_intermediate = x_recon - step_size * grad_data_term
            x_intermediate_real = np.real(x_intermediate)
            
            coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
            threshold = lambda_val * step_size
            coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
            approx_coeffs_size = coeffs_list_form[0].size
            coeffs_arr_thresh = coeffs_arr.copy()
            coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
            x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
            x_recon = x_reconstructed_real.astype(np.complex128)

            if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
                current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
                print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
        
        return np.clip(np.real(x_recon), 0, 1)

    # --- 7. TEST MASKS AT R=4 ---
    fixed_R = 4
    optimal_lambda = 0.0001
    optimal_iters = 10
    masks_to_test = [
        ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
        ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
        ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
        ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
    ]

    results = []
    for mask_name, mask_func in masks_to_test:
        print(f"\nTesting {mask_name} Mask (R={fixed_R})")
        start_time = time.time()
        
        mask = mask_func(k_space_full.shape, fixed_R)
        k_space_undersampled = k_space_full * mask
        zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
        psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
        ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
        
        ista_recon = ista_wavelet_cs(
            k_space_undersampled, mask, zf_recon.copy(),
            n_iters=optimal_iters, lambda_val=optimal_lambda,
            ground_truth_for_psnr=ground_truth_image
        )
        psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
        ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
        
        results.append({
            'name': mask_name,
            'mask': mask,
            'zf_recon': zf_recon,
            'ista_recon': ista_recon,
            'psnr_zf': psnr_zf,
            'ssim_zf': ssim_zf,
            'psnr_ista': psnr_ista,
            'ssim_ista': ssim_ista,
            'time': time.time() - start_time
        })
        print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
              f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")

    # --- 8. VISUALIZE RESULTS ---
    plt.figure(figsize=(18, 12))
    for i, res in enumerate(results):
        # Mask
        plt.subplot(4, 5, i*5 + 1)
        plt.imshow(fftshift(res['mask']), cmap='gray')
        plt.title(f"{res['name']} Mask\n(R={fixed_R})")
        plt.axis('off')

        # Zero-Filled
        plt.subplot(4, 5, i*5 + 2)
        plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
        plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
        plt.axis('off')
        
        # ISTA
        plt.subplot(4, 5, i*5 + 3)
        plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
        plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
        plt.axis('off')

        # Difference
        diff = np.abs(ground_truth_image - res['ista_recon'])
        plt.subplot(4, 5, i*5 + 4)
        plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
        plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
        plt.axis('off')

        # Ground Truth (only once, in first row)
        if i == 0:
            plt.subplot(4, 5, 5)
            plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
            plt.title("Ground Truth")
            plt.axis('off')

    plt.tight_layout()
    plt.show()

    # --- 9. SUMMARY TABLE ---
    print("\n--- Summary of Results (R=4) ---")
    print(f"{'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
    print("-" * 70)
    for res in results:
        print(f"{res['name']:<15} | {res['psnr_zf']:<10.2f} | {res['psnr_ista']:<10.2f} | "
              f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

    # --- 10. COMPARE TO PAPER ---
    print("\n--- Comparison to Reference Paper ---")
    print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
    print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
    best_result = max(results, key=lambda x: x['psnr_ista'])
    print(f"Your Best ({best_result['name']}, R=4, 25% data): "
          f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")

print("\n--- Experiments Complete ---")
Attempting to use base dataset path: /kaggle/input/oasis-1
Successfully located base dataset path: /kaggle/input/oasis-1
Contents of '/kaggle/input/oasis-1': ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Found 12 'oasis_cross-sectional_discX' folders: ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found 37 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found 34 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found 39 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10/OAS1_*_MR*'.

Processing Disc Parent Folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7/OAS1_*_MR*'.
very large origin values relative to dims; leaving as set, ignoring for affine
very large origin values relative to dims; leaving as set, ignoring for affine
--- SUMMARY ---
Found 434 potential ground truth images in total.
First few example paths found:
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0230_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0230_MR2_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0224_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0224_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0212_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0212_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0227_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0227_MR1_mpr_n4_anon_sbj_111.img

--- Loading a sample image ---
Loading: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3775.00

Selected 2D slice for CS (shape (256, 256), range [0.00, 1.00])

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.3584 dB
ISTA Iteration 2/10, Current PSNR: 26.6080 dB
ISTA Iteration 3/10, Current PSNR: 26.6988 dB
ISTA Iteration 4/10, Current PSNR: 26.7348 dB
ISTA Iteration 5/10, Current PSNR: 26.7504 dB
ISTA Iteration 6/10, Current PSNR: 26.7576 dB
ISTA Iteration 7/10, Current PSNR: 26.7611 dB
ISTA Iteration 8/10, Current PSNR: 26.7627 dB
ISTA Iteration 9/10, Current PSNR: 26.7636 dB
ISTA Iteration 10/10, Current PSNR: 26.7640 dB
Cartesian Mask: ZF PSNR=25.12, ISTA PSNR=26.76, ZF SSIM=0.6020, ISTA SSIM=0.7169, Time=0.13s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3668 dB
ISTA Iteration 2/10, Current PSNR: 25.7689 dB
ISTA Iteration 3/10, Current PSNR: 25.9207 dB
ISTA Iteration 4/10, Current PSNR: 25.9824 dB
ISTA Iteration 5/10, Current PSNR: 26.0094 dB
ISTA Iteration 6/10, Current PSNR: 26.0219 dB
ISTA Iteration 7/10, Current PSNR: 26.0280 dB
ISTA Iteration 8/10, Current PSNR: 26.0309 dB
ISTA Iteration 9/10, Current PSNR: 26.0324 dB
ISTA Iteration 10/10, Current PSNR: 26.0331 dB
Random 2D Mask: ZF PSNR=23.48, ISTA PSNR=26.03, ZF SSIM=0.3178, ISTA SSIM=0.5490, Time=0.20s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.8826 dB
ISTA Iteration 2/10, Current PSNR: 36.8827 dB
ISTA Iteration 3/10, Current PSNR: 36.8828 dB
ISTA Iteration 4/10, Current PSNR: 36.8828 dB
ISTA Iteration 5/10, Current PSNR: 36.8828 dB
ISTA Iteration 6/10, Current PSNR: 36.8828 dB
ISTA Iteration 7/10, Current PSNR: 36.8828 dB
ISTA Iteration 8/10, Current PSNR: 36.8828 dB
ISTA Iteration 9/10, Current PSNR: 36.8828 dB
ISTA Iteration 10/10, Current PSNR: 36.8828 dB
Variable Density Mask: ZF PSNR=36.78, ISTA PSNR=36.88, ZF SSIM=0.9630, ISTA SSIM=0.9763, Time=0.12s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1999 dB
ISTA Iteration 2/10, Current PSNR: 36.2000 dB
ISTA Iteration 3/10, Current PSNR: 36.2000 dB
ISTA Iteration 4/10, Current PSNR: 36.2000 dB
ISTA Iteration 5/10, Current PSNR: 36.2000 dB
ISTA Iteration 6/10, Current PSNR: 36.2000 dB
ISTA Iteration 7/10, Current PSNR: 36.2000 dB
ISTA Iteration 8/10, Current PSNR: 36.2000 dB
ISTA Iteration 9/10, Current PSNR: 36.2000 dB
ISTA Iteration 10/10, Current PSNR: 36.2000 dB
Edge-Enhanced Mask: ZF PSNR=34.30, ISTA PSNR=36.20, ZF SSIM=0.6986, ISTA SSIM=0.9035, Time=0.12s

--- Summary of Results (R=4) ---
Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------
Cartesian       | 25.12      | 26.76      | 0.6020     | 0.7169     | 0.13      
Random 2D       | 23.48      | 26.03      | 0.3178     | 0.5490     | 0.20      
Variable Density | 36.78      | 36.88      | 0.9630     | 0.9763     | 0.12      
Edge-Enhanced   | 34.30      | 36.20      | 0.6986     | 0.9035     | 0.12      

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data): PSNR=36.88 dB, SSIM=0.9763 (ISTA)

--- Experiments Complete ---

EXPERIMENT 3
CS_MRI_UCB_case1_Dicom
import os
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import pydicom
import glob
import re

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')
print(f"DICOM directory: {dicom_dir}")
print(f"K-space file: {kspace_cfl_path}")
print(f"Params file: {params_path}")

# --- 2. LOAD DICOM FILES ---
dicom_files = [os.path.join(dicom_dir, 'Sec_128.mag')]  # Focus on Sec_128.mag
print(f"Selected DICOM file: {dicom_files[0]}")
if not os.path.exists(dicom_files[0]):
    print(f"ERROR: {dicom_files[0]} not found")
    exit()

# --- 3. LOAD K-SPACE DATA ---
def read_params_dims(params_path):
    """
    Read matrix size, coils, and slices from params.txt.
    Returns (rows, cols, coils, slices) or None if not found.
    """
    if not os.path.exists(params_path):
        print(f"WARNING: params.txt not found at {params_path}")
        return None
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            print(f"Contents of params.txt:\n{lines}")
            rows, cols, coils, slices = None, None, 8, 256  # Assume 8 coils
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            if rows and cols:
                return rows, cols, coils, slices
        print("No matrix size found in params.txt")
        return None
    except Exception as e:
        print(f"ERROR reading params.txt: {e}")
        return None

def zero_pad_kspace(kspace, target_shape=(512, 512)):
    """
    Zero-pad k-space to target shape, centering the original data.
    """
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows = (target_rows - rows) // 2
    pad_cols = (target_cols - cols) // 2
    kspace_padded = np.zeros((target_rows, target_cols), dtype=kspace.dtype)
    kspace_padded[pad_rows:pad_rows+rows, pad_cols:pad_cols+cols] = kspace
    return kspace_padded

def read_cfl_data(cfl_path, dims):
    """
    Read k-space data from .cfl file using specified dimensions (rows, cols, coils, slices).
    Assumes interleaved real/imaginary parts.
    """
    if not os.path.exists(cfl_path):
        print(f"WARNING: CFL file not found at {cfl_path}")
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)  # 2 for real/imaginary
        if data.size != expected_size:
            raise ValueError(f"CFL file size mismatch for dimensions {dims}. Expected {expected_size} values, got {data.size}")
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"ERROR reading .cfl file: {e}")
        return None

# Get dimensions from params.txt or use defaults
params_dims = read_params_dims(params_path)
if params_dims is None:
    print(f"Using default k-space dimensions: 320x320, 8 coils, 256 slices")
    dims = (320, 320, 8, 256)
else:
    rows, cols, coils, slices = params_dims
    dims = (rows, cols, coils, slices)
    print(f"Using dimensions from params.txt: rows={rows}, cols={cols}, coils={coils}, slices={slices}")

# Load k-space data
kspace_data = read_cfl_data(kspace_cfl_path, dims)
use_dicom_kspace = False
if kspace_data is None:
    print(f"WARNING: Failed to load k-space data. Using DICOM-based k-space.")
    use_dicom_kspace = True

# --- 4. PROCESS DICOM FILE ---
all_results = []
for dicom_idx, dicom_path in enumerate(dicom_files):
    print(f"\nProcessing DICOM file ({dicom_idx+1}/{len(dicom_files)}): {dicom_path}")
    try:
        # Load DICOM
        dicom_data = pydicom.dcmread(dicom_path)
        ground_truth_image = dicom_data.pixel_array.astype(np.float32)
        if ground_truth_image.shape != (512, 512):
            print(f"ERROR: Unexpected shape {ground_truth_image.shape}")
            continue
        print(f"Loaded DICOM image with shape: {ground_truth_image.shape}, dtype: {ground_truth_image.dtype}")

        # Normalize ground truth image to [0, 1]
        if np.max(ground_truth_image) > np.min(ground_truth_image):
            ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                 (np.max(ground_truth_image) - np.min(ground_truth_image))
        else:
            ground_truth_image = np.zeros_like(ground_truth_image)
        print(f"Normalized ground truth image shape: {ground_truth_image.shape}, "
              f"range: [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}]")

        # Display ground truth image
        plt.figure(figsize=(8, 8))
        plt.imshow(ground_truth_image, cmap='gray')
        plt.title(f"Ground Truth Image (DICOM: {os.path.basename(dicom_path)})")
        plt.axis('off')
        plt.show()

        # Get k-space for slice 128
        slice_idx = 128  # Sec_128.mag
        if not use_dicom_kspace and kspace_data is not None:
            if slice_idx >= dims[3]:
                print(f"WARNING: Slice index {slice_idx} exceeds k-space slices {dims[3]}. Using DICOM-based k-space.")
                kspace_2d = fftshift(fft2(ground_truth_image))
                use_dicom_kspace = True
            else:
                # Combine coils using root-sum-of-squares
                kspace_slice = kspace_data[:, :, :, slice_idx]  # Shape: (320, 320, 8)
                image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))  # Shape: (320, 320, 8)
                image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))  # Shape: (320, 320)
                # Zero-pad to 512x512
                kspace_2d = zero_pad_kspace(fftshift(fft2(image_rss), axes=(0, 1)))
                print(f"Processed k-space for slice {slice_idx}, shape: {kspace_2d.shape}")
                # Validate against DICOM
                kspace_recon = np.abs(ifft2(ifftshift(kspace_2d)))
                if np.max(kspace_recon) > np.min(kspace_recon):
                    kspace_recon = (kspace_recon - np.min(kspace_recon)) / \
                                   (np.max(kspace_recon) - np.min(kspace_recon))
                psnr_kspace = psnr(ground_truth_image, kspace_recon, data_range=1.0)
                print(f"PSNR between DICOM and k-space reconstruction: {psnr_kspace:.2f} dB")
                if psnr_kspace < 20:
                    print(f"WARNING: Low PSNR. Falling back to DICOM-based k-space.")
                    kspace_2d = fftshift(fft2(ground_truth_image))
                    use_dicom_kspace = True
        else:
            print(f"Using DICOM-based k-space for slice {slice_idx}.")
            kspace_2d = fftshift(fft2(ground_truth_image))

        # --- 5. CS SIMULATION ---
        print("\n--- Starting CS Simulation ---")
        k_space_full = kspace_2d

        # Define mask creation functions
        def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
            num_cols = shape[1]
            num_low_freqs = int(round(num_cols * center_fraction))
            mask = np.zeros(shape, dtype=bool)
            pad = (num_cols - num_low_freqs + 1) // 2
            mask[:, pad:pad + num_low_freqs] = True
            num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
            outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
            permuted_outer_lines = np.random.permutation(outer_lines_indices)
            selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
            mask[:, selected_outer_lines] = True
            return mask

        def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            num_points = int(np.prod(shape) / acceleration_factor)
            mask = np.zeros(shape, dtype=bool)
            center_rows = int(shape[0] * center_fraction)
            center_cols = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
            c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
            mask[r_start:r_end, c_start:c_end] = True
            num_sampled_center = np.sum(mask)
            remaining_points = num_points - num_sampled_center
            if remaining_points > 0:
                outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                                 if not (r_start <= r < r_end and c_start <= c < c_end)]
                if len(outer_indices) > 0:
                    chosen_indices = np.random.choice(len(outer_indices), 
                                                     max(0, min(remaining_points, len(outer_indices))), 
                                                     replace=False)
                    for idx in chosen_indices:
                        r, c = outer_indices[idx]
                        mask[r, c] = True
            return mask

        def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
            if seed is not None:
                np.random.seed(seed)
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x)
            y_coords = np.abs(np.arange(rows) - center_y)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
            norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
            pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            edge_map = sobel(reference_image)
            edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
            if np.max(edge_map) > np.min(edge_map):
                edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
            k_space_edge = fftshift(fft2(edge_map))
            k_space_energy = np.abs(k_space_edge)
            k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
            if np.max(k_space_energy) > np.min(k_space_energy):
                k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                                 (np.max(k_space_energy) - np.min(k_space_energy))
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
            y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
            center_pdf = np.clip(center_pdf, 0, 1)
            edge_weight = 0.7
            pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        # ISTA reconstruction function
        def soft_threshold(x, threshold):
            return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

        def wavelet_forward(image, wavelet='db4', level=3):
            coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
            arr, coeff_slices = pywt.coeffs_to_array(coeffs)
            return arr, coeff_slices

        def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
            coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
            return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

        def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                            ground_truth_for_psnr, wavelet='db4', level=3):
            x_recon = initial_image.copy().astype(np.complex128)
            k_space_undersampled = k_space_undersampled.astype(np.complex128)
            step_size = 1.0

            print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

            for i in range(n_iters):
                current_k_space = fftshift(fft2(x_recon))
                k_space_error = (current_k_space * mask) - k_space_undersampled
                grad_data_term = ifft2(ifftshift(k_space_error * mask))
                x_intermediate = x_recon - step_size * grad_data_term
                x_intermediate_real = np.real(x_intermediate)
                
                coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
                threshold = lambda_val * step_size
                coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
                approx_coeffs_size = coeffs_list_form[0].size
                coeffs_arr_thresh = coeffs_arr.copy()
                coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
                x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
                x_recon = x_reconstructed_real.astype(np.complex128)

                if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
                    current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
                    print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
            
            return np.clip(np.real(x_recon), 0, 1)

        # Test masks at R=4
        fixed_R = 4
        optimal_lambda = 0.0001  # Revert to successful value
        optimal_iters = 10  # Revert to successful value
        masks_to_test = [
            ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
            ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
            ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
            ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
        ]

        results = []
        for mask_name, mask_func in masks_to_test:
            print(f"\nTesting {mask_name} Mask (R={fixed_R})")
            start_time = time.time()
            
            mask = mask_func(k_space_full.shape, fixed_R)
            k_space_undersampled = k_space_full * mask
            zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
            psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
            ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
            
            ista_recon = ista_wavelet_cs(
                k_space_undersampled, mask, zf_recon.copy(),
                n_iters=optimal_iters, lambda_val=optimal_lambda,
                ground_truth_for_psnr=ground_truth_image
            )
            psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
            ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
            
            results.append({
                'name': mask_name,
                'mask': mask,
                'zf_recon': zf_recon,
                'ista_recon': ista_recon,
                'psnr_zf': psnr_zf,
                'ssim_zf': ssim_zf,
                'psnr_ista': psnr_ista,
                'ssim_ista': ssim_ista,
                'time': time.time() - start_time,
                'dicom_file': os.path.basename(dicom_path)
            })
            print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
                  f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")

        all_results.append(results)

        # Visualize results
        plt.figure(figsize=(18, 12))
        for i, res in enumerate(results):
            plt.subplot(4, 5, i*5 + 1)
            plt.imshow(fftshift(res['mask']), cmap='gray')
            plt.title(f"{res['name']} Mask\n(R={res['fixed_R']})")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 2)
            plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ZF ({res['name']})n\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 3)
            plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
            plt.axis('off')
            diff = np.abs(ground['truth_image'] - res['ista_recon'])
            plt.subplot(4, 5, i*5 + 4)
            plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
            plt.title(f"ISTA Diff\nMean Err: {np.mean():.4f}")
            plt.axis('off')
            if i == 0:
                plt.subplot(1, 5, 5)
                plt.imshow(groundTruth_image, cmap='gray', vmin=0, vmax=1)
                plt.title("Ground Truth")
                plt.axis('off')
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"ERROR processing DICOM file '{dicom_path}': {e}")
        continue

# --- 6. SUMMARIZE ---
print("\n--- Summary of Results (R=4) ---")
print(f"{'DICOM File':<30} | {'Mask':<15} | {'ZF PSNR':<15} | {'ISTA PSNR':<15} | {'ZF SSIM':<15} | {'ISTA SSIM':<15} | {'Time (s)':<6}")
print("-" * 116)
for results in all_results:
    for res in results:
        print(f"{res['dicom_file']:<30} | {res['name']:<15} | {res['psnr_zf']:<15.3f} | {res['psnr_ista']:<15.3f} | "
              f"{res['ssim_zf']:<15.4f} | {res['ssim_ista']:.4f} | {res['time']:<6.2f}")

# --- 7. COMPARE TO PAPER ---
print("\n--- Comparison to Reference Paper ---")
print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
best_result = max([res for results in all_results for res in results], key=lambda x: x['psnr_ista'])
print(f"Your Best ({best_result['name']}, R=4, 25% data, {best_result['dicom_file']}): "
      f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")

print("\n--- Experiment Complete ---")
DICOM directory: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
K-space file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/kspace.cfl
Params file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/params.txt
Selected DICOM file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
Contents of params.txt:
['This is a short summary of the GE header file output\n', '...PSD name from inside PSD: 3DFSE\n', '...Magnet strength (in Gauss): 30000\n', '    The clinicalCoilName of the active coil: C-GE_HDx TR Knee PA\n', '...rhnframes yres: 320\n', '...rhfrsize xres: 320\n', '...rhnslices slices in a pass: 256\n', '...Display field of view - x (mm): 160\n', '...Display field of view - y (if different): 160\n', '...Variable bandwidth (kHz): 50\n', '...Pulse repetition time (usec): 1550000\n', '...Pulse echo time (usec): 25661\n', '...Echo train length for fast spin echo: 40\n', '...Slice thickness (mm): 0.6\n', '...Spacing between scans (mm): 0\n', '...Number of 3D slabs: 1\n']
Using dimensions from params.txt: rows=320, cols=320, coils=8, slices=256

Processing DICOM file (1/1): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Processed k-space for slice 128, shape: (512, 512)
PSNR between DICOM and k-space reconstruction: 15.67 dB
WARNING: Low PSNR. Falling back to DICOM-based k-space.

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.8534 dB
ISTA Iteration 2/10, Current PSNR: 32.0034 dB
ISTA Iteration 3/10, Current PSNR: 32.0439 dB
ISTA Iteration 4/10, Current PSNR: 32.0552 dB
ISTA Iteration 5/10, Current PSNR: 32.0586 dB
ISTA Iteration 6/10, Current PSNR: 32.0597 dB
ISTA Iteration 7/10, Current PSNR: 32.0602 dB
ISTA Iteration 8/10, Current PSNR: 32.0604 dB
ISTA Iteration 9/10, Current PSNR: 32.0604 dB
ISTA Iteration 10/10, Current PSNR: 32.0605 dB
Cartesian Mask: ZF PSNR=31.30, ISTA PSNR=32.06, ZF SSIM=0.8138, ISTA SSIM=0.8215, Time=0.63s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.8405 dB
ISTA Iteration 2/10, Current PSNR: 30.9858 dB
ISTA Iteration 3/10, Current PSNR: 31.0243 dB
ISTA Iteration 4/10, Current PSNR: 31.0348 dB
ISTA Iteration 5/10, Current PSNR: 31.0379 dB
ISTA Iteration 6/10, Current PSNR: 31.0388 dB
ISTA Iteration 7/10, Current PSNR: 31.0392 dB
ISTA Iteration 8/10, Current PSNR: 31.0393 dB
ISTA Iteration 9/10, Current PSNR: 31.0394 dB
ISTA Iteration 10/10, Current PSNR: 31.0394 dB
Random 2D Mask: ZF PSNR=30.30, ISTA PSNR=31.04, ZF SSIM=0.7690, ISTA SSIM=0.7679, Time=0.56s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 40.9285 dB
ISTA Iteration 2/10, Current PSNR: 40.9286 dB
ISTA Iteration 3/10, Current PSNR: 40.9286 dB
ISTA Iteration 4/10, Current PSNR: 40.9286 dB
ISTA Iteration 5/10, Current PSNR: 40.9286 dB
ISTA Iteration 6/10, Current PSNR: 40.9286 dB
ISTA Iteration 7/10, Current PSNR: 40.9286 dB
ISTA Iteration 8/10, Current PSNR: 40.9286 dB
ISTA Iteration 9/10, Current PSNR: 40.9286 dB
ISTA Iteration 10/10, Current PSNR: 40.9286 dB
Variable Density Mask: ZF PSNR=40.92, ISTA PSNR=40.93, ZF SSIM=0.9613, ISTA SSIM=0.9614, Time=0.56s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 39.0607 dB
ISTA Iteration 2/10, Current PSNR: 39.0607 dB
ISTA Iteration 3/10, Current PSNR: 39.0607 dB
ISTA Iteration 4/10, Current PSNR: 39.0607 dB
ISTA Iteration 5/10, Current PSNR: 39.0607 dB
ISTA Iteration 6/10, Current PSNR: 39.0607 dB
ISTA Iteration 7/10, Current PSNR: 39.0607 dB
ISTA Iteration 8/10, Current PSNR: 39.0607 dB
ISTA Iteration 9/10, Current PSNR: 39.0607 dB
ISTA Iteration 10/10, Current PSNR: 39.0607 dB
Edge-Enhanced Mask: ZF PSNR=39.04, ISTA PSNR=39.06, ZF SSIM=0.9348, ISTA SSIM=0.9350, Time=0.62s
ERROR processing DICOM file '/kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag': 'fixed_R'

--- Summary of Results (R=4) ---
DICOM File                     | Mask            | ZF PSNR         | ISTA PSNR       | ZF SSIM         | ISTA SSIM       | Time (s)
--------------------------------------------------------------------------------------------------------------------
Sec_128.mag                    | Cartesian       | 31.304          | 32.060          | 0.8138          | 0.8215 | 0.63  
Sec_128.mag                    | Random 2D       | 30.304          | 31.039          | 0.7690          | 0.7679 | 0.56  
Sec_128.mag                    | Variable Density | 40.916          | 40.929          | 0.9613          | 0.9614 | 0.56  
Sec_128.mag                    | Edge-Enhanced   | 39.038          | 39.061          | 0.9348          | 0.9350 | 0.62  

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data, Sec_128.mag): PSNR=40.93 dB, SSIM=0.9614 (ISTA)

--- Experiment Complete ---


EXPERIENT 4
CS_MRI_UCB_case1_hdr
import os
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import pydicom
import glob
import re

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')
print(f"DICOM directory: {dicom_dir}")
print(f"K-space file: {kspace_cfl_path}")
print(f"Params file: {params_path}")

# --- 2. LOAD DICOM FILES ---
dicom_files = sorted(glob.glob(os.path.join(dicom_dir, '*.mag')))  # Sort for consistent order
print(f"Found {len(dicom_files)} DICOM files (.mag) in {dicom_dir}")
if not dicom_files:
    print(f"ERROR: No .mag files found in {dicom_dir}")
    exit()

# --- 3. LOAD K-SPACE DATA (OPTIONAL, FOR VALIDATION) ---
def read_params_dims(params_path):
    """
    Try to read matrix size and other dimensions from params.txt.
    Returns (rows, cols, coils, slices) or None if not found.
    """
    if not os.path.exists(params_path):
        print(f"WARNING: params.txt not found at {params_path}")
        return None
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            print(f"Contents of params.txt:\n{lines}")
            rows, cols, coils, slices = None, None, 1, 1
            for line in lines:
                line = line.strip().lower()
                if 'matrix_size' in line or 'rows' in line or 'cols' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if len(nums) >= 2:
                        rows, cols = nums[:2]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
                if 'slices' in line or 'nz' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
            if rows and cols:
                return rows, cols, coils, slices
        print("No matrix size found in params.txt")
        return None
    except Exception as e:
        print(f"ERROR reading params.txt: {e}")
        return None

def read_cfl_data(cfl_path, dims):
    """
    Read k-space data from .cfl file using specified dimensions (rows, cols, coils, slices).
    Assumes interleaved real/imaginary parts.
    """
    if not os.path.exists(cfl_path):
        print(f"WARNING: CFL file not found at {cfl_path}")
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)  # 2 for real/imaginary
        if data.size < expected_size:
            raise ValueError(f"CFL file too small for dimensions {dims}. Expected {expected_size} values, got {data.size}")
        complex_data = data[::2] + 1j * data[1::2]
        expected_complex_size = np.prod(dims)
        if complex_data.size < expected_complex_size:
            raise ValueError(f"Not enough data in CFL file for dimensions {dims}. Expected {expected_complex_size} complex values, got {complex_data.size}")
        complex_data = complex_data[:expected_complex_size]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"ERROR reading .cfl file: {e}")
        return None

# Try to get dimensions from params.txt
params_dims = read_params_dims(params_path)
if params_dims is None:
    print(f"Using DICOM image shape (512, 512) with assumed single coil and slice")
    dims = (512, 512, 1, 1)  # rows, cols, coils, slices
else:
    rows, cols, coils, slices = params_dims
    dims = (rows, cols, coils, slices)
    print(f"Using dimensions from params.txt: rows={rows}, cols={cols}, coils={coils}, slices={slices}")

# --- 4. PROCESS DICOM FILES ---
max_dicom_files = 5  # Limit to 5 files for testing; set to len(dicom_files) for all
all_results = []
for dicom_idx, dicom_path in enumerate(dicom_files[:max_dicom_files]):
    print(f"\nProcessing DICOM file ({dicom_idx+1}/{min(max_dicom_files, len(dicom_files))}): {dicom_path}")
    try:
        # Load DICOM
        dicom_data = pydicom.dcmread(dicom_path)
        ground_truth_image = dicom_data.pixel_array.astype(np.float32)
        if ground_truth_image.shape != (512, 512):
            print(f"Skipping {dicom_path}: Unexpected shape {ground_truth_image.shape}")
            continue
        print(f"Loaded DICOM image with shape: {ground_truth_image.shape}, dtype: {ground_truth_image.dtype}")

        # Normalize ground truth image to [0, 1]
        if np.max(ground_truth_image) > np.min(ground_truth_image):
            ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                 (np.max(ground_truth_image) - np.min(ground_truth_image))
        else:
            ground_truth_image = np.zeros_like(ground_truth_image)
        print(f"Normalized ground truth image shape: {ground_truth_image.shape}, "
              f"range: [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}]")

        # Display ground truth image
        plt.figure(figsize=(8, 8))
        plt.imshow(ground_truth_image, cmap='gray')
        plt.title(f"Ground Truth Image (DICOM: {os.path.basename(dicom_path)})")
        plt.axis('off')
        plt.show()

        # Load k-space data to validate (optional)
        kspace_data = read_cfl_data(kspace_cfl_path, dims)
        if kspace_data is not None:
            print(f"Loaded k-space data with shape: {kspace_data.shape}, dtype: {kspace_data.dtype}")
            # Handle multi-coil or multi-slice data
            if kspace_data.ndim >= 3:
                coil_idx = 0  # Select first coil
                slice_idx = dicom_idx % dims[3] if dims[3] > 1 else 0  # Match DICOM slice if possible
                if kspace_data.ndim == 4:
                    kspace_2d = kspace_data[:, :, coil_idx, slice_idx]
                elif kspace_data.ndim == 3:
                    kspace_2d = kspace_data[:, :, slice_idx]
                print(f"Selected coil {coil_idx}, slice {slice_idx} from k-space")
            else:
                kspace_2d = kspace_data
            # Reconstruct and compare to DICOM
            kspace_recon = np.abs(ifft2(ifftshift(kspace_2d)))
            if kspace_recon.shape == ground_truth_image.shape:
                # Normalize kspace_recon for PSNR comparison
                if np.max(kspace_recon) > np.min(kspace_recon):
                    kspace_recon = (kspace_recon - np.min(kspace_recon)) / \
                                   (np.max(kspace_recon) - np.min(kspace_recon))
                psnr_kspace = psnr(ground_truth_image, kspace_recon, data_range=1.0)
                print(f"PSNR between DICOM and k-space reconstruction: {psnr_kspace:.2f} dB")
            else:
                print(f"WARNING: K-space reconstruction shape {kspace_recon.shape} does not match ground truth {ground_truth_image.shape}")
                kspace_2d = fftshift(fft2(ground_truth_image))
        else:
            print(f"WARNING: Failed to load k-space data. Proceeding with DICOM-based k-space.")
            kspace_2d = fftshift(fft2(ground_truth_image))

        # Ensure kspace_2d matches ground truth shape
        if kspace_2d.shape != ground_truth_image.shape:
            print(f"WARNING: K-space shape {kspace_2d.shape} does not match ground truth {ground_truth_image.shape}. Recomputing k-space.")
            kspace_2d = fftshift(fft2(ground_truth_image))

        # --- 5. CS SIMULATION ---
        print("\n--- Starting CS Simulation ---")
        k_space_full = fftshift(fft2(ground_truth_image))

        # Define mask creation functions
        def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
            num_cols = shape[1]
            num_low_freqs = int(round(num_cols * center_fraction))
            mask = np.zeros(shape, dtype=bool)
            pad = (num_cols - num_low_freqs + 1) // 2
            mask[:, pad:pad + num_low_freqs] = True
            num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
            outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
            permuted_outer_lines = np.random.permutation(outer_lines_indices)
            selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
            mask[:, selected_outer_lines] = True
            return mask

        def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            num_points = int(np.prod(shape) / acceleration_factor)
            mask = np.zeros(shape, dtype=bool)
            center_rows = int(shape[0] * center_fraction)
            center_cols = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
            c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
            mask[r_start:r_end, c_start:c_end] = True
            num_sampled_center = np.sum(mask)
            remaining_points = num_points - num_sampled_center
            if remaining_points > 0:
                outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                                 if not (r_start <= r < r_end and c_start <= c < c_end)]
                if len(outer_indices) > 0:
                    chosen_indices = np.random.choice(len(outer_indices), 
                                                     max(0, min(remaining_points, len(outer_indices))), 
                                                     replace=False)
                    for idx in chosen_indices:
                        r, c = outer_indices[idx]
                        mask[r, c] = True
            return mask

        def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
            if seed is not None:
                np.random.seed(seed)
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x)
            y_coords = np.abs(np.arange(rows) - center_y)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
            norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
            pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            edge_map = sobel(reference_image)
            edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
            if np.max(edge_map) > np.min(edge_map):
                edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
            k_space_edge = fftshift(fft2(edge_map))
            k_space_energy = np.abs(k_space_edge)
            k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
            if np.max(k_space_energy) > np.min(k_space_energy):
                k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                                 (np.max(k_space_energy) - np.min(k_space_energy))
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
            y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
            center_pdf = np.clip(center_pdf, 0, 1)
            edge_weight = 0.7
            pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        # ISTA reconstruction function
        def soft_threshold(x, threshold):
            return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

        def wavelet_forward(image, wavelet='db4', level=3):
            coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
            arr, coeff_slices = pywt.coeffs_to_array(coeffs)
            return arr, coeff_slices

        def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
            coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
            return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

        def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                            ground_truth_for_psnr, wavelet='db4', level=3):
            x_recon = initial_image.copy().astype(np.complex128)
            k_space_undersampled = k_space_undersampled.astype(np.complex128)
            step_size = 1.0

            print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

            for i in range(n_iters):
                current_k_space = fftshift(fft2(x_recon))
                k_space_error = (current_k_space * mask) - k_space_undersampled
                grad_data_term = ifft2(ifftshift(k_space_error * mask))
                x_intermediate = x_recon - step_size * grad_data_term
                x_intermediate_real = np.real(x_intermediate)
                
                coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
                threshold = lambda_val * step_size
                coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
                approx_coeffs_size = coeffs_list_form[0].size
                coeffs_arr_thresh = coeffs_arr.copy()
                coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
                x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
                x_recon = x_reconstructed_real.astype(np.complex128)

                if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
                    current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
                    print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
            
            return np.clip(np.real(x_recon), 0, 1)

        # Test masks at R=4
        fixed_R = 4
        optimal_lambda = 0.0001
        optimal_iters = 10
        masks_to_test = [
            ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
            ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
            ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
            ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
        ]

        results = []
        for mask_name, mask_func in masks_to_test:
            print(f"\nTesting {mask_name} Mask (R={fixed_R})")
            start_time = time.time()
            
            mask = mask_func(k_space_full.shape, fixed_R)
            k_space_undersampled = k_space_full * mask
            zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
            psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
            ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
            
            ista_recon = ista_wavelet_cs(
                k_space_undersampled, mask, zf_recon.copy(),
                n_iters=optimal_iters, lambda_val=optimal_lambda,
                ground_truth_for_psnr=ground_truth_image
            )
            psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
            ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
            
            results.append({
                'name': mask_name,
                'mask': mask,
                'zf_recon': zf_recon,
                'ista_recon': ista_recon,
                'psnr_zf': psnr_zf,
                'ssim_zf': ssim_zf,
                'psnr_ista': psnr_ista,
                'ssim_ista': ssim_ista,
                'time': time.time() - start_time,
                'dicom_file': os.path.basename(dicom_path)
            })
            print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
                  f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")

        all_results.append(results)

        # Visualize results
        plt.figure(figsize=(18, 12))
        for i, res in enumerate(results):
            plt.subplot(4, 5, i*5 + 1)
            plt.imshow(fftshift(res['mask']), cmap='gray')
            plt.title(f"{res['name']} Mask\n(R={fixed_R})")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 2)
            plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 3)
            plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
            plt.axis('off')
            diff = np.abs(ground_truth_image - res['ista_recon'])
            plt.subplot(4, 5, i*5 + 4)
            plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
            plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
            plt.axis('off')
            if i == 0:
                plt.subplot(4, 5, 5)
                plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
                plt.title("Ground Truth")
                plt.axis('off')
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"ERROR processing DICOM file '{dicom_path}': {e}")
        continue

# --- 6. SUMMARIZE RESULTS ---
print("\n--- Summary of Results Across DICOM Files (R=4) ---")
print(f"{'DICOM File':<30} | {'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
print("-" * 100)
for results in all_results:
    for res in results:
        print(f"{res['dicom_file']:<30} | {res['name']:<15} | {res['psnr_zf']:<10.2f} | {res['psnr_ista']:<10.2f} | "
              f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

# --- 7. COMPARE TO PAPER ---
print("\n--- Comparison to Reference Paper ---")
print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
best_result = max([res for results in all_results for res in results], key=lambda x: x['psnr_ista'])
print(f"Your Best ({best_result['name']}, R=4, 25% data, {best_result['dicom_file']}): "
      f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")

print("\n--- Experiments Complete ---")
DICOM directory: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
K-space file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/kspace.cfl
Params file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/params.txt
Found 252 DICOM files (.mag) in /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
Contents of params.txt:
['This is a short summary of the GE header file output\n', '...PSD name from inside PSD: 3DFSE\n', '...Magnet strength (in Gauss): 30000\n', '    The clinicalCoilName of the active coil: C-GE_HDx TR Knee PA\n', '...rhnframes yres: 320\n', '...rhfrsize xres: 320\n', '...rhnslices slices in a pass: 256\n', '...Display field of view - x (mm): 160\n', '...Display field of view - y (if different): 160\n', '...Variable bandwidth (kHz): 50\n', '...Pulse repetition time (usec): 1550000\n', '...Pulse echo time (usec): 25661\n', '...Echo train length for fast spin echo: 40\n', '...Slice thickness (mm): 0.6\n', '...Spacing between scans (mm): 0\n', '...Number of 3D slabs: 1\n']
No matrix size found in params.txt
Using DICOM image shape (512, 512) with assumed single coil and slice

Processing DICOM file (1/5): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_000.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Loaded k-space data with shape: (512, 512, 1, 1), dtype: complex64
Selected coil 0, slice 0 from k-space
PSNR between DICOM and k-space reconstruction: 10.58 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.5691 dB
ISTA Iteration 2/10, Current PSNR: 24.7410 dB
ISTA Iteration 3/10, Current PSNR: 24.7911 dB
ISTA Iteration 4/10, Current PSNR: 24.8067 dB
ISTA Iteration 5/10, Current PSNR: 24.8122 dB
ISTA Iteration 6/10, Current PSNR: 24.8143 dB
ISTA Iteration 7/10, Current PSNR: 24.8152 dB
ISTA Iteration 8/10, Current PSNR: 24.8156 dB
ISTA Iteration 9/10, Current PSNR: 24.8158 dB
ISTA Iteration 10/10, Current PSNR: 24.8159 dB
Cartesian Mask: ZF PSNR=23.79, ISTA PSNR=24.82, ZF SSIM=0.5311, ISTA SSIM=0.6727, Time=0.61s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.8535 dB
ISTA Iteration 2/10, Current PSNR: 24.0409 dB
ISTA Iteration 3/10, Current PSNR: 24.0968 dB
ISTA Iteration 4/10, Current PSNR: 24.1148 dB
ISTA Iteration 5/10, Current PSNR: 24.1213 dB
ISTA Iteration 6/10, Current PSNR: 24.1239 dB
ISTA Iteration 7/10, Current PSNR: 24.1250 dB
ISTA Iteration 8/10, Current PSNR: 24.1256 dB
ISTA Iteration 9/10, Current PSNR: 24.1258 dB
ISTA Iteration 10/10, Current PSNR: 24.1260 dB
Random 2D Mask: ZF PSNR=23.02, ISTA PSNR=24.13, ZF SSIM=0.4445, ISTA SSIM=0.6170, Time=0.70s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.7171 dB
ISTA Iteration 2/10, Current PSNR: 25.7171 dB
ISTA Iteration 3/10, Current PSNR: 25.7171 dB
ISTA Iteration 4/10, Current PSNR: 25.7171 dB
ISTA Iteration 5/10, Current PSNR: 25.7171 dB
ISTA Iteration 6/10, Current PSNR: 25.7171 dB
ISTA Iteration 7/10, Current PSNR: 25.7171 dB
ISTA Iteration 8/10, Current PSNR: 25.7171 dB
ISTA Iteration 9/10, Current PSNR: 25.7171 dB
ISTA Iteration 10/10, Current PSNR: 25.7171 dB
Variable Density Mask: ZF PSNR=25.66, ISTA PSNR=25.72, ZF SSIM=0.7423, ISTA SSIM=0.7616, Time=0.58s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3476 dB
ISTA Iteration 2/10, Current PSNR: 25.3478 dB
ISTA Iteration 3/10, Current PSNR: 25.3478 dB
ISTA Iteration 4/10, Current PSNR: 25.3478 dB
ISTA Iteration 5/10, Current PSNR: 25.3478 dB
ISTA Iteration 6/10, Current PSNR: 25.3478 dB
ISTA Iteration 7/10, Current PSNR: 25.3478 dB
ISTA Iteration 8/10, Current PSNR: 25.3478 dB
ISTA Iteration 9/10, Current PSNR: 25.3478 dB
ISTA Iteration 10/10, Current PSNR: 25.3478 dB
Edge-Enhanced Mask: ZF PSNR=25.07, ISTA PSNR=25.35, ZF SSIM=0.6234, ISTA SSIM=0.6832, Time=0.60s


Processing DICOM file (2/5): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_001.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Loaded k-space data with shape: (512, 512, 1, 1), dtype: complex64
Selected coil 0, slice 0 from k-space
PSNR between DICOM and k-space reconstruction: 10.58 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.0395 dB
ISTA Iteration 2/10, Current PSNR: 24.1804 dB
ISTA Iteration 3/10, Current PSNR: 24.2166 dB
ISTA Iteration 4/10, Current PSNR: 24.2258 dB
ISTA Iteration 5/10, Current PSNR: 24.2282 dB
ISTA Iteration 6/10, Current PSNR: 24.2288 dB
ISTA Iteration 7/10, Current PSNR: 24.2290 dB
ISTA Iteration 8/10, Current PSNR: 24.2290 dB
ISTA Iteration 9/10, Current PSNR: 24.2291 dB
ISTA Iteration 10/10, Current PSNR: 24.2291 dB
Cartesian Mask: ZF PSNR=23.50, ISTA PSNR=24.23, ZF SSIM=0.5868, ISTA SSIM=0.6932, Time=0.54s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.3195 dB
ISTA Iteration 2/10, Current PSNR: 23.4629 dB
ISTA Iteration 3/10, Current PSNR: 23.5004 dB
ISTA Iteration 4/10, Current PSNR: 23.5102 dB
ISTA Iteration 5/10, Current PSNR: 23.5129 dB
ISTA Iteration 6/10, Current PSNR: 23.5137 dB
ISTA Iteration 7/10, Current PSNR: 23.5140 dB
ISTA Iteration 8/10, Current PSNR: 23.5141 dB
ISTA Iteration 9/10, Current PSNR: 23.5141 dB
ISTA Iteration 10/10, Current PSNR: 23.5141 dB
Random 2D Mask: ZF PSNR=22.78, ISTA PSNR=23.51, ZF SSIM=0.4910, ISTA SSIM=0.6279, Time=0.68s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3615 dB
ISTA Iteration 2/10, Current PSNR: 25.3615 dB
ISTA Iteration 3/10, Current PSNR: 25.3615 dB
ISTA Iteration 4/10, Current PSNR: 25.3615 dB
ISTA Iteration 5/10, Current PSNR: 25.3615 dB
ISTA Iteration 6/10, Current PSNR: 25.3615 dB
ISTA Iteration 7/10, Current PSNR: 25.3615 dB
ISTA Iteration 8/10, Current PSNR: 25.3615 dB
ISTA Iteration 9/10, Current PSNR: 25.3615 dB
ISTA Iteration 10/10, Current PSNR: 25.3615 dB
Variable Density Mask: ZF PSNR=25.32, ISTA PSNR=25.36, ZF SSIM=0.7322, ISTA SSIM=0.7341, Time=0.60s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.7562 dB
ISTA Iteration 2/10, Current PSNR: 24.7563 dB
ISTA Iteration 3/10, Current PSNR: 24.7563 dB
ISTA Iteration 4/10, Current PSNR: 24.7563 dB
ISTA Iteration 5/10, Current PSNR: 24.7563 dB
ISTA Iteration 6/10, Current PSNR: 24.7563 dB
ISTA Iteration 7/10, Current PSNR: 24.7563 dB
ISTA Iteration 8/10, Current PSNR: 24.7563 dB
ISTA Iteration 9/10, Current PSNR: 24.7563 dB
ISTA Iteration 10/10, Current PSNR: 24.7563 dB
Edge-Enhanced Mask: ZF PSNR=24.70, ISTA PSNR=24.76, ZF SSIM=0.6788, ISTA SSIM=0.6831, Time=0.63s


Processing DICOM file (3/5): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_002.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Loaded k-space data with shape: (512, 512, 1, 1), dtype: complex64
Selected coil 0, slice 0 from k-space
PSNR between DICOM and k-space reconstruction: 9.79 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.3413 dB
ISTA Iteration 2/10, Current PSNR: 23.4801 dB
ISTA Iteration 3/10, Current PSNR: 23.5155 dB
ISTA Iteration 4/10, Current PSNR: 23.5244 dB
ISTA Iteration 5/10, Current PSNR: 23.5267 dB
ISTA Iteration 6/10, Current PSNR: 23.5272 dB
ISTA Iteration 7/10, Current PSNR: 23.5274 dB
ISTA Iteration 8/10, Current PSNR: 23.5274 dB
ISTA Iteration 9/10, Current PSNR: 23.5274 dB
ISTA Iteration 10/10, Current PSNR: 23.5274 dB
Cartesian Mask: ZF PSNR=22.83, ISTA PSNR=23.53, ZF SSIM=0.5801, ISTA SSIM=0.6875, Time=0.55s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 22.6396 dB
ISTA Iteration 2/10, Current PSNR: 22.7809 dB
ISTA Iteration 3/10, Current PSNR: 22.8175 dB
ISTA Iteration 4/10, Current PSNR: 22.8271 dB
ISTA Iteration 5/10, Current PSNR: 22.8296 dB
ISTA Iteration 6/10, Current PSNR: 22.8303 dB
ISTA Iteration 7/10, Current PSNR: 22.8305 dB
ISTA Iteration 8/10, Current PSNR: 22.8306 dB
ISTA Iteration 9/10, Current PSNR: 22.8306 dB
ISTA Iteration 10/10, Current PSNR: 22.8306 dB
Random 2D Mask: ZF PSNR=22.12, ISTA PSNR=22.83, ZF SSIM=0.4846, ISTA SSIM=0.6223, Time=0.66s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.7689 dB
ISTA Iteration 2/10, Current PSNR: 24.7690 dB
ISTA Iteration 3/10, Current PSNR: 24.7690 dB
ISTA Iteration 4/10, Current PSNR: 24.7690 dB
ISTA Iteration 5/10, Current PSNR: 24.7690 dB
ISTA Iteration 6/10, Current PSNR: 24.7690 dB
ISTA Iteration 7/10, Current PSNR: 24.7690 dB
ISTA Iteration 8/10, Current PSNR: 24.7690 dB
ISTA Iteration 9/10, Current PSNR: 24.7690 dB
ISTA Iteration 10/10, Current PSNR: 24.7690 dB
Variable Density Mask: ZF PSNR=24.72, ISTA PSNR=24.77, ZF SSIM=0.7320, ISTA SSIM=0.7326, Time=0.57s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.1487 dB
ISTA Iteration 2/10, Current PSNR: 24.1487 dB
ISTA Iteration 3/10, Current PSNR: 24.1487 dB
ISTA Iteration 4/10, Current PSNR: 24.1487 dB
ISTA Iteration 5/10, Current PSNR: 24.1487 dB
ISTA Iteration 6/10, Current PSNR: 24.1487 dB
ISTA Iteration 7/10, Current PSNR: 24.1487 dB
ISTA Iteration 8/10, Current PSNR: 24.1487 dB
ISTA Iteration 9/10, Current PSNR: 24.1487 dB
ISTA Iteration 10/10, Current PSNR: 24.1487 dB
Edge-Enhanced Mask: ZF PSNR=24.09, ISTA PSNR=24.15, ZF SSIM=0.6767, ISTA SSIM=0.6793, Time=0.56s


Processing DICOM file (4/5): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_003.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Loaded k-space data with shape: (512, 512, 1, 1), dtype: complex64
Selected coil 0, slice 0 from k-space
PSNR between DICOM and k-space reconstruction: 10.55 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.8606 dB
ISTA Iteration 2/10, Current PSNR: 23.9984 dB
ISTA Iteration 3/10, Current PSNR: 24.0336 dB
ISTA Iteration 4/10, Current PSNR: 24.0424 dB
ISTA Iteration 5/10, Current PSNR: 24.0446 dB
ISTA Iteration 6/10, Current PSNR: 24.0452 dB
ISTA Iteration 7/10, Current PSNR: 24.0453 dB
ISTA Iteration 8/10, Current PSNR: 24.0453 dB
ISTA Iteration 9/10, Current PSNR: 24.0454 dB
ISTA Iteration 10/10, Current PSNR: 24.0454 dB
Cartesian Mask: ZF PSNR=23.35, ISTA PSNR=24.05, ZF SSIM=0.5849, ISTA SSIM=0.6906, Time=0.58s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.1699 dB
ISTA Iteration 2/10, Current PSNR: 23.3104 dB
ISTA Iteration 3/10, Current PSNR: 23.3467 dB
ISTA Iteration 4/10, Current PSNR: 23.3561 dB
ISTA Iteration 5/10, Current PSNR: 23.3586 dB
ISTA Iteration 6/10, Current PSNR: 23.3593 dB
ISTA Iteration 7/10, Current PSNR: 23.3595 dB
ISTA Iteration 8/10, Current PSNR: 23.3596 dB
ISTA Iteration 9/10, Current PSNR: 23.3596 dB
ISTA Iteration 10/10, Current PSNR: 23.3596 dB
Random 2D Mask: ZF PSNR=22.65, ISTA PSNR=23.36, ZF SSIM=0.4921, ISTA SSIM=0.6275, Time=0.68s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.2552 dB
ISTA Iteration 2/10, Current PSNR: 25.2552 dB
ISTA Iteration 3/10, Current PSNR: 25.2552 dB
ISTA Iteration 4/10, Current PSNR: 25.2552 dB
ISTA Iteration 5/10, Current PSNR: 25.2552 dB
ISTA Iteration 6/10, Current PSNR: 25.2552 dB
ISTA Iteration 7/10, Current PSNR: 25.2552 dB
ISTA Iteration 8/10, Current PSNR: 25.2552 dB
ISTA Iteration 9/10, Current PSNR: 25.2552 dB
ISTA Iteration 10/10, Current PSNR: 25.2552 dB
Variable Density Mask: ZF PSNR=25.21, ISTA PSNR=25.26, ZF SSIM=0.7327, ISTA SSIM=0.7332, Time=0.61s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6098 dB
ISTA Iteration 2/10, Current PSNR: 24.6098 dB
ISTA Iteration 3/10, Current PSNR: 24.6098 dB
ISTA Iteration 4/10, Current PSNR: 24.6098 dB
ISTA Iteration 5/10, Current PSNR: 24.6098 dB
ISTA Iteration 6/10, Current PSNR: 24.6098 dB
ISTA Iteration 7/10, Current PSNR: 24.6098 dB
ISTA Iteration 8/10, Current PSNR: 24.6098 dB
ISTA Iteration 9/10, Current PSNR: 24.6098 dB
ISTA Iteration 10/10, Current PSNR: 24.6098 dB
Edge-Enhanced Mask: ZF PSNR=24.57, ISTA PSNR=24.61, ZF SSIM=0.6787, ISTA SSIM=0.6810, Time=0.65s


Processing DICOM file (5/5): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_004.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Loaded k-space data with shape: (512, 512, 1, 1), dtype: complex64
Selected coil 0, slice 0 from k-space
PSNR between DICOM and k-space reconstruction: 10.26 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 23.6468 dB
ISTA Iteration 2/10, Current PSNR: 23.7847 dB
ISTA Iteration 3/10, Current PSNR: 23.8199 dB
ISTA Iteration 4/10, Current PSNR: 23.8287 dB
ISTA Iteration 5/10, Current PSNR: 23.8309 dB
ISTA Iteration 6/10, Current PSNR: 23.8315 dB
ISTA Iteration 7/10, Current PSNR: 23.8316 dB
ISTA Iteration 8/10, Current PSNR: 23.8317 dB
ISTA Iteration 9/10, Current PSNR: 23.8317 dB
ISTA Iteration 10/10, Current PSNR: 23.8317 dB
Cartesian Mask: ZF PSNR=23.13, ISTA PSNR=23.83, ZF SSIM=0.5814, ISTA SSIM=0.6875, Time=0.54s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 22.9546 dB
ISTA Iteration 2/10, Current PSNR: 23.0956 dB
ISTA Iteration 3/10, Current PSNR: 23.1321 dB
ISTA Iteration 4/10, Current PSNR: 23.1415 dB
ISTA Iteration 5/10, Current PSNR: 23.1440 dB
ISTA Iteration 6/10, Current PSNR: 23.1447 dB
ISTA Iteration 7/10, Current PSNR: 23.1449 dB
ISTA Iteration 8/10, Current PSNR: 23.1450 dB
ISTA Iteration 9/10, Current PSNR: 23.1450 dB
ISTA Iteration 10/10, Current PSNR: 23.1451 dB
Random 2D Mask: ZF PSNR=22.43, ISTA PSNR=23.15, ZF SSIM=0.4896, ISTA SSIM=0.6260, Time=0.62s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0533 dB
ISTA Iteration 2/10, Current PSNR: 25.0533 dB
ISTA Iteration 3/10, Current PSNR: 25.0533 dB
ISTA Iteration 4/10, Current PSNR: 25.0533 dB
ISTA Iteration 5/10, Current PSNR: 25.0533 dB
ISTA Iteration 6/10, Current PSNR: 25.0533 dB
ISTA Iteration 7/10, Current PSNR: 25.0533 dB
ISTA Iteration 8/10, Current PSNR: 25.0533 dB
ISTA Iteration 9/10, Current PSNR: 25.0533 dB
ISTA Iteration 10/10, Current PSNR: 25.0533 dB
Variable Density Mask: ZF PSNR=25.00, ISTA PSNR=25.05, ZF SSIM=0.7325, ISTA SSIM=0.7330, Time=0.55s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.3996 dB
ISTA Iteration 2/10, Current PSNR: 24.3996 dB
ISTA Iteration 3/10, Current PSNR: 24.3996 dB
ISTA Iteration 4/10, Current PSNR: 24.3996 dB
ISTA Iteration 5/10, Current PSNR: 24.3996 dB
ISTA Iteration 6/10, Current PSNR: 24.3996 dB
ISTA Iteration 7/10, Current PSNR: 24.3996 dB
ISTA Iteration 8/10, Current PSNR: 24.3996 dB
ISTA Iteration 9/10, Current PSNR: 24.3996 dB
ISTA Iteration 10/10, Current PSNR: 24.3996 dB
Edge-Enhanced Mask: ZF PSNR=24.35, ISTA PSNR=24.40, ZF SSIM=0.6780, ISTA SSIM=0.6805, Time=0.58s


--- Summary of Results Across DICOM Files (R=4) ---
DICOM File                     | Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------------------------------------
Sec_000.mag                    | Cartesian       | 23.79      | 24.82      | 0.5311     | 0.6727     | 0.61      
Sec_000.mag                    | Random 2D       | 23.02      | 24.13      | 0.4445     | 0.6170     | 0.70      
Sec_000.mag                    | Variable Density | 25.66      | 25.72      | 0.7423     | 0.7616     | 0.58      
Sec_000.mag                    | Edge-Enhanced   | 25.07      | 25.35      | 0.6234     | 0.6832     | 0.60      
Sec_001.mag                    | Cartesian       | 23.50      | 24.23      | 0.5868     | 0.6932     | 0.54      
Sec_001.mag                    | Random 2D       | 22.78      | 23.51      | 0.4910     | 0.6279     | 0.68      
Sec_001.mag                    | Variable Density | 25.32      | 25.36      | 0.7322     | 0.7341     | 0.60      
Sec_001.mag                    | Edge-Enhanced   | 24.70      | 24.76      | 0.6788     | 0.6831     | 0.63      
Sec_002.mag                    | Cartesian       | 22.83      | 23.53      | 0.5801     | 0.6875     | 0.55      
Sec_002.mag                    | Random 2D       | 22.12      | 22.83      | 0.4846     | 0.6223     | 0.66      
Sec_002.mag                    | Variable Density | 24.72      | 24.77      | 0.7320     | 0.7326     | 0.57      
Sec_002.mag                    | Edge-Enhanced   | 24.09      | 24.15      | 0.6767     | 0.6793     | 0.56      
Sec_003.mag                    | Cartesian       | 23.35      | 24.05      | 0.5849     | 0.6906     | 0.58      
Sec_003.mag                    | Random 2D       | 22.65      | 23.36      | 0.4921     | 0.6275     | 0.68      
Sec_003.mag                    | Variable Density | 25.21      | 25.26      | 0.7327     | 0.7332     | 0.61      
Sec_003.mag                    | Edge-Enhanced   | 24.57      | 24.61      | 0.6787     | 0.6810     | 0.65      
Sec_004.mag                    | Cartesian       | 23.13      | 23.83      | 0.5814     | 0.6875     | 0.54      
Sec_004.mag                    | Random 2D       | 22.43      | 23.15      | 0.4896     | 0.6260     | 0.62      
Sec_004.mag                    | Variable Density | 25.00      | 25.05      | 0.7325     | 0.7330     | 0.55      
Sec_004.mag                    | Edge-Enhanced   | 24.35      | 24.40      | 0.6780     | 0.6805     | 0.58      

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data, Sec_000.mag): PSNR=25.72 dB, SSIM=0.7616 (ISTA)

--- Experiments Complete ---

EXPERIMENT 5
CS_MRI_UCB_case1_DICOM128
import os
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import pydicom
import glob

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')
print(f"DICOM directory: {dicom_dir}")
print(f"K-space file: {kspace_cfl_path}")
print(f"Params file: {params_path}")

# --- 2. LOAD DICOM FILES ---
dicom_files = glob.glob(os.path.join(dicom_dir, '*.mag'))
print(f"Found {len(dicom_files)} DICOM files (.mag) in {dicom_dir}")
if not dicom_files:
    print(f"ERROR: No .mag files found in {dicom_dir}")
    exit()

# For now, process the first DICOM file (e.g., Sec_000.mag)
dicom_path = dicom_files[0]
print(f"Processing DICOM file: {dicom_path}")
try:
    dicom_data = pydicom.dcmread(dicom_path)
    ground_truth_image = dicom_data.pixel_array.astype(np.float32)
    print(f"Loaded DICOM image with shape: {ground_truth_image.shape}, dtype: {ground_truth_image.dtype}")
except Exception as e:
    print(f"ERROR loading DICOM file '{dicom_path}': {e}")
    import traceback
    traceback.print_exc()
    exit()

# Normalize ground truth image to [0, 1]
if np.max(ground_truth_image) > np.min(ground_truth_image):
    ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                         (np.max(ground_truth_image) - np.min(ground_truth_image))
else:
    ground_truth_image = np.zeros_like(ground_truth_image)
print(f"Normalized ground truth image shape: {ground_truth_image.shape}, "
      f"range: [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}]")

# Display ground truth image
plt.figure(figsize=(8, 8))
plt.imshow(ground_truth_image, cmap='gray')
plt.title(f"Ground Truth Image (DICOM: {os.path.basename(dicom_path)})")
plt.axis('off')
plt.show()

# --- 3. LOAD K-SPACE DATA (OPTIONAL, FOR VALIDATION) ---
def read_params_dims(params_path):
    """
    Try to read matrix size from params.txt.
    Returns (rows, cols) or None if not found.
    """
    if not os.path.exists(params_path):
        print(f"WARNING: params.txt not found at {params_path}")
        return None
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            print(f"Contents of params.txt:\n{lines}")
            for line in lines:
                if 'matrix_size' in line.lower() or 'rows' in line.lower() or 'cols' in line.lower():
                    parts = line.split()
                    nums = [int(x) for x in parts if x.isdigit()]
                    if len(nums) >= 2:
                        return nums[0], nums[1]
        print("No matrix size found in params.txt")
        return None
    except Exception as e:
        print(f"ERROR reading params.txt: {e}")
        return None

def read_cfl_data(cfl_path, dims):
    """
    Read k-space data from .cfl file using specified dimensions.
    Assumes interleaved real/imaginary parts.
    """
    if not os.path.exists(cfl_path):
        print(f"WARNING: CFL file not found at {cfl_path}")
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)
        if data.size < expected_size:
            raise ValueError(f"CFL file too small for dimensions {dims}. Expected {expected_size} values, got {data.size}")
        complex_data = data[::2] + 1j * data[1::2]
        expected_complex_size = np.prod(dims)
        if complex_data.size < expected_complex_size:
            raise ValueError(f"Not enough data in CFL file for dimensions {dims}. Expected {expected_complex_size} complex values, got {complex_data.size}")
        complex_data = complex_data[:expected_complex_size]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"ERROR reading .cfl file: {e}")
        return None

# Try to get dimensions from params.txt or use DICOM image shape
dims = read_params_dims(params_path)
if dims is None:
    dims = ground_truth_image.shape
    print(f"Using DICOM image shape as k-space dimensions: {dims}")
else:
    print(f"Using dimensions from params.txt: {dims}")

# Load k-space data to validate (optional)
kspace_data = read_cfl_data(kspace_cfl_path, dims)
if kspace_data is not None:
    print(f"Loaded k-space data with shape: {kspace_data.shape}, dtype: {kspace_data.dtype}")
    if kspace_data.ndim >= 3:
        print(f"K-space is {kspace_data.ndim}D, selecting middle slice along last dimension.")
        slice_idx = kspace_data.shape[-1] // 2
        kspace_2d = kspace_data[..., slice_idx]
    else:
        kspace_2d = kspace_data
    kspace_recon = np.abs(ifft2(ifftshift(kspace_2d)))
    if kspace_recon.shape == ground_truth_image.shape:
        psnr_kspace = psnr(ground_truth_image, kspace_recon, data_range=1.0)
        print(f"PSNR between DICOM and k-space reconstruction: {psnr_kspace:.2f} dB")
    else:
        print(f"WARNING: K-space reconstruction shape {kspace_recon.shape} does not match ground truth {ground_truth_image.shape}")
        kspace_2d = fftshift(fft2(ground_truth_image))
else:
    print(f"WARNING: Failed to load k-space data. Proceeding with DICOM-based k-space.")
    kspace_2d = fftshift(fft2(ground_truth_image))

# Ensure kspace_2d matches ground truth shape
if kspace_2d.shape != ground_truth_image.shape:
    print(f"WARNING: K-space shape {kspace_2d.shape} does not match ground truth {ground_truth_image.shape}. Recomputing k-space.")
    kspace_2d = fftshift(fft2(ground_truth_image))

# --- 4. CS SIMULATION ---
print("\n--- Starting CS Simulation ---")

# Use k-space from ground truth image
k_space_full = fftshift(fft2(ground_truth_image))

# Define mask creation functions
def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
    num_cols = shape[1]
    num_low_freqs = int(round(num_cols * center_fraction))
    mask = np.zeros(shape, dtype=bool)
    pad = (num_cols - num_low_freqs + 1) // 2
    mask[:, pad:pad + num_low_freqs] = True
    num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
    outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
    permuted_outer_lines = np.random.permutation(outer_lines_indices)
    selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
    mask[:, selected_outer_lines] = True
    return mask

def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    num_points = int(np.prod(shape) / acceleration_factor)
    mask = np.zeros(shape, dtype=bool)
    center_rows = int(shape[0] * center_fraction)
    center_cols = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
    c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
    mask[r_start:r_end, c_start:c_end] = True
    num_sampled_center = np.sum(mask)
    remaining_points = num_points - num_sampled_center
    if remaining_points > 0:
        outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                         if not (r_start <= r < r_end and c_start <= c < c_end)]
        if len(outer_indices) > 0:
            chosen_indices = np.random.choice(len(outer_indices), 
                                             max(0, min(remaining_points, len(outer_indices))), 
                                             replace=False)
            for idx in chosen_indices:
                r, c = outer_indices[idx]
                mask[r, c] = True
    return mask

def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
    if seed is not None:
        np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    
    edge_map = sobel(reference_image)
    edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
    if np.max(edge_map) > np.min(edge_map):
        edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
    
    k_space_edge = fftshift(fft2(edge_map))
    k_space_energy = np.abs(k_space_edge)
    k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
    if np.max(k_space_energy) > np.min(k_space_energy):
        k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                         (np.max(k_space_energy) - np.min(k_space_energy))
    
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
    y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
    center_pdf = np.clip(center_pdf, 0, 1)
    
    edge_weight = 0.7
    pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
    pdf = np.clip(pdf, 0, 1)
    
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# ISTA reconstruction function
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0

    print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)

        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
    
    return np.clip(np.real(x_recon), 0, 1)

# --- 5. TEST MASKS AT R=4 ---
fixed_R = 4
optimal_lambda = 0.0001
optimal_iters = 10
masks_to_test = [
    ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
    ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
    ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
    ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
]

results = []
for mask_name, mask_func in masks_to_test:
    print(f"\nTesting {mask_name} Mask (R={fixed_R})")
    start_time = time.time()
    
    mask = mask_func(k_space_full.shape, fixed_R)
    k_space_undersampled = k_space_full * mask
    zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
    psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
    ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
    
    ista_recon = ista_wavelet_cs(
        k_space_undersampled, mask, zf_recon.copy(),
        n_iters=optimal_iters, lambda_val=optimal_lambda,
        ground_truth_for_psnr=ground_truth_image
    )
    psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
    ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
    
    results.append({
        'name': mask_name,
        'mask': mask,
        'zf_recon': zf_recon,
        'ista_recon': ista_recon,
        'psnr_zf': psnr_zf,
        'ssim_zf': ssim_zf,
        'psnr_ista': psnr_ista,
        'ssim_ista': ssim_ista,
        'time': time.time() - start_time
    })
    print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
          f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")

# --- 6. VISUALIZE RESULTS ---
plt.figure(figsize=(18, 12))
for i, res in enumerate(results):
    # Mask
    plt.subplot(4, 5, i*5 + 1)
    plt.imshow(fftshift(res['mask']), cmap='gray')
    plt.title(f"{res['name']} Mask\n(R={fixed_R})")
    plt.axis('off')

    # Zero-Filled
    plt.subplot(4, 5, i*5 + 2)
    plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
    plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
    plt.axis('off')
    
    # ISTA
    plt.subplot(4, 5, i*5 + 3)
    plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
    plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
    plt.axis('off')

    # Difference
    diff = np.abs(ground_truth_image - res['ista_recon'])
    plt.subplot(4, 5, i*5 + 4)
    plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
    plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
    plt.axis('off')

    # Ground Truth (only once, in first row)
    if i == 0:
        plt.subplot(4, 5, 5)
        plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
        plt.title("Ground Truth")
        plt.axis('off')

plt.tight_layout()
plt.show()

# --- 7. SUMMARY TABLE ---
print("\n--- Summary of Results (R=4) ---")
print(f"{'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
print("-" * 70)
for res in results:
    print(f"{res['name']:<15} | {res['psnr_zf']:<10.2f} | {res['psnr_ista']:<10.2f} | "
          f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

# --- 8. COMPARE TO PAPER ---
print("\n--- Comparison to Reference Paper ---")
print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
best_result = max(results, key=lambda x: x['psnr_ista'])
print(f"Your Best ({best_result['name']}, R=4, 25% data): "
      f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")

print("\n--- Experiments Complete ---")

DICOM directory: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
K-space file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/kspace.cfl
Params file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/params.txt
Found 252 DICOM files (.mag) in /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
Processing DICOM file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Contents of params.txt:
['This is a short summary of the GE header file output\n', '...PSD name from inside PSD: 3DFSE\n', '...Magnet strength (in Gauss): 30000\n', '    The clinicalCoilName of the active coil: C-GE_HDx TR Knee PA\n', '...rhnframes yres: 320\n', '...rhfrsize xres: 320\n', '...rhnslices slices in a pass: 256\n', '...Display field of view - x (mm): 160\n', '...Display field of view - y (if different): 160\n', '...Variable bandwidth (kHz): 50\n', '...Pulse repetition time (usec): 1550000\n', '...Pulse echo time (usec): 25661\n', '...Echo train length for fast spin echo: 40\n', '...Slice thickness (mm): 0.6\n', '...Spacing between scans (mm): 0\n', '...Number of 3D slabs: 1\n']
No matrix size found in params.txt
Using DICOM image shape as k-space dimensions: (512, 512)
Loaded k-space data with shape: (512, 512), dtype: complex64
PSNR between DICOM and k-space reconstruction: -43.31 dB

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.4788 dB
ISTA Iteration 2/10, Current PSNR: 31.5990 dB
ISTA Iteration 3/10, Current PSNR: 31.6315 dB
ISTA Iteration 4/10, Current PSNR: 31.6408 dB
ISTA Iteration 5/10, Current PSNR: 31.6436 dB
ISTA Iteration 6/10, Current PSNR: 31.6446 dB
ISTA Iteration 7/10, Current PSNR: 31.6450 dB
ISTA Iteration 8/10, Current PSNR: 31.6452 dB
ISTA Iteration 9/10, Current PSNR: 31.6452 dB
ISTA Iteration 10/10, Current PSNR: 31.6453 dB
Cartesian Mask: ZF PSNR=31.03, ISTA PSNR=31.65, ZF SSIM=0.8043, ISTA SSIM=0.8104, Time=0.51s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.8405 dB
ISTA Iteration 2/10, Current PSNR: 30.9858 dB
ISTA Iteration 3/10, Current PSNR: 31.0243 dB
ISTA Iteration 4/10, Current PSNR: 31.0348 dB
ISTA Iteration 5/10, Current PSNR: 31.0379 dB
ISTA Iteration 6/10, Current PSNR: 31.0388 dB
ISTA Iteration 7/10, Current PSNR: 31.0392 dB
ISTA Iteration 8/10, Current PSNR: 31.0393 dB
ISTA Iteration 9/10, Current PSNR: 31.0394 dB
ISTA Iteration 10/10, Current PSNR: 31.0394 dB
Random 2D Mask: ZF PSNR=30.30, ISTA PSNR=31.04, ZF SSIM=0.7690, ISTA SSIM=0.7679, Time=0.57s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 40.9285 dB
ISTA Iteration 2/10, Current PSNR: 40.9286 dB
ISTA Iteration 3/10, Current PSNR: 40.9286 dB
ISTA Iteration 4/10, Current PSNR: 40.9286 dB
ISTA Iteration 5/10, Current PSNR: 40.9286 dB
ISTA Iteration 6/10, Current PSNR: 40.9286 dB
ISTA Iteration 7/10, Current PSNR: 40.9286 dB
ISTA Iteration 8/10, Current PSNR: 40.9286 dB
ISTA Iteration 9/10, Current PSNR: 40.9286 dB
ISTA Iteration 10/10, Current PSNR: 40.9286 dB
Variable Density Mask: ZF PSNR=40.92, ISTA PSNR=40.93, ZF SSIM=0.9613, ISTA SSIM=0.9614, Time=0.55s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 39.0607 dB
ISTA Iteration 2/10, Current PSNR: 39.0607 dB
ISTA Iteration 3/10, Current PSNR: 39.0607 dB
ISTA Iteration 4/10, Current PSNR: 39.0607 dB
ISTA Iteration 5/10, Current PSNR: 39.0607 dB
ISTA Iteration 6/10, Current PSNR: 39.0607 dB
ISTA Iteration 7/10, Current PSNR: 39.0607 dB
ISTA Iteration 8/10, Current PSNR: 39.0607 dB
ISTA Iteration 9/10, Current PSNR: 39.0607 dB
ISTA Iteration 10/10, Current PSNR: 39.0607 dB
Edge-Enhanced Mask: ZF PSNR=39.04, ISTA PSNR=39.06, ZF SSIM=0.9348, ISTA SSIM=0.9350, Time=0.56s


--- Summary of Results (R=4) ---
Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------
Cartesian       | 31.03      | 31.65      | 0.8043     | 0.8104     | 0.51      
Random 2D       | 30.30      | 31.04      | 0.7690     | 0.7679     | 0.57      
Variable Density | 40.92      | 40.93      | 0.9613     | 0.9614     | 0.55      
Edge-Enhanced   | 39.04      | 39.06      | 0.9348     | 0.9350     | 0.56      

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data): PSNR=40.93 dB, SSIM=0.9614 (ISTA)

--- Experiments Complete ---

EXPERIMENT 6

CS_MRI_UCB_case1_final
!pip install pydicom pywavelets scikit-image numpy matplotlib
!ls -l /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/
!ls -l /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
total 1638488
-rw-r--r-- 1 nobody nogroup      79784 Jun  2 09:54 GEheader.txt
-rw-r--r-- 1 nobody nogroup 1677721600 Jun  2 09:55 kspace.cfl
-rw-r--r-- 1 nobody nogroup         30 Jun  2 09:54 kspace.hdr
-rw-r--r-- 1 nobody nogroup        595 Jun  2 09:54 params.txt
-rw-r--r-- 1 nobody nogroup 531552 Jun  2 09:54 /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag

import os
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import pydicom
import glob
import re

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')
print(f"DICOM directory: {dicom_dir}")
print(f"K-space file: {kspace_cfl_path}")
print(f"Params file: {params_path}")

# --- 2. LOAD DICOM FILES ---
dicom_files = [os.path.join(dicom_dir, 'Sec_128.mag')]  # Focus on Sec_128.mag
print(f"Selected DICOM file: {dicom_files[0]}")
if not os.path.exists(dicom_files[0]):
    print(f"ERROR: {dicom_files[0]} not found")
    exit()

# --- 3. LOAD K-SPACE DATA ---
def read_params_dims(params_path):
    """
    Read matrix size, coils, and slices from params.txt.
    Returns (rows, cols, coils, slices) or None if not found.
    """
    if not os.path.exists(params_path):
        print(f"WARNING: params.txt not found at {params_path}")
        return None
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            print(f"Contents of params.txt:\n{lines}")
            rows, cols, coils, slices = None, None, 8, None  # Assume 8 coils
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            if rows and cols and slices:
                return rows, cols, coils, slices
        print("No matrix size or slices found in params.txt")
        return None
    except Exception as e:
        print(f"ERROR reading params.txt: {e}")
        return None

def zero_pad_kspace(kspace, target_shape=(512, 512)):
    """
    Zero-pad k-space to target shape, centering the original data.
    """
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows_top = (target_rows - rows) // 2
    pad_rows_bottom = target_rows - rows - pad_rows_top
    pad_cols_left = (target_cols - cols) // 2
    pad_cols_right = target_cols - cols - pad_cols_left
    kspace_padded = np.pad(kspace, ((pad_rows_top, pad_rows_bottom), (pad_cols_left, pad_cols_right)),
                           mode='constant', constant_values=0)
    return kspace_padded

def read_cfl_data(cfl_path, dims):
    """
    Read k-space data from .cfl file using specified dimensions (rows, cols, coils, slices).
    Assumes interleaved real/imaginary parts.
    """
    if not os.path.exists(cfl_path):
        print(f"WARNING: CFL file not found at {cfl_path}")
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)  # 2 for real/imaginary
        if data.size != expected_size:
            raise ValueError(f"CFL file size mismatch for dimensions {dims}. Expected {expected_size} values, got {data.size}")
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"ERROR reading .cfl file: {e}")
        return None

# Get dimensions from params.txt or use defaults
params_dims = read_params_dims(params_path)
if params_dims is None:
    print(f"Using default k-space dimensions: 320x320, 8 coils, 256 slices")
    dims = (320, 320, 8, 256)
else:
    rows, cols, coils, slices = params_dims
    dims = (rows, cols, coils, slices)
    print(f"Using dimensions from params.txt: rows={rows}, cols={cols}, coils={coils}, slices={slices}")

# Load k-space data
kspace_data = read_cfl_data(kspace_cfl_path, dims)
use_dicom_kspace = False
if kspace_data is None:
    print(f"WARNING: Failed to load k-space data. Using DICOM-based k-space.")
    use_dicom_kspace = True

# --- 4. PROCESS DICOM FILE ---
all_results = []
for dicom_idx, dicom_path in enumerate(dicom_files):
    print(f"\nProcessing DICOM file ({dicom_idx+1}/{len(dicom_files)}): {dicom_path}")
    try:
        # Load DICOM
        dicom_data = pydicom.dcmread(dicom_path)
        ground_truth_image = dicom_data.pixel_array.astype(np.float32)
        if ground_truth_image.shape != (512, 512):
            print(f"ERROR: Unexpected shape {ground_truth_image.shape}")
            continue
        print(f"Loaded DICOM image with shape: {ground_truth_image.shape}, dtype: {ground_truth_image.dtype}")

        # Normalize ground truth image to [0, 1]
        if np.max(ground_truth_image) > np.min(ground_truth_image):
            ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                 (np.max(ground_truth_image) - np.min(ground_truth_image))
        else:
            ground_truth_image = np.zeros_like(ground_truth_image)
        print(f"Normalized ground truth image shape: {ground_truth_image.shape}, "
              f"range: [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}]")

        # Display ground truth image
        plt.figure(figsize=(8, 8))
        plt.imshow(ground_truth_image, cmap='gray')
        plt.title(f"Ground Truth Image (DICOM: {os.path.basename(dicom_path)})")
        plt.axis('off')
        plt.show()

        # Get k-space for slice 128
        slice_idx = 128
        if not use_dicom_kspace and kspace_data is not None:
            if slice_idx >= dims[3]:
                print(f"WARNING: Slice index {slice_idx} exceeds k-space slices {dims[3]}. Using DICOM-based k-space.")
                kspace_2d = fftshift(fft2(ground_truth_image))
                use_dicom_kspace = True
            else:
                # Try multiple slice offsets
                best_psnr = -np.inf
                best_kspace_2d = None
                for offset in [-2, -1, 0, 1, 2]:
                    test_idx = slice_idx + offset
                    if 0 <= test_idx < dims[3]:
                        kspace_slice = kspace_data[:, :, :, test_idx]  # Shape: (320, 320, 8)
                        image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))  # Shape: (320, 320, 8)
                        image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))  # Shape: (320, 320)
                        kspace_test = zero_pad_kspace(fftshift(fft2(image_rss), axes=(0, 1)))
                        kspace_recon = np.abs(ifft2(ifftshift(kspace_test)))
                        if np.max(kspace_recon) > np.min(kspace_recon):
                            kspace_recon = (kspace_recon - np.min(kspace_recon)) / \
                                           (np.max(kspace_recon) - np.min(kspace_recon))
                        test_psnr = psnr(ground_truth_image, kspace_recon, data_range=1.0)
                        print(f"Slice {test_idx} (offset {offset}): PSNR={test_psnr:.2f} dB")
                        if test_psnr > best_psnr:
                            best_psnr = test_psnr
                            best_kspace_2d = kspace_test
                if best_psnr > 20:
                    kspace_2d = best_kspace_2d
                    print(f"Selected k-space for slice {slice_idx} (best PSNR={best_psnr:.2f} dB), shape: {kspace_2d.shape}")
                else:
                    print(f"WARNING: Best k-space PSNR ({best_psnr:.2f} dB) too low. Using DICOM-based k-space.")
                    kspace_2d = fftshift(fft2(ground_truth_image))
                    use_dicom_kspace = True
        else:
            print(f"Using DICOM-based k-space for slice {slice_idx}.")
            kspace_2d = fftshift(fft2(ground_truth_image))

        # --- 5. CS SIMULATION ---
        print("\n--- Starting CS Simulation ---")
        k_space_full = kspace_2d

        # Define mask creation functions
        def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
            num_cols = shape[1]
            num_low_freqs = int(round(num_cols * center_fraction))
            mask = np.zeros(shape, dtype=bool)
            pad = (num_cols - num_low_freqs + 1) // 2
            mask[:, pad:pad + num_low_freqs] = True
            num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
            outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
            permuted_outer_lines = np.random.permutation(outer_lines_indices)
            selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
            mask[:, selected_outer_lines] = True
            return mask

        def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            num_points = int(np.prod(shape) / acceleration_factor)
            mask = np.zeros(shape, dtype=bool)
            center_rows = int(shape[0] * center_fraction)
            center_cols = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
            c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
            mask[r_start:r_end, c_start:c_end] = True
            num_sampled_center = np.sum(mask)
            remaining_points = num_points - num_sampled_center
            if remaining_points > 0:
                outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                                 if not (r_start <= r < r_end and c_start <= c < c_end)]
                if len(outer_indices) > 0:
                    chosen_indices = np.random.choice(len(outer_indices), 
                                                     max(0, min(remaining_points, len(outer_indices))), 
                                                     replace=False)
                    for idx in chosen_indices:
                        r, c = outer_indices[idx]
                        mask[r, c] = True
            return mask

        def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
            if seed is not None:
                np.random.seed(seed)
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x)
            y_coords = np.abs(np.arange(rows) - center_y)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
            norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
            pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
            if seed is not None:
                np.random.seed(seed)
            edge_map = sobel(reference_image)
            edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
            if np.max(edge_map) > np.min(edge_map):
                edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
            k_space_edge = fftshift(fft2(edge_map))
            k_space_energy = np.abs(k_space_edge)
            k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
            if np.max(k_space_energy) > np.min(k_space_energy):
                k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                                 (np.max(k_space_energy) - np.min(k_space_energy))
            rows, cols = shape
            center_x, center_y = cols // 2, rows // 2
            x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
            y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
            dist_x, dist_y = np.meshgrid(x_coords, y_coords)
            center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
            center_pdf = np.clip(center_pdf, 0, 1)
            edge_weight = 0.7
            pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
            pdf = np.clip(pdf, 0, 1)
            target_samples = int(np.prod(shape) / acceleration_factor)
            flat_pdf = pdf.flatten()
            sorted_indices = np.argsort(-flat_pdf)
            mask = np.zeros(shape, dtype=bool).flatten()
            mask[sorted_indices[:target_samples]] = True
            mask = mask.reshape(shape)
            center_rows_abs = int(shape[0] * center_fraction)
            center_cols_abs = int(shape[1] * center_fraction)
            r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
            c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
            mask[r_start:r_end, c_start:c_end] = True
            actual_accel = np.prod(shape) / np.sum(mask)
            print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
            return mask

        # ISTA reconstruction function
        def soft_threshold(x, threshold):
            return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

        def wavelet_forward(image, wavelet='db4', level=3):
            coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
            arr, coeff_slices = pywt.coeffs_to_array(coeffs)
            return arr, coeff_slices

        def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
            coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
            return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

        def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                            ground_truth_for_psnr, wavelet='db4', level=3):
            x_recon = initial_image.copy().astype(np.complex128)
            k_space_undersampled = k_space_undersampled.astype(np.complex128)
            step_size = 1.0

            print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")

            for i in range(n_iters):
                current_k_space = fftshift(fft2(x_recon))
                k_space_error = (current_k_space * mask) - k_space_undersampled
                grad_data_term = ifft2(ifftshift(k_space_error * mask))
                x_intermediate = x_recon - step_size * grad_data_term
                x_intermediate_real = np.real(x_intermediate)
                
                coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
                threshold = lambda_val * step_size
                coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
                approx_coeffs_size = coeffs_list_form[0].size
                coeffs_arr_thresh = coeffs_arr.copy()
                coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
                x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
                x_recon = x_reconstructed_real.astype(np.complex128)

                if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
                    current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
                    print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
            
            return np.clip(np.real(x_recon), 0, 1)

        # Test masks at R=4
        fixed_R = 4
        optimal_lambda = 0.0001
        optimal_iters = 10
        masks_to_test = [
            ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
            ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
            ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
            ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
        ]

        results = []
        for mask_name, mask_func in masks_to_test:
            print(f"\nTesting {mask_name} Mask (R={fixed_R})")
            try:
                start_time = time.time()
                
                mask = mask_func(k_space_full.shape, fixed_R)
                k_space_undersampled = k_space_full * mask
                zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
                psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
                ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
                
                ista_recon = ista_wavelet_cs(
                    k_space_undersampled, mask, zf_recon.copy(),
                    n_iters=optimal_iters, lambda_val=optimal_lambda,
                    ground_truth_for_psnr=ground_truth_image
                )
                psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
                ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
                
                results.append({
                    'name': mask_name,
                    'mask': mask,
                    'zf_recon': zf_recon,
                    'ista_recon': ista_recon,
                    'psnr_zf': psnr_zf,
                    'ssim_zf': ssim_zf,
                    'psnr_ista': psnr_ista,
                    'ssim_ista': ssim_ista,
                    'time': time.time() - start_time,
                    'dicom_file': os.path.basename(dicom_path)
                })
                print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.3f}, ISTA PSNR={psnr_ista:.3f}, "
                      f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")
            except Exception as e:
                print(f"ERROR in CS simulation for {mask_name}: {e}")
                continue

        all_results.append(results)

        # Visualize results
        plt.figure(figsize=(18, 12))
        for i, res in enumerate(results):
            plt.subplot(4, 5, i*5 + 1)
            plt.imshow(fftshift(res['mask']), cmap='gray')
            plt.title(f"{res['name']} Mask\n(R={fixed_R})")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 2)
            plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
            plt.axis('off')
            plt.subplot(4, 5, i*5 + 3)
            plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
            plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
            plt.axis('off')
            diff = np.abs(ground_truth_image - res['ista_recon'])
            plt.subplot(4, 5, i*5 + 4)
            plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
            plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
            plt.axis('off')
            if i == 0:
                plt.subplot(4, 5, 5)
                plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
                plt.title("Ground Truth")
                plt.axis('off')
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"ERROR processing DICOM file '{dicom_path}': {e}")
        continue

# --- 6. SUMMARIZE ---
print("\n--- Summary of Results (R=4) ---")
print(f"{'DICOM File':<30} | {'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
print("-" * 100)
for results in all_results:
    for res in results:
        print(f"{res['dicom_file']:<30} | {res['name']:<15} | {res['psnr_zf']:<10.3f} | {res['psnr_ista']:<10.3f} | "
              f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

# --- 7. COMPARE TO PAPER ---
print("\n--- Comparison to Reference Paper ---")
print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
best_result = max([res for results in all_results for res in results], key=lambda x: x['psnr_ista'], default=None)
if best_result:
    print(f"Your Best ({best_result['name']}, R=4, 25% data, {best_result['dicom_file']}): "
          f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")
else:
    print("No results available for comparison.")

print("\n--- Experiments Complete ---")

DICOM directory: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/
K-space file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/kspace.cfl
Params file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1/p1/e1/s1/params.txt
Selected DICOM file: /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
Contents of params.txt:
['This is a short summary of the GE header file output\n', '...PSD name from inside PSD: 3DFSE\n', '...Magnet strength (in Gauss): 30000\n', '    The clinicalCoilName of the active coil: C-GE_HDx TR Knee PA\n', '...rhnframes yres: 320\n', '...rhfrsize xres: 320\n', '...rhnslices slices in a pass: 256\n', '...Display field of view - x (mm): 160\n', '...Display field of view - y (if different): 160\n', '...Variable bandwidth (kHz): 50\n', '...Pulse repetition time (usec): 1550000\n', '...Pulse echo time (usec): 25661\n', '...Echo train length for fast spin echo: 40\n', '...Slice thickness (mm): 0.6\n', '...Spacing between scans (mm): 0\n', '...Number of 3D slabs: 1\n']
Using dimensions from params.txt: rows=320, cols=320, coils=8, slices=256

Processing DICOM file (1/1): /kaggle/input/uc-berkeley-mri-dataset-case1/P1_dcm/P1_dcm/Sec_128.mag
Loaded DICOM image with shape: (512, 512), dtype: float32
Normalized ground truth image shape: (512, 512), range: [0.00, 1.00]

Slice 126 (offset -2): PSNR=11.82 dB
Slice 127 (offset -1): PSNR=12.14 dB
Slice 128 (offset 0): PSNR=15.67 dB
Slice 129 (offset 1): PSNR=16.38 dB
Slice 130 (offset 2): PSNR=15.96 dB
WARNING: Best k-space PSNR (16.38 dB) too low. Using DICOM-based k-space.

--- Starting CS Simulation ---

Testing Cartesian Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 32.4069 dB
ISTA Iteration 2/10, Current PSNR: 32.6054 dB
ISTA Iteration 3/10, Current PSNR: 32.6606 dB
ISTA Iteration 4/10, Current PSNR: 32.6767 dB
ISTA Iteration 5/10, Current PSNR: 32.6819 dB
ISTA Iteration 6/10, Current PSNR: 32.6837 dB
ISTA Iteration 7/10, Current PSNR: 32.6845 dB
ISTA Iteration 8/10, Current PSNR: 32.6848 dB
ISTA Iteration 9/10, Current PSNR: 32.6849 dB
ISTA Iteration 10/10, Current PSNR: 32.6850 dB
Cartesian Mask: ZF PSNR=31.700, ISTA PSNR=32.685, ZF SSIM=0.8244, ISTA SSIM=0.8356, Time=0.47s

Testing Random 2D Mask (R=4)
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.8405 dB
ISTA Iteration 2/10, Current PSNR: 30.9858 dB
ISTA Iteration 3/10, Current PSNR: 31.0243 dB
ISTA Iteration 4/10, Current PSNR: 31.0348 dB
ISTA Iteration 5/10, Current PSNR: 31.0379 dB
ISTA Iteration 6/10, Current PSNR: 31.0388 dB
ISTA Iteration 7/10, Current PSNR: 31.0392 dB
ISTA Iteration 8/10, Current PSNR: 31.0393 dB
ISTA Iteration 9/10, Current PSNR: 31.0394 dB
ISTA Iteration 10/10, Current PSNR: 31.0394 dB
Random 2D Mask: ZF PSNR=30.304, ISTA PSNR=31.039, ZF SSIM=0.7690, ISTA SSIM=0.7679, Time=0.51s

Testing Variable Density Mask (R=4)
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 40.9285 dB
ISTA Iteration 2/10, Current PSNR: 40.9286 dB
ISTA Iteration 3/10, Current PSNR: 40.9286 dB
ISTA Iteration 4/10, Current PSNR: 40.9286 dB
ISTA Iteration 5/10, Current PSNR: 40.9286 dB
ISTA Iteration 6/10, Current PSNR: 40.9286 dB
ISTA Iteration 7/10, Current PSNR: 40.9286 dB
ISTA Iteration 8/10, Current PSNR: 40.9286 dB
ISTA Iteration 9/10, Current PSNR: 40.9286 dB
ISTA Iteration 10/10, Current PSNR: 40.9286 dB
Variable Density Mask: ZF PSNR=40.916, ISTA PSNR=40.929, ZF SSIM=0.9613, ISTA SSIM=0.9614, Time=0.47s

Testing Edge-Enhanced Mask (R=4)
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 39.0607 dB
ISTA Iteration 2/10, Current PSNR: 39.0607 dB
ISTA Iteration 3/10, Current PSNR: 39.0607 dB
ISTA Iteration 4/10, Current PSNR: 39.0607 dB
ISTA Iteration 5/10, Current PSNR: 39.0607 dB
ISTA Iteration 6/10, Current PSNR: 39.0607 dB
ISTA Iteration 7/10, Current PSNR: 39.0607 dB
ISTA Iteration 8/10, Current PSNR: 39.0607 dB
ISTA Iteration 9/10, Current PSNR: 39.0607 dB
ISTA Iteration 10/10, Current PSNR: 39.0607 dB
Edge-Enhanced Mask: ZF PSNR=39.038, ISTA PSNR=39.061, ZF SSIM=0.9348, ISTA SSIM=0.9350, Time=0.56s


--- Summary of Results (R=4) ---
DICOM File                     | Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------------------------------------
Sec_128.mag                    | Cartesian       | 31.700     | 32.685     | 0.8244     | 0.8356     | 0.47      
Sec_128.mag                    | Random 2D       | 30.304     | 31.039     | 0.7690     | 0.7679     | 0.51      
Sec_128.mag                    | Variable Density | 40.916     | 40.929     | 0.9613     | 0.9614     | 0.47      
Sec_128.mag                    | Edge-Enhanced   | 39.038     | 39.061     | 0.9348     | 0.9350     | 0.56      

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data, Sec_128.mag): PSNR=40.93 dB, SSIM=0.9614 (ISTA)

--- Experiments Complete ---

EXPERIMENT 7

Fork of MRI_CS_Edge_Pattern_exp2
!pip install nibabel
!pip install scikit-image
import os
import glob
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import gc

# --- 1. DEFINE BASE PATHS ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'oasis-1'
base_dataset_path = os.path.join(base_kaggle_input_path, dataset_name)
print(f"Attempting to access base dataset path: {base_dataset_path}")

if not os.path.isdir(base_dataset_path):
    print(f"ERROR: Base dataset path does not exist: {base_dataset_path}")
    print(f"Listing contents of '{base_kaggle_input_path}': {os.listdir(base_kaggle_input_path)}")
    exit()

print(f"Successfully located base dataset path: {base_dataset_path}")
print(f"Contents of '{base_dataset_path}': {os.listdir(base_dataset_path)}")

image_paths = []

# --- 2. FIND CROSS-SECTIONAL DISC PARENT FOLDERS ---
disc_parent_folders_names = [
    disc for disc in os.listdir(base_dataset_path)
    if disc.startswith('oasis_cross-sectional_disc') and \
       os.path.isdir(os.path.join(base_dataset_path, disc))
]
print(f"\nFound {len(disc_parent_folders_names)} 'oasis_cross-sectional_discX' folders: {disc_parent_folders_names}")

if not disc_parent_folders_names:
    print(f"ERROR: No 'oasis_cross-sectional_discX' folders found under '{base_dataset_path}'.")
    exit()

# --- 3. ITERATE THROUGH EACH DISC PARENT FOLDER ---
for disc_parent_name in disc_parent_folders_names:
    current_disc_parent_path = os.path.join(base_dataset_path, disc_parent_name)
    print(f"\nProcessing Disc Parent Folder: {disc_parent_name}")

    disc_num_str = disc_parent_name.replace('oasis_cross-sectional_disc', '')
    inner_disc_folder_name = f'disc{disc_num_str}'
    subjects_parent_path = os.path.join(current_disc_parent_path, inner_disc_folder_name)
    print(f"  Looking for subject folders within: {subjects_parent_path}")

    if not os.path.isdir(subjects_parent_path):
        print(f"  WARNING: Expected inner disc folder '{subjects_parent_path}' not found.")
        print(f"  Contents of '{current_disc_parent_path}': {os.listdir(current_disc_parent_path)}")
        continue
    
    print(f"  Found inner disc folder: {subjects_parent_path}")

    subject_folder_glob_pattern = os.path.join(subjects_parent_path, 'OAS1_*_MR*')
    subject_folders_found = glob.glob(subject_folder_glob_pattern)
    print(f"  Found {len(subject_folders_found)} subject folders using pattern '{subject_folder_glob_pattern}'.")

    if not subject_folders_found:
        print(f"  WARNING: No subject folders found in '{subjects_parent_path}'.")
        continue

    for subj_folder_path in subject_folders_found:
        subject_id_from_folder = os.path.basename(subj_folder_path)
        image_file_path_pattern = os.path.join(
            subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111',
            f'{subject_id_from_folder}_mpr_n*_anon_sbj_111.img'
        )
        found_img_files = glob.glob(image_file_path_pattern)

        if not found_img_files:
            image_file_path_pattern_alt = os.path.join(
                subj_folder_path, 'PROCESSED', 'MPRAGE', 'SUBJ_111',
                f'{subject_id_from_folder}_mpr_*_anon_sbj_111.img'
            )
            found_img_files = glob.glob(image_file_path_pattern_alt)
        
        if found_img_files:
            image_paths.append(found_img_files[0])

# --- 4. FINAL REPORT ---
print(f"\n--- SUMMARY ---")
print(f"Found {len(image_paths)} potential ground truth images in total.")

if image_paths:
    print(f"First few example paths found:")
    for p in image_paths[:min(5, len(image_paths))]:
        print(f"  {p}")
else:
    print("No images found. Please check dataset structure and file names.")
    exit()

# --- 5. PROCESS MULTIPLE SUBJECTS AND SLICES ---
print("\n--- Processing Multiple Subjects and Slices ---")
num_subjects = min(10, len(image_paths))  # Limit to 10 subjects
slices_per_subject = 5
image_paths = image_paths[:num_subjects]  # First 10 subjects
all_results = []

# Define mask creation functions
def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
    num_cols = shape[1]
    num_low_freqs = int(round(num_cols * center_fraction))
    mask = np.zeros(shape, dtype=bool)
    pad = (num_cols - num_low_freqs + 1) // 2
    mask[:, pad:pad + num_low_freqs] = True
    num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
    outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
    permuted_outer_lines = np.random.permutation(outer_lines_indices)
    selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
    mask[:, selected_outer_lines] = True
    return mask

def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    num_points = int(np.prod(shape) / acceleration_factor)
    mask = np.zeros(shape, dtype=bool)
    center_rows = int(shape[0] * center_fraction)
    center_cols = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
    c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
    mask[r_start:r_end, c_start:c_end] = True
    num_sampled_center = np.sum(mask)
    remaining_points = num_points - num_sampled_center
    if remaining_points > 0:
        outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                         if not (r_start <= r < r_end and c_start <= c < c_end)]
        if len(outer_indices) > 0:
            chosen_indices = np.random.choice(len(outer_indices), 
                                             min(remaining_points, len(outer_indices)), 
                                             replace=False)
            for idx in chosen_indices:
                r, c = outer_indices[idx]
                mask[r, c] = True
    return mask

def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
    if seed is not None:
        np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    edge_map = sobel(reference_image)
    edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
    if np.max(edge_map) > np.min(edge_map):
        edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
    k_space_edge = fftshift(fft2(edge_map))
    k_space_energy = np.abs(k_space_edge)
    k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
    if np.max(k_space_energy) > np.min(k_space_energy):
        k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                         (np.max(k_space_energy) - np.min(k_space_energy))
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
    y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
    center_pdf = np.clip(center_pdf, 0, 1)
    edge_weight = 0.7
    pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# ISTA reconstruction function
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
    return np.clip(np.real(x_recon), 0, 1)

# Process subjects and slices
fixed_R = 4
optimal_lambda = 0.0001
optimal_iters = 10
masks_to_test = [
    ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
    ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
    ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
    ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
]

for sample_img_path in image_paths:
    try:
        print(f"\nProcessing: {sample_img_path}")
        img_obj = nib.load(sample_img_path)
        img_data = img_obj.get_fdata()
        print(f"  Image shape: {img_data.shape}, Data type: {img_data.dtype}, Min: {np.min(img_data):.2f}, Max: {np.max(img_data):.2f}")

        if img_data.ndim == 4 and img_data.shape[3] == 1:
            central_idx = img_data.shape[2] // 2
            slice_indices = range(central_idx - 2, central_idx + 3)  # 5 central slices
            subject_results = []
            for slice_idx in slice_indices:
                print(f"\nProcessing slice {slice_idx}")
                slice_2d = img_data[:, :, slice_idx, 0].astype(np.float32).copy()
                ground_truth_image = slice_2d
                if np.max(ground_truth_image) > np.min(ground_truth_image):
                    ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                         (np.max(ground_truth_image) - np.min(ground_truth_image))
                else:
                    ground_truth_image = np.zeros_like(ground_truth_image)
                print(f"Selected 2D slice (shape {ground_truth_image.shape}, "
                      f"range [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}])")

                # Display ground truth
                plt.figure(figsize=(8, 8))
                plt.imshow(ground_truth_image, cmap='gray')
                plt.title(f"Ground Truth (Subject: {os.path.basename(sample_img_path)}, Slice: {slice_idx})")
                plt.axis('off')
                plt.show()

                # CS Simulation
                k_space_full = fftshift(fft2(ground_truth_image))
                results = []
                for mask_name, mask_func in masks_to_test:
                    print(f"\nTesting {mask_name} Mask (R={fixed_R}) for slice {slice_idx}")
                    try:
                        start_time = time.time()
                        mask = mask_func(k_space_full.shape, fixed_R)
                        k_space_undersampled = k_space_full * mask
                        zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
                        psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
                        ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
                        ista_recon = ista_wavelet_cs(
                            k_space_undersampled, mask, zf_recon.copy(),
                            n_iters=optimal_iters, lambda_val=optimal_lambda,
                            ground_truth_for_psnr=ground_truth_image
                        )
                        psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
                        ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
                        results.append({
                            'name': mask_name, 'mask': mask, 'zf_recon': zf_recon, 'ista_recon': ista_recon,
                            'psnr_zf': psnr_zf, 'ssim_zf': ssim_zf, 'psnr_ista': psnr_ista, 'ssim_ista': ssim_ista,
                            'time': time.time() - start_time, 'subject': os.path.basename(sample_img_path), 'slice': slice_idx
                        })
                        print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
                              f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")
                    except Exception as e:
                        print(f"ERROR in CS simulation for {mask_name}: {e}")
                        continue
                subject_results.append(results)

                # Visualize results for this slice
                plt.figure(figsize=(18, 12))
                for i, res in enumerate(results):
                    plt.subplot(4, 5, i*5 + 1)
                    plt.imshow(fftshift(res['mask']), cmap='gray')
                    plt.title(f"{res['name']} Mask\n(R={fixed_R})")
                    plt.axis('off')
                    plt.subplot(4, 5, i*5 + 2)
                    plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
                    plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
                    plt.axis('off')
                    plt.subplot(4, 5, i*5 + 3)
                    plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
                    plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
                    plt.axis('off')
                    diff = np.abs(ground_truth_image - res['ista_recon'])
                    plt.subplot(4, 5, i*5 + 4)
                    plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
                    plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
                    plt.axis('off')
                    if i == 0:
                        plt.subplot(4, 5, 5)
                        plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
                        plt.title("Ground Truth")
                        plt.axis('off')
                plt.tight_layout()
                plt.savefig(f'results_{os.path.basename(sample_img_path)}_slice_{slice_idx}.png', dpi=300)
                plt.close()  # Close figure to save memory
                gc.collect()  # Free memory

            all_results.append(subject_results)
        else:
            print(f"  Loaded image is not 4D (shape: {img_data.shape}). Skipping.")
    except Exception as e:
        print(f"  ERROR loading image '{sample_img_path}': {e}")
        continue

# --- 6. SUMMARIZE RESULTS ---
print("\n--- Summary of Results (R=4) ---")
print(f"{'Subject':<30} | {'Slice':<10} | {'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
print("-" * 100)
for subject_results in all_results:
    for results in subject_results:
        for res in results:
            print(f"{res['subject'][:29]:<30} | {res['slice']:<10} | {res['name']:<15} | {res['psnr_zf']:<10.2f} | {res['psnr_ista']:<10.2f} | "
                  f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

# Compute mean/std
metrics = {'psnr_zf': [], 'psnr_ista': [], 'ssim_zf': [], 'ssim_ista': []}
for subject_results in all_results:
    for results in subject_results:
        for res in results:
            metrics['psnr_zf'].append(res['psnr_zf'])
            metrics['psnr_ista'].append(res['psnr_ista'])
            metrics['ssim_zf'].append(res['ssim_zf'])
            metrics['ssim_ista'].append(res['ssim_ista'])

print("\n--- Mean/Std Metrics (R=4) ---")
for metric, values in metrics.items():
    print(f"{metric}: Mean={np.mean(values):.4f}, Std={np.std(values):.4f}")

# --- 7. COMPARE TO PAPER ---
print("\n--- Comparison to Reference Paper ---")
print("Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)")
print("Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)")
best_result = max([res for subj in all_results for slice_res in subj for res in slice_res], key=lambda x: x['psnr_ista'])
print(f"Your Best ({best_result['name']}, R=4, 25% data, {best_result['subject']}, Slice {best_result['slice']}): "
      f"PSNR={best_result['psnr_ista']:.2f} dB, SSIM={best_result['ssim_ista']:.4f} (ISTA)")

print("\n--- Experiments Complete ---")
Attempting to access base dataset path: /kaggle/input/oasis-1
Successfully located base dataset path: /kaggle/input/oasis-1
Contents of '/kaggle/input/oasis-1': ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Found 12 'oasis_cross-sectional_discX' folders: ['oasis_cross-sectional_disc6', 'oasis_cross-sectional_disc12', 'oasis_cross-sectional_disc4', 'oasis_cross-sectional_disc8', 'oasis_cross-sectional_disc9', 'oasis_cross-sectional_disc11', 'oasis_cross-sectional_disc5', 'oasis_cross-sectional_disc3', 'oasis_cross-sectional_disc1', 'oasis_cross-sectional_disc2', 'oasis_cross-sectional_disc10', 'oasis_cross-sectional_disc7']

Processing Disc Parent Folder: oasis_cross-sectional_disc6
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6
  Found 37 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc12
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc12/disc12/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc4
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc4/disc4/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc8
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc8/disc8/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc9
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc9/disc9/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc11
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11
  Found 34 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc11/disc11/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc5
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc5/disc5/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc3
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3
  Found 36 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc3/disc3/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc1
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1
  Found 39 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc1/disc1/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc2
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc2/disc2/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc10
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10
  Found 35 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc10/disc10/OAS1_*_MR*'.

Processing Disc Parent Folder: oasis_cross-sectional_disc7
  Looking for subject folders within: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found inner disc folder: /kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7
  Found 38 subject folders using pattern '/kaggle/input/oasis-1/oasis_cross-sectional_disc7/disc7/OAS1_*_MR*'.

--- SUMMARY ---
Found 434 potential ground truth images in total.
First few example paths found:
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0230_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0230_MR2_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0224_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0224_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0212_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0212_MR1_mpr_n4_anon_sbj_111.img
  /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0227_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0227_MR1_mpr_n4_anon_sbj_111.img

--- Processing Multiple Subjects and Slices ---

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0220_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0220_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3775.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0230 dB
ISTA Iteration 2/10, Current PSNR: 27.4558 dB
ISTA Iteration 3/10, Current PSNR: 27.6124 dB
ISTA Iteration 4/10, Current PSNR: 27.6735 dB
ISTA Iteration 5/10, Current PSNR: 27.6995 dB
ISTA Iteration 6/10, Current PSNR: 27.7113 dB
ISTA Iteration 7/10, Current PSNR: 27.7169 dB
ISTA Iteration 8/10, Current PSNR: 27.7196 dB
ISTA Iteration 9/10, Current PSNR: 27.7210 dB
ISTA Iteration 10/10, Current PSNR: 27.7217 dB
Cartesian Mask: ZF PSNR=25.25, ISTA PSNR=27.72, ZF SSIM=0.6165, ISTA SSIM=0.7370, Time=0.14s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.8139 dB
ISTA Iteration 2/10, Current PSNR: 25.2168 dB
ISTA Iteration 3/10, Current PSNR: 25.3696 dB
ISTA Iteration 4/10, Current PSNR: 25.4318 dB
ISTA Iteration 5/10, Current PSNR: 25.4592 dB
ISTA Iteration 6/10, Current PSNR: 25.4719 dB
ISTA Iteration 7/10, Current PSNR: 25.4780 dB
ISTA Iteration 8/10, Current PSNR: 25.4810 dB
ISTA Iteration 9/10, Current PSNR: 25.4825 dB
ISTA Iteration 10/10, Current PSNR: 25.4833 dB
Random 2D Mask: ZF PSNR=22.94, ISTA PSNR=25.48, ZF SSIM=0.3070, ISTA SSIM=0.5381, Time=0.16s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2467 dB
ISTA Iteration 2/10, Current PSNR: 36.2467 dB
ISTA Iteration 3/10, Current PSNR: 36.2467 dB
ISTA Iteration 4/10, Current PSNR: 36.2467 dB
ISTA Iteration 5/10, Current PSNR: 36.2467 dB
ISTA Iteration 6/10, Current PSNR: 36.2467 dB
ISTA Iteration 7/10, Current PSNR: 36.2467 dB
ISTA Iteration 8/10, Current PSNR: 36.2467 dB
ISTA Iteration 9/10, Current PSNR: 36.2467 dB
ISTA Iteration 10/10, Current PSNR: 36.2467 dB
Variable Density Mask: ZF PSNR=36.14, ISTA PSNR=36.25, ZF SSIM=0.9603, ISTA SSIM=0.9760, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7429 dB
ISTA Iteration 2/10, Current PSNR: 35.7430 dB
ISTA Iteration 3/10, Current PSNR: 35.7430 dB
ISTA Iteration 4/10, Current PSNR: 35.7430 dB
ISTA Iteration 5/10, Current PSNR: 35.7430 dB
ISTA Iteration 6/10, Current PSNR: 35.7430 dB
ISTA Iteration 7/10, Current PSNR: 35.7430 dB
ISTA Iteration 8/10, Current PSNR: 35.7430 dB
ISTA Iteration 9/10, Current PSNR: 35.7430 dB
ISTA Iteration 10/10, Current PSNR: 35.7430 dB
Edge-Enhanced Mask: ZF PSNR=33.90, ISTA PSNR=35.74, ZF SSIM=0.6904, ISTA SSIM=0.9019, Time=0.13s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.6609 dB
ISTA Iteration 2/10, Current PSNR: 26.9576 dB
ISTA Iteration 3/10, Current PSNR: 27.0662 dB
ISTA Iteration 4/10, Current PSNR: 27.1094 dB
ISTA Iteration 5/10, Current PSNR: 27.1282 dB
ISTA Iteration 6/10, Current PSNR: 27.1368 dB
ISTA Iteration 7/10, Current PSNR: 27.1410 dB
ISTA Iteration 8/10, Current PSNR: 27.1430 dB
ISTA Iteration 9/10, Current PSNR: 27.1440 dB
ISTA Iteration 10/10, Current PSNR: 27.1445 dB
Cartesian Mask: ZF PSNR=25.16, ISTA PSNR=27.14, ZF SSIM=0.6016, ISTA SSIM=0.7163, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0262 dB
ISTA Iteration 2/10, Current PSNR: 25.4228 dB
ISTA Iteration 3/10, Current PSNR: 25.5725 dB
ISTA Iteration 4/10, Current PSNR: 25.6335 dB
ISTA Iteration 5/10, Current PSNR: 25.6602 dB
ISTA Iteration 6/10, Current PSNR: 25.6726 dB
ISTA Iteration 7/10, Current PSNR: 25.6786 dB
ISTA Iteration 8/10, Current PSNR: 25.6815 dB
ISTA Iteration 9/10, Current PSNR: 25.6830 dB
ISTA Iteration 10/10, Current PSNR: 25.6837 dB
Random 2D Mask: ZF PSNR=23.18, ISTA PSNR=25.68, ZF SSIM=0.3094, ISTA SSIM=0.5410, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2982 dB
ISTA Iteration 2/10, Current PSNR: 36.2983 dB
ISTA Iteration 3/10, Current PSNR: 36.2983 dB
ISTA Iteration 4/10, Current PSNR: 36.2983 dB
ISTA Iteration 5/10, Current PSNR: 36.2983 dB
ISTA Iteration 6/10, Current PSNR: 36.2983 dB
ISTA Iteration 7/10, Current PSNR: 36.2983 dB
ISTA Iteration 8/10, Current PSNR: 36.2983 dB
ISTA Iteration 9/10, Current PSNR: 36.2983 dB
ISTA Iteration 10/10, Current PSNR: 36.2983 dB
Variable Density Mask: ZF PSNR=36.20, ISTA PSNR=36.30, ZF SSIM=0.9593, ISTA SSIM=0.9744, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7988 dB
ISTA Iteration 2/10, Current PSNR: 35.7988 dB
ISTA Iteration 3/10, Current PSNR: 35.7988 dB
ISTA Iteration 4/10, Current PSNR: 35.7988 dB
ISTA Iteration 5/10, Current PSNR: 35.7988 dB
ISTA Iteration 6/10, Current PSNR: 35.7988 dB
ISTA Iteration 7/10, Current PSNR: 35.7988 dB
ISTA Iteration 8/10, Current PSNR: 35.7988 dB
ISTA Iteration 9/10, Current PSNR: 35.7988 dB
ISTA Iteration 10/10, Current PSNR: 35.7988 dB
Edge-Enhanced Mask: ZF PSNR=33.99, ISTA PSNR=35.80, ZF SSIM=0.6959, ISTA SSIM=0.9015, Time=0.13s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0183 dB
ISTA Iteration 2/10, Current PSNR: 27.3066 dB
ISTA Iteration 3/10, Current PSNR: 27.4118 dB
ISTA Iteration 4/10, Current PSNR: 27.4535 dB
ISTA Iteration 5/10, Current PSNR: 27.4715 dB
ISTA Iteration 6/10, Current PSNR: 27.4798 dB
ISTA Iteration 7/10, Current PSNR: 27.4838 dB
ISTA Iteration 8/10, Current PSNR: 27.4857 dB
ISTA Iteration 9/10, Current PSNR: 27.4867 dB
ISTA Iteration 10/10, Current PSNR: 27.4871 dB
Cartesian Mask: ZF PSNR=25.53, ISTA PSNR=27.49, ZF SSIM=0.6057, ISTA SSIM=0.7185, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3668 dB
ISTA Iteration 2/10, Current PSNR: 25.7689 dB
ISTA Iteration 3/10, Current PSNR: 25.9207 dB
ISTA Iteration 4/10, Current PSNR: 25.9824 dB
ISTA Iteration 5/10, Current PSNR: 26.0094 dB
ISTA Iteration 6/10, Current PSNR: 26.0219 dB
ISTA Iteration 7/10, Current PSNR: 26.0280 dB
ISTA Iteration 8/10, Current PSNR: 26.0309 dB
ISTA Iteration 9/10, Current PSNR: 26.0324 dB
ISTA Iteration 10/10, Current PSNR: 26.0331 dB
Random 2D Mask: ZF PSNR=23.48, ISTA PSNR=26.03, ZF SSIM=0.3178, ISTA SSIM=0.5490, Time=0.13s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.8826 dB
ISTA Iteration 2/10, Current PSNR: 36.8827 dB
ISTA Iteration 3/10, Current PSNR: 36.8828 dB
ISTA Iteration 4/10, Current PSNR: 36.8828 dB
ISTA Iteration 5/10, Current PSNR: 36.8828 dB
ISTA Iteration 6/10, Current PSNR: 36.8828 dB
ISTA Iteration 7/10, Current PSNR: 36.8828 dB
ISTA Iteration 8/10, Current PSNR: 36.8828 dB
ISTA Iteration 9/10, Current PSNR: 36.8828 dB
ISTA Iteration 10/10, Current PSNR: 36.8828 dB
Variable Density Mask: ZF PSNR=36.78, ISTA PSNR=36.88, ZF SSIM=0.9630, ISTA SSIM=0.9763, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1999 dB
ISTA Iteration 2/10, Current PSNR: 36.2000 dB
ISTA Iteration 3/10, Current PSNR: 36.2000 dB
ISTA Iteration 4/10, Current PSNR: 36.2000 dB
ISTA Iteration 5/10, Current PSNR: 36.2000 dB
ISTA Iteration 6/10, Current PSNR: 36.2000 dB
ISTA Iteration 7/10, Current PSNR: 36.2000 dB
ISTA Iteration 8/10, Current PSNR: 36.2000 dB
ISTA Iteration 9/10, Current PSNR: 36.2000 dB
ISTA Iteration 10/10, Current PSNR: 36.2000 dB
Edge-Enhanced Mask: ZF PSNR=34.30, ISTA PSNR=36.20, ZF SSIM=0.6986, ISTA SSIM=0.9035, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9929 dB
ISTA Iteration 2/10, Current PSNR: 27.2869 dB
ISTA Iteration 3/10, Current PSNR: 27.3941 dB
ISTA Iteration 4/10, Current PSNR: 27.4366 dB
ISTA Iteration 5/10, Current PSNR: 27.4550 dB
ISTA Iteration 6/10, Current PSNR: 27.4634 dB
ISTA Iteration 7/10, Current PSNR: 27.4674 dB
ISTA Iteration 8/10, Current PSNR: 27.4694 dB
ISTA Iteration 9/10, Current PSNR: 27.4704 dB
ISTA Iteration 10/10, Current PSNR: 27.4709 dB
Cartesian Mask: ZF PSNR=25.44, ISTA PSNR=27.47, ZF SSIM=0.6086, ISTA SSIM=0.7208, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.1014 dB
ISTA Iteration 2/10, Current PSNR: 25.4997 dB
ISTA Iteration 3/10, Current PSNR: 25.6496 dB
ISTA Iteration 4/10, Current PSNR: 25.7104 dB
ISTA Iteration 5/10, Current PSNR: 25.7370 dB
ISTA Iteration 6/10, Current PSNR: 25.7493 dB
ISTA Iteration 7/10, Current PSNR: 25.7553 dB
ISTA Iteration 8/10, Current PSNR: 25.7582 dB
ISTA Iteration 9/10, Current PSNR: 25.7596 dB
ISTA Iteration 10/10, Current PSNR: 25.7603 dB
Random 2D Mask: ZF PSNR=23.21, ISTA PSNR=25.76, ZF SSIM=0.3109, ISTA SSIM=0.5411, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7011 dB
ISTA Iteration 2/10, Current PSNR: 36.7012 dB
ISTA Iteration 3/10, Current PSNR: 36.7012 dB
ISTA Iteration 4/10, Current PSNR: 36.7012 dB
ISTA Iteration 5/10, Current PSNR: 36.7012 dB
ISTA Iteration 6/10, Current PSNR: 36.7012 dB
ISTA Iteration 7/10, Current PSNR: 36.7012 dB
ISTA Iteration 8/10, Current PSNR: 36.7012 dB
ISTA Iteration 9/10, Current PSNR: 36.7012 dB
ISTA Iteration 10/10, Current PSNR: 36.7012 dB
Variable Density Mask: ZF PSNR=36.59, ISTA PSNR=36.70, ZF SSIM=0.9624, ISTA SSIM=0.9766, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2155 dB
ISTA Iteration 2/10, Current PSNR: 36.2155 dB
ISTA Iteration 3/10, Current PSNR: 36.2155 dB
ISTA Iteration 4/10, Current PSNR: 36.2155 dB
ISTA Iteration 5/10, Current PSNR: 36.2155 dB
ISTA Iteration 6/10, Current PSNR: 36.2155 dB
ISTA Iteration 7/10, Current PSNR: 36.2155 dB
ISTA Iteration 8/10, Current PSNR: 36.2155 dB
ISTA Iteration 9/10, Current PSNR: 36.2155 dB
ISTA Iteration 10/10, Current PSNR: 36.2155 dB
Edge-Enhanced Mask: ZF PSNR=34.29, ISTA PSNR=36.22, ZF SSIM=0.6997, ISTA SSIM=0.9060, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1779 dB
ISTA Iteration 2/10, Current PSNR: 27.4824 dB
ISTA Iteration 3/10, Current PSNR: 27.5937 dB
ISTA Iteration 4/10, Current PSNR: 27.6380 dB
ISTA Iteration 5/10, Current PSNR: 27.6572 dB
ISTA Iteration 6/10, Current PSNR: 27.6660 dB
ISTA Iteration 7/10, Current PSNR: 27.6702 dB
ISTA Iteration 8/10, Current PSNR: 27.6723 dB
ISTA Iteration 9/10, Current PSNR: 27.6733 dB
ISTA Iteration 10/10, Current PSNR: 27.6738 dB
Cartesian Mask: ZF PSNR=25.58, ISTA PSNR=27.67, ZF SSIM=0.6125, ISTA SSIM=0.7271, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.1661 dB
ISTA Iteration 2/10, Current PSNR: 25.5641 dB
ISTA Iteration 3/10, Current PSNR: 25.7143 dB
ISTA Iteration 4/10, Current PSNR: 25.7752 dB
ISTA Iteration 5/10, Current PSNR: 25.8019 dB
ISTA Iteration 6/10, Current PSNR: 25.8143 dB
ISTA Iteration 7/10, Current PSNR: 25.8203 dB
ISTA Iteration 8/10, Current PSNR: 25.8232 dB
ISTA Iteration 9/10, Current PSNR: 25.8247 dB
ISTA Iteration 10/10, Current PSNR: 25.8254 dB
Random 2D Mask: ZF PSNR=23.27, ISTA PSNR=25.83, ZF SSIM=0.3128, ISTA SSIM=0.5443, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7200 dB
ISTA Iteration 2/10, Current PSNR: 36.7200 dB
ISTA Iteration 3/10, Current PSNR: 36.7200 dB
ISTA Iteration 4/10, Current PSNR: 36.7200 dB
ISTA Iteration 5/10, Current PSNR: 36.7200 dB
ISTA Iteration 6/10, Current PSNR: 36.7200 dB
ISTA Iteration 7/10, Current PSNR: 36.7200 dB
ISTA Iteration 8/10, Current PSNR: 36.7200 dB
ISTA Iteration 9/10, Current PSNR: 36.7200 dB
ISTA Iteration 10/10, Current PSNR: 36.7200 dB
Variable Density Mask: ZF PSNR=36.61, ISTA PSNR=36.72, ZF SSIM=0.9628, ISTA SSIM=0.9766, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3932 dB
ISTA Iteration 2/10, Current PSNR: 36.3932 dB
ISTA Iteration 3/10, Current PSNR: 36.3932 dB
ISTA Iteration 4/10, Current PSNR: 36.3932 dB
ISTA Iteration 5/10, Current PSNR: 36.3932 dB
ISTA Iteration 6/10, Current PSNR: 36.3933 dB
ISTA Iteration 7/10, Current PSNR: 36.3933 dB
ISTA Iteration 8/10, Current PSNR: 36.3933 dB
ISTA Iteration 9/10, Current PSNR: 36.3933 dB
ISTA Iteration 10/10, Current PSNR: 36.3933 dB
Edge-Enhanced Mask: ZF PSNR=34.73, ISTA PSNR=36.39, ZF SSIM=0.7286, ISTA SSIM=0.9162, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0230_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0230_MR2_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3948.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.4133 dB
ISTA Iteration 2/10, Current PSNR: 27.7443 dB
ISTA Iteration 3/10, Current PSNR: 27.8626 dB
ISTA Iteration 4/10, Current PSNR: 27.9084 dB
ISTA Iteration 5/10, Current PSNR: 27.9279 dB
ISTA Iteration 6/10, Current PSNR: 27.9368 dB
ISTA Iteration 7/10, Current PSNR: 27.9410 dB
ISTA Iteration 8/10, Current PSNR: 27.9431 dB
ISTA Iteration 9/10, Current PSNR: 27.9441 dB
ISTA Iteration 10/10, Current PSNR: 27.9446 dB
Cartesian Mask: ZF PSNR=25.65, ISTA PSNR=27.94, ZF SSIM=0.5803, ISTA SSIM=0.7175, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.9302 dB
ISTA Iteration 2/10, Current PSNR: 25.2824 dB
ISTA Iteration 3/10, Current PSNR: 25.4121 dB
ISTA Iteration 4/10, Current PSNR: 25.4637 dB
ISTA Iteration 5/10, Current PSNR: 25.4861 dB
ISTA Iteration 6/10, Current PSNR: 25.4964 dB
ISTA Iteration 7/10, Current PSNR: 25.5013 dB
ISTA Iteration 8/10, Current PSNR: 25.5037 dB
ISTA Iteration 9/10, Current PSNR: 25.5049 dB
ISTA Iteration 10/10, Current PSNR: 25.5055 dB
Random 2D Mask: ZF PSNR=23.21, ISTA PSNR=25.51, ZF SSIM=0.3445, ISTA SSIM=0.5605, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.4459 dB
ISTA Iteration 2/10, Current PSNR: 36.4460 dB
ISTA Iteration 3/10, Current PSNR: 36.4461 dB
ISTA Iteration 4/10, Current PSNR: 36.4461 dB
ISTA Iteration 5/10, Current PSNR: 36.4461 dB
ISTA Iteration 6/10, Current PSNR: 36.4461 dB
ISTA Iteration 7/10, Current PSNR: 36.4461 dB
ISTA Iteration 8/10, Current PSNR: 36.4461 dB
ISTA Iteration 9/10, Current PSNR: 36.4461 dB
ISTA Iteration 10/10, Current PSNR: 36.4461 dB
Variable Density Mask: ZF PSNR=36.27, ISTA PSNR=36.45, ZF SSIM=0.9534, ISTA SSIM=0.9717, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7837 dB
ISTA Iteration 2/10, Current PSNR: 35.7838 dB
ISTA Iteration 3/10, Current PSNR: 35.7838 dB
ISTA Iteration 4/10, Current PSNR: 35.7839 dB
ISTA Iteration 5/10, Current PSNR: 35.7839 dB
ISTA Iteration 6/10, Current PSNR: 35.7839 dB
ISTA Iteration 7/10, Current PSNR: 35.7839 dB
ISTA Iteration 8/10, Current PSNR: 35.7839 dB
ISTA Iteration 9/10, Current PSNR: 35.7839 dB
ISTA Iteration 10/10, Current PSNR: 35.7839 dB
Edge-Enhanced Mask: ZF PSNR=34.04, ISTA PSNR=35.78, ZF SSIM=0.7231, ISTA SSIM=0.9026, Time=0.13s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.7190 dB
ISTA Iteration 2/10, Current PSNR: 28.0391 dB
ISTA Iteration 3/10, Current PSNR: 28.1535 dB
ISTA Iteration 4/10, Current PSNR: 28.1980 dB
ISTA Iteration 5/10, Current PSNR: 28.2169 dB
ISTA Iteration 6/10, Current PSNR: 28.2255 dB
ISTA Iteration 7/10, Current PSNR: 28.2296 dB
ISTA Iteration 8/10, Current PSNR: 28.2316 dB
ISTA Iteration 9/10, Current PSNR: 28.2326 dB
ISTA Iteration 10/10, Current PSNR: 28.2331 dB
Cartesian Mask: ZF PSNR=26.03, ISTA PSNR=28.23, ZF SSIM=0.5824, ISTA SSIM=0.7214, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.2997 dB
ISTA Iteration 2/10, Current PSNR: 25.6438 dB
ISTA Iteration 3/10, Current PSNR: 25.7705 dB
ISTA Iteration 4/10, Current PSNR: 25.8210 dB
ISTA Iteration 5/10, Current PSNR: 25.8429 dB
ISTA Iteration 6/10, Current PSNR: 25.8530 dB
ISTA Iteration 7/10, Current PSNR: 25.8578 dB
ISTA Iteration 8/10, Current PSNR: 25.8602 dB
ISTA Iteration 9/10, Current PSNR: 25.8613 dB
ISTA Iteration 10/10, Current PSNR: 25.8619 dB
Random 2D Mask: ZF PSNR=23.61, ISTA PSNR=25.86, ZF SSIM=0.3522, ISTA SSIM=0.5725, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3284 dB
ISTA Iteration 2/10, Current PSNR: 36.3287 dB
ISTA Iteration 3/10, Current PSNR: 36.3287 dB
ISTA Iteration 4/10, Current PSNR: 36.3288 dB
ISTA Iteration 5/10, Current PSNR: 36.3288 dB
ISTA Iteration 6/10, Current PSNR: 36.3288 dB
ISTA Iteration 7/10, Current PSNR: 36.3288 dB
ISTA Iteration 8/10, Current PSNR: 36.3288 dB
ISTA Iteration 9/10, Current PSNR: 36.3288 dB
ISTA Iteration 10/10, Current PSNR: 36.3288 dB
Variable Density Mask: ZF PSNR=36.17, ISTA PSNR=36.33, ZF SSIM=0.9524, ISTA SSIM=0.9693, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7619 dB
ISTA Iteration 2/10, Current PSNR: 35.7619 dB
ISTA Iteration 3/10, Current PSNR: 35.7620 dB
ISTA Iteration 4/10, Current PSNR: 35.7620 dB
ISTA Iteration 5/10, Current PSNR: 35.7620 dB
ISTA Iteration 6/10, Current PSNR: 35.7620 dB
ISTA Iteration 7/10, Current PSNR: 35.7620 dB
ISTA Iteration 8/10, Current PSNR: 35.7620 dB
ISTA Iteration 9/10, Current PSNR: 35.7620 dB
ISTA Iteration 10/10, Current PSNR: 35.7620 dB
Edge-Enhanced Mask: ZF PSNR=34.04, ISTA PSNR=35.76, ZF SSIM=0.7235, ISTA SSIM=0.9035, Time=0.12s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9943 dB
ISTA Iteration 2/10, Current PSNR: 27.3108 dB
ISTA Iteration 3/10, Current PSNR: 27.4237 dB
ISTA Iteration 4/10, Current PSNR: 27.4675 dB
ISTA Iteration 5/10, Current PSNR: 27.4861 dB
ISTA Iteration 6/10, Current PSNR: 27.4946 dB
ISTA Iteration 7/10, Current PSNR: 27.4987 dB
ISTA Iteration 8/10, Current PSNR: 27.5006 dB
ISTA Iteration 9/10, Current PSNR: 27.5016 dB
ISTA Iteration 10/10, Current PSNR: 27.5021 dB
Cartesian Mask: ZF PSNR=25.33, ISTA PSNR=27.50, ZF SSIM=0.5700, ISTA SSIM=0.7061, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6772 dB
ISTA Iteration 2/10, Current PSNR: 25.0177 dB
ISTA Iteration 3/10, Current PSNR: 25.1433 dB
ISTA Iteration 4/10, Current PSNR: 25.1935 dB
ISTA Iteration 5/10, Current PSNR: 25.2154 dB
ISTA Iteration 6/10, Current PSNR: 25.2254 dB
ISTA Iteration 7/10, Current PSNR: 25.2303 dB
ISTA Iteration 8/10, Current PSNR: 25.2326 dB
ISTA Iteration 9/10, Current PSNR: 25.2338 dB
ISTA Iteration 10/10, Current PSNR: 25.2344 dB
Random 2D Mask: ZF PSNR=23.00, ISTA PSNR=25.23, ZF SSIM=0.3416, ISTA SSIM=0.5583, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.6854 dB
ISTA Iteration 2/10, Current PSNR: 35.6856 dB
ISTA Iteration 3/10, Current PSNR: 35.6856 dB
ISTA Iteration 4/10, Current PSNR: 35.6856 dB
ISTA Iteration 5/10, Current PSNR: 35.6856 dB
ISTA Iteration 6/10, Current PSNR: 35.6857 dB
ISTA Iteration 7/10, Current PSNR: 35.6857 dB
ISTA Iteration 8/10, Current PSNR: 35.6857 dB
ISTA Iteration 9/10, Current PSNR: 35.6857 dB
ISTA Iteration 10/10, Current PSNR: 35.6857 dB
Variable Density Mask: ZF PSNR=35.55, ISTA PSNR=35.69, ZF SSIM=0.9525, ISTA SSIM=0.9693, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.0959 dB
ISTA Iteration 2/10, Current PSNR: 35.0962 dB
ISTA Iteration 3/10, Current PSNR: 35.0963 dB
ISTA Iteration 4/10, Current PSNR: 35.0964 dB
ISTA Iteration 5/10, Current PSNR: 35.0964 dB
ISTA Iteration 6/10, Current PSNR: 35.0964 dB
ISTA Iteration 7/10, Current PSNR: 35.0964 dB
ISTA Iteration 8/10, Current PSNR: 35.0964 dB
ISTA Iteration 9/10, Current PSNR: 35.0964 dB
ISTA Iteration 10/10, Current PSNR: 35.0964 dB
Edge-Enhanced Mask: ZF PSNR=33.41, ISTA PSNR=35.10, ZF SSIM=0.7090, ISTA SSIM=0.8947, Time=0.13s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.7620 dB
ISTA Iteration 2/10, Current PSNR: 28.0784 dB
ISTA Iteration 3/10, Current PSNR: 28.1917 dB
ISTA Iteration 4/10, Current PSNR: 28.2359 dB
ISTA Iteration 5/10, Current PSNR: 28.2547 dB
ISTA Iteration 6/10, Current PSNR: 28.2633 dB
ISTA Iteration 7/10, Current PSNR: 28.2674 dB
ISTA Iteration 8/10, Current PSNR: 28.2694 dB
ISTA Iteration 9/10, Current PSNR: 28.2704 dB
ISTA Iteration 10/10, Current PSNR: 28.2709 dB
Cartesian Mask: ZF PSNR=26.11, ISTA PSNR=28.27, ZF SSIM=0.5838, ISTA SSIM=0.7199, Time=0.11s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.4073 dB
ISTA Iteration 2/10, Current PSNR: 25.7468 dB
ISTA Iteration 3/10, Current PSNR: 25.8720 dB
ISTA Iteration 4/10, Current PSNR: 25.9220 dB
ISTA Iteration 5/10, Current PSNR: 25.9438 dB
ISTA Iteration 6/10, Current PSNR: 25.9538 dB
ISTA Iteration 7/10, Current PSNR: 25.9586 dB
ISTA Iteration 8/10, Current PSNR: 25.9610 dB
ISTA Iteration 9/10, Current PSNR: 25.9621 dB
ISTA Iteration 10/10, Current PSNR: 25.9627 dB
Random 2D Mask: ZF PSNR=23.74, ISTA PSNR=25.96, ZF SSIM=0.3599, ISTA SSIM=0.5778, Time=0.14s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7618 dB
ISTA Iteration 2/10, Current PSNR: 36.7621 dB
ISTA Iteration 3/10, Current PSNR: 36.7622 dB
ISTA Iteration 4/10, Current PSNR: 36.7623 dB
ISTA Iteration 5/10, Current PSNR: 36.7623 dB
ISTA Iteration 6/10, Current PSNR: 36.7623 dB
ISTA Iteration 7/10, Current PSNR: 36.7623 dB
ISTA Iteration 8/10, Current PSNR: 36.7623 dB
ISTA Iteration 9/10, Current PSNR: 36.7623 dB
ISTA Iteration 10/10, Current PSNR: 36.7623 dB
Variable Density Mask: ZF PSNR=36.62, ISTA PSNR=36.76, ZF SSIM=0.9596, ISTA SSIM=0.9738, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.0016 dB
ISTA Iteration 2/10, Current PSNR: 36.0016 dB
ISTA Iteration 3/10, Current PSNR: 36.0016 dB
ISTA Iteration 4/10, Current PSNR: 36.0016 dB
ISTA Iteration 5/10, Current PSNR: 36.0016 dB
ISTA Iteration 6/10, Current PSNR: 36.0016 dB
ISTA Iteration 7/10, Current PSNR: 36.0016 dB
ISTA Iteration 8/10, Current PSNR: 36.0016 dB
ISTA Iteration 9/10, Current PSNR: 36.0016 dB
ISTA Iteration 10/10, Current PSNR: 36.0016 dB
Edge-Enhanced Mask: ZF PSNR=34.25, ISTA PSNR=36.00, ZF SSIM=0.7290, ISTA SSIM=0.9060, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.3818 dB
ISTA Iteration 2/10, Current PSNR: 27.7011 dB
ISTA Iteration 3/10, Current PSNR: 27.8161 dB
ISTA Iteration 4/10, Current PSNR: 27.8612 dB
ISTA Iteration 5/10, Current PSNR: 27.8804 dB
ISTA Iteration 6/10, Current PSNR: 27.8892 dB
ISTA Iteration 7/10, Current PSNR: 27.8934 dB
ISTA Iteration 8/10, Current PSNR: 27.8955 dB
ISTA Iteration 9/10, Current PSNR: 27.8965 dB
ISTA Iteration 10/10, Current PSNR: 27.8970 dB
Cartesian Mask: ZF PSNR=25.71, ISTA PSNR=27.90, ZF SSIM=0.5789, ISTA SSIM=0.7143, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.9854 dB
ISTA Iteration 2/10, Current PSNR: 25.3188 dB
ISTA Iteration 3/10, Current PSNR: 25.4414 dB
ISTA Iteration 4/10, Current PSNR: 25.4902 dB
ISTA Iteration 5/10, Current PSNR: 25.5113 dB
ISTA Iteration 6/10, Current PSNR: 25.5211 dB
ISTA Iteration 7/10, Current PSNR: 25.5258 dB
ISTA Iteration 8/10, Current PSNR: 25.5280 dB
ISTA Iteration 9/10, Current PSNR: 25.5292 dB
ISTA Iteration 10/10, Current PSNR: 25.5297 dB
Random 2D Mask: ZF PSNR=23.34, ISTA PSNR=25.53, ZF SSIM=0.3530, ISTA SSIM=0.5673, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.5716 dB
ISTA Iteration 2/10, Current PSNR: 36.5719 dB
ISTA Iteration 3/10, Current PSNR: 36.5720 dB
ISTA Iteration 4/10, Current PSNR: 36.5721 dB
ISTA Iteration 5/10, Current PSNR: 36.5721 dB
ISTA Iteration 6/10, Current PSNR: 36.5721 dB
ISTA Iteration 7/10, Current PSNR: 36.5721 dB
ISTA Iteration 8/10, Current PSNR: 36.5721 dB
ISTA Iteration 9/10, Current PSNR: 36.5721 dB
ISTA Iteration 10/10, Current PSNR: 36.5721 dB
Variable Density Mask: ZF PSNR=36.41, ISTA PSNR=36.57, ZF SSIM=0.9576, ISTA SSIM=0.9740, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8639 dB
ISTA Iteration 2/10, Current PSNR: 35.8643 dB
ISTA Iteration 3/10, Current PSNR: 35.8644 dB
ISTA Iteration 4/10, Current PSNR: 35.8645 dB
ISTA Iteration 5/10, Current PSNR: 35.8645 dB
ISTA Iteration 6/10, Current PSNR: 35.8645 dB
ISTA Iteration 7/10, Current PSNR: 35.8645 dB
ISTA Iteration 8/10, Current PSNR: 35.8645 dB
ISTA Iteration 9/10, Current PSNR: 35.8645 dB
ISTA Iteration 10/10, Current PSNR: 35.8645 dB
Edge-Enhanced Mask: ZF PSNR=34.08, ISTA PSNR=35.86, ZF SSIM=0.7269, ISTA SSIM=0.9074, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0224_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0224_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3976.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.4588 dB
ISTA Iteration 2/10, Current PSNR: 27.7606 dB
ISTA Iteration 3/10, Current PSNR: 27.8675 dB
ISTA Iteration 4/10, Current PSNR: 27.9087 dB
ISTA Iteration 5/10, Current PSNR: 27.9262 dB
ISTA Iteration 6/10, Current PSNR: 27.9341 dB
ISTA Iteration 7/10, Current PSNR: 27.9379 dB
ISTA Iteration 8/10, Current PSNR: 27.9397 dB
ISTA Iteration 9/10, Current PSNR: 27.9406 dB
ISTA Iteration 10/10, Current PSNR: 27.9410 dB
Cartesian Mask: ZF PSNR=25.88, ISTA PSNR=27.94, ZF SSIM=0.6050, ISTA SSIM=0.7270, Time=0.11s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.5416 dB
ISTA Iteration 2/10, Current PSNR: 25.9147 dB
ISTA Iteration 3/10, Current PSNR: 26.0531 dB
ISTA Iteration 4/10, Current PSNR: 26.1084 dB
ISTA Iteration 5/10, Current PSNR: 26.1324 dB
ISTA Iteration 6/10, Current PSNR: 26.1434 dB
ISTA Iteration 7/10, Current PSNR: 26.1487 dB
ISTA Iteration 8/10, Current PSNR: 26.1513 dB
ISTA Iteration 9/10, Current PSNR: 26.1526 dB
ISTA Iteration 10/10, Current PSNR: 26.1532 dB
Random 2D Mask: ZF PSNR=23.80, ISTA PSNR=26.15, ZF SSIM=0.3535, ISTA SSIM=0.5663, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1147 dB
ISTA Iteration 2/10, Current PSNR: 36.1148 dB
ISTA Iteration 3/10, Current PSNR: 36.1148 dB
ISTA Iteration 4/10, Current PSNR: 36.1148 dB
ISTA Iteration 5/10, Current PSNR: 36.1148 dB
ISTA Iteration 6/10, Current PSNR: 36.1148 dB
ISTA Iteration 7/10, Current PSNR: 36.1148 dB
ISTA Iteration 8/10, Current PSNR: 36.1148 dB
ISTA Iteration 9/10, Current PSNR: 36.1148 dB
ISTA Iteration 10/10, Current PSNR: 36.1148 dB
Variable Density Mask: ZF PSNR=36.02, ISTA PSNR=36.11, ZF SSIM=0.9564, ISTA SSIM=0.9703, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.0067 dB
ISTA Iteration 2/10, Current PSNR: 36.0067 dB
ISTA Iteration 3/10, Current PSNR: 36.0067 dB
ISTA Iteration 4/10, Current PSNR: 36.0067 dB
ISTA Iteration 5/10, Current PSNR: 36.0067 dB
ISTA Iteration 6/10, Current PSNR: 36.0067 dB
ISTA Iteration 7/10, Current PSNR: 36.0067 dB
ISTA Iteration 8/10, Current PSNR: 36.0067 dB
ISTA Iteration 9/10, Current PSNR: 36.0067 dB
ISTA Iteration 10/10, Current PSNR: 36.0067 dB
Edge-Enhanced Mask: ZF PSNR=34.63, ISTA PSNR=36.01, ZF SSIM=0.7551, ISTA SSIM=0.9186, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.4398 dB
ISTA Iteration 2/10, Current PSNR: 27.7411 dB
ISTA Iteration 3/10, Current PSNR: 27.8484 dB
ISTA Iteration 4/10, Current PSNR: 27.8901 dB
ISTA Iteration 5/10, Current PSNR: 27.9078 dB
ISTA Iteration 6/10, Current PSNR: 27.9158 dB
ISTA Iteration 7/10, Current PSNR: 27.9197 dB
ISTA Iteration 8/10, Current PSNR: 27.9215 dB
ISTA Iteration 9/10, Current PSNR: 27.9225 dB
ISTA Iteration 10/10, Current PSNR: 27.9229 dB
Cartesian Mask: ZF PSNR=25.87, ISTA PSNR=27.92, ZF SSIM=0.5995, ISTA SSIM=0.7244, Time=0.11s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.5917 dB
ISTA Iteration 2/10, Current PSNR: 25.9630 dB
ISTA Iteration 3/10, Current PSNR: 26.1002 dB
ISTA Iteration 4/10, Current PSNR: 26.1551 dB
ISTA Iteration 5/10, Current PSNR: 26.1789 dB
ISTA Iteration 6/10, Current PSNR: 26.1899 dB
ISTA Iteration 7/10, Current PSNR: 26.1951 dB
ISTA Iteration 8/10, Current PSNR: 26.1977 dB
ISTA Iteration 9/10, Current PSNR: 26.1990 dB
ISTA Iteration 10/10, Current PSNR: 26.1996 dB
Random 2D Mask: ZF PSNR=23.86, ISTA PSNR=26.20, ZF SSIM=0.3515, ISTA SSIM=0.5648, Time=0.14s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8298 dB
ISTA Iteration 2/10, Current PSNR: 35.8298 dB
ISTA Iteration 3/10, Current PSNR: 35.8299 dB
ISTA Iteration 4/10, Current PSNR: 35.8299 dB
ISTA Iteration 5/10, Current PSNR: 35.8299 dB
ISTA Iteration 6/10, Current PSNR: 35.8299 dB
ISTA Iteration 7/10, Current PSNR: 35.8299 dB
ISTA Iteration 8/10, Current PSNR: 35.8299 dB
ISTA Iteration 9/10, Current PSNR: 35.8299 dB
ISTA Iteration 10/10, Current PSNR: 35.8299 dB
Variable Density Mask: ZF PSNR=35.74, ISTA PSNR=35.83, ZF SSIM=0.9530, ISTA SSIM=0.9667, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.6672 dB
ISTA Iteration 2/10, Current PSNR: 35.6672 dB
ISTA Iteration 3/10, Current PSNR: 35.6672 dB
ISTA Iteration 4/10, Current PSNR: 35.6672 dB
ISTA Iteration 5/10, Current PSNR: 35.6672 dB
ISTA Iteration 6/10, Current PSNR: 35.6672 dB
ISTA Iteration 7/10, Current PSNR: 35.6672 dB
ISTA Iteration 8/10, Current PSNR: 35.6672 dB
ISTA Iteration 9/10, Current PSNR: 35.6672 dB
ISTA Iteration 10/10, Current PSNR: 35.6672 dB
Edge-Enhanced Mask: ZF PSNR=34.35, ISTA PSNR=35.67, ZF SSIM=0.7457, ISTA SSIM=0.9108, Time=0.13s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.4149 dB
ISTA Iteration 2/10, Current PSNR: 27.7282 dB
ISTA Iteration 3/10, Current PSNR: 27.8403 dB
ISTA Iteration 4/10, Current PSNR: 27.8840 dB
ISTA Iteration 5/10, Current PSNR: 27.9026 dB
ISTA Iteration 6/10, Current PSNR: 27.9110 dB
ISTA Iteration 7/10, Current PSNR: 27.9151 dB
ISTA Iteration 8/10, Current PSNR: 27.9170 dB
ISTA Iteration 9/10, Current PSNR: 27.9180 dB
ISTA Iteration 10/10, Current PSNR: 27.9185 dB
Cartesian Mask: ZF PSNR=25.81, ISTA PSNR=27.92, ZF SSIM=0.6001, ISTA SSIM=0.7232, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.4322 dB
ISTA Iteration 2/10, Current PSNR: 25.7941 dB
ISTA Iteration 3/10, Current PSNR: 25.9272 dB
ISTA Iteration 4/10, Current PSNR: 25.9801 dB
ISTA Iteration 5/10, Current PSNR: 26.0031 dB
ISTA Iteration 6/10, Current PSNR: 26.0136 dB
ISTA Iteration 7/10, Current PSNR: 26.0187 dB
ISTA Iteration 8/10, Current PSNR: 26.0212 dB
ISTA Iteration 9/10, Current PSNR: 26.0224 dB
ISTA Iteration 10/10, Current PSNR: 26.0230 dB
Random 2D Mask: ZF PSNR=23.73, ISTA PSNR=26.02, ZF SSIM=0.3505, ISTA SSIM=0.5591, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8477 dB
ISTA Iteration 2/10, Current PSNR: 35.8479 dB
ISTA Iteration 3/10, Current PSNR: 35.8479 dB
ISTA Iteration 4/10, Current PSNR: 35.8479 dB
ISTA Iteration 5/10, Current PSNR: 35.8479 dB
ISTA Iteration 6/10, Current PSNR: 35.8479 dB
ISTA Iteration 7/10, Current PSNR: 35.8479 dB
ISTA Iteration 8/10, Current PSNR: 35.8479 dB
ISTA Iteration 9/10, Current PSNR: 35.8479 dB
ISTA Iteration 10/10, Current PSNR: 35.8479 dB
Variable Density Mask: ZF PSNR=35.75, ISTA PSNR=35.85, ZF SSIM=0.9527, ISTA SSIM=0.9675, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7234 dB
ISTA Iteration 2/10, Current PSNR: 35.7234 dB
ISTA Iteration 3/10, Current PSNR: 35.7234 dB
ISTA Iteration 4/10, Current PSNR: 35.7234 dB
ISTA Iteration 5/10, Current PSNR: 35.7234 dB
ISTA Iteration 6/10, Current PSNR: 35.7234 dB
ISTA Iteration 7/10, Current PSNR: 35.7234 dB
ISTA Iteration 8/10, Current PSNR: 35.7234 dB
ISTA Iteration 9/10, Current PSNR: 35.7234 dB
ISTA Iteration 10/10, Current PSNR: 35.7234 dB
Edge-Enhanced Mask: ZF PSNR=34.32, ISTA PSNR=35.72, ZF SSIM=0.7386, ISTA SSIM=0.9107, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.3814 dB
ISTA Iteration 2/10, Current PSNR: 27.6965 dB
ISTA Iteration 3/10, Current PSNR: 27.8091 dB
ISTA Iteration 4/10, Current PSNR: 27.8528 dB
ISTA Iteration 5/10, Current PSNR: 27.8714 dB
ISTA Iteration 6/10, Current PSNR: 27.8799 dB
ISTA Iteration 7/10, Current PSNR: 27.8839 dB
ISTA Iteration 8/10, Current PSNR: 27.8859 dB
ISTA Iteration 9/10, Current PSNR: 27.8868 dB
ISTA Iteration 10/10, Current PSNR: 27.8873 dB
Cartesian Mask: ZF PSNR=25.76, ISTA PSNR=27.89, ZF SSIM=0.6031, ISTA SSIM=0.7260, Time=0.11s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3317 dB
ISTA Iteration 2/10, Current PSNR: 25.6795 dB
ISTA Iteration 3/10, Current PSNR: 25.8068 dB
ISTA Iteration 4/10, Current PSNR: 25.8575 dB
ISTA Iteration 5/10, Current PSNR: 25.8794 dB
ISTA Iteration 6/10, Current PSNR: 25.8895 dB
ISTA Iteration 7/10, Current PSNR: 25.8943 dB
ISTA Iteration 8/10, Current PSNR: 25.8967 dB
ISTA Iteration 9/10, Current PSNR: 25.8978 dB
ISTA Iteration 10/10, Current PSNR: 25.8984 dB
Random 2D Mask: ZF PSNR=23.67, ISTA PSNR=25.90, ZF SSIM=0.3483, ISTA SSIM=0.5573, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.9832 dB
ISTA Iteration 2/10, Current PSNR: 35.9832 dB
ISTA Iteration 3/10, Current PSNR: 35.9832 dB
ISTA Iteration 4/10, Current PSNR: 35.9833 dB
ISTA Iteration 5/10, Current PSNR: 35.9833 dB
ISTA Iteration 6/10, Current PSNR: 35.9833 dB
ISTA Iteration 7/10, Current PSNR: 35.9833 dB
ISTA Iteration 8/10, Current PSNR: 35.9833 dB
ISTA Iteration 9/10, Current PSNR: 35.9833 dB
ISTA Iteration 10/10, Current PSNR: 35.9833 dB
Variable Density Mask: ZF PSNR=35.88, ISTA PSNR=35.98, ZF SSIM=0.9544, ISTA SSIM=0.9697, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7615 dB
ISTA Iteration 2/10, Current PSNR: 35.7617 dB
ISTA Iteration 3/10, Current PSNR: 35.7617 dB
ISTA Iteration 4/10, Current PSNR: 35.7618 dB
ISTA Iteration 5/10, Current PSNR: 35.7618 dB
ISTA Iteration 6/10, Current PSNR: 35.7618 dB
ISTA Iteration 7/10, Current PSNR: 35.7618 dB
ISTA Iteration 8/10, Current PSNR: 35.7618 dB
ISTA Iteration 9/10, Current PSNR: 35.7618 dB
ISTA Iteration 10/10, Current PSNR: 35.7618 dB
Edge-Enhanced Mask: ZF PSNR=34.41, ISTA PSNR=35.76, ZF SSIM=0.7501, ISTA SSIM=0.9135, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.4187 dB
ISTA Iteration 2/10, Current PSNR: 27.7293 dB
ISTA Iteration 3/10, Current PSNR: 27.8407 dB
ISTA Iteration 4/10, Current PSNR: 27.8841 dB
ISTA Iteration 5/10, Current PSNR: 27.9026 dB
ISTA Iteration 6/10, Current PSNR: 27.9110 dB
ISTA Iteration 7/10, Current PSNR: 27.9150 dB
ISTA Iteration 8/10, Current PSNR: 27.9170 dB
ISTA Iteration 9/10, Current PSNR: 27.9180 dB
ISTA Iteration 10/10, Current PSNR: 27.9184 dB
Cartesian Mask: ZF PSNR=25.82, ISTA PSNR=27.92, ZF SSIM=0.6042, ISTA SSIM=0.7267, Time=0.11s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3500 dB
ISTA Iteration 2/10, Current PSNR: 25.6960 dB
ISTA Iteration 3/10, Current PSNR: 25.8236 dB
ISTA Iteration 4/10, Current PSNR: 25.8746 dB
ISTA Iteration 5/10, Current PSNR: 25.8967 dB
ISTA Iteration 6/10, Current PSNR: 25.9069 dB
ISTA Iteration 7/10, Current PSNR: 25.9118 dB
ISTA Iteration 8/10, Current PSNR: 25.9142 dB
ISTA Iteration 9/10, Current PSNR: 25.9154 dB
ISTA Iteration 10/10, Current PSNR: 25.9160 dB
Random 2D Mask: ZF PSNR=23.70, ISTA PSNR=25.92, ZF SSIM=0.3466, ISTA SSIM=0.5584, Time=0.14s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1034 dB
ISTA Iteration 2/10, Current PSNR: 36.1034 dB
ISTA Iteration 3/10, Current PSNR: 36.1034 dB
ISTA Iteration 4/10, Current PSNR: 36.1034 dB
ISTA Iteration 5/10, Current PSNR: 36.1034 dB
ISTA Iteration 6/10, Current PSNR: 36.1034 dB
ISTA Iteration 7/10, Current PSNR: 36.1034 dB
ISTA Iteration 8/10, Current PSNR: 36.1034 dB
ISTA Iteration 9/10, Current PSNR: 36.1034 dB
ISTA Iteration 10/10, Current PSNR: 36.1034 dB
Variable Density Mask: ZF PSNR=36.00, ISTA PSNR=36.10, ZF SSIM=0.9557, ISTA SSIM=0.9707, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.9699 dB
ISTA Iteration 2/10, Current PSNR: 35.9701 dB
ISTA Iteration 3/10, Current PSNR: 35.9702 dB
ISTA Iteration 4/10, Current PSNR: 35.9702 dB
ISTA Iteration 5/10, Current PSNR: 35.9702 dB
ISTA Iteration 6/10, Current PSNR: 35.9702 dB
ISTA Iteration 7/10, Current PSNR: 35.9702 dB
ISTA Iteration 8/10, Current PSNR: 35.9702 dB
ISTA Iteration 9/10, Current PSNR: 35.9702 dB
ISTA Iteration 10/10, Current PSNR: 35.9702 dB
Edge-Enhanced Mask: ZF PSNR=34.64, ISTA PSNR=35.97, ZF SSIM=0.7569, ISTA SSIM=0.9164, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0212_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0212_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3760.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0434 dB
ISTA Iteration 2/10, Current PSNR: 27.3759 dB
ISTA Iteration 3/10, Current PSNR: 27.4962 dB
ISTA Iteration 4/10, Current PSNR: 27.5433 dB
ISTA Iteration 5/10, Current PSNR: 27.5635 dB
ISTA Iteration 6/10, Current PSNR: 27.5728 dB
ISTA Iteration 7/10, Current PSNR: 27.5772 dB
ISTA Iteration 8/10, Current PSNR: 27.5793 dB
ISTA Iteration 9/10, Current PSNR: 27.5804 dB
ISTA Iteration 10/10, Current PSNR: 27.5809 dB
Cartesian Mask: ZF PSNR=25.38, ISTA PSNR=27.58, ZF SSIM=0.5749, ISTA SSIM=0.6994, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3826 dB
ISTA Iteration 2/10, Current PSNR: 25.7653 dB
ISTA Iteration 3/10, Current PSNR: 25.9078 dB
ISTA Iteration 4/10, Current PSNR: 25.9650 dB
ISTA Iteration 5/10, Current PSNR: 25.9899 dB
ISTA Iteration 6/10, Current PSNR: 26.0015 dB
ISTA Iteration 7/10, Current PSNR: 26.0070 dB
ISTA Iteration 8/10, Current PSNR: 26.0097 dB
ISTA Iteration 9/10, Current PSNR: 26.0110 dB
ISTA Iteration 10/10, Current PSNR: 26.0117 dB
Random 2D Mask: ZF PSNR=23.59, ISTA PSNR=26.01, ZF SSIM=0.3369, ISTA SSIM=0.5530, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3438 dB
ISTA Iteration 2/10, Current PSNR: 36.3439 dB
ISTA Iteration 3/10, Current PSNR: 36.3439 dB
ISTA Iteration 4/10, Current PSNR: 36.3439 dB
ISTA Iteration 5/10, Current PSNR: 36.3439 dB
ISTA Iteration 6/10, Current PSNR: 36.3439 dB
ISTA Iteration 7/10, Current PSNR: 36.3439 dB
ISTA Iteration 8/10, Current PSNR: 36.3439 dB
ISTA Iteration 9/10, Current PSNR: 36.3439 dB
ISTA Iteration 10/10, Current PSNR: 36.3439 dB
Variable Density Mask: ZF PSNR=36.21, ISTA PSNR=36.34, ZF SSIM=0.9497, ISTA SSIM=0.9677, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.9481 dB
ISTA Iteration 2/10, Current PSNR: 35.9483 dB
ISTA Iteration 3/10, Current PSNR: 35.9483 dB
ISTA Iteration 4/10, Current PSNR: 35.9484 dB
ISTA Iteration 5/10, Current PSNR: 35.9484 dB
ISTA Iteration 6/10, Current PSNR: 35.9484 dB
ISTA Iteration 7/10, Current PSNR: 35.9484 dB
ISTA Iteration 8/10, Current PSNR: 35.9484 dB
ISTA Iteration 9/10, Current PSNR: 35.9484 dB
ISTA Iteration 10/10, Current PSNR: 35.9484 dB
Edge-Enhanced Mask: ZF PSNR=34.11, ISTA PSNR=35.95, ZF SSIM=0.7041, ISTA SSIM=0.8984, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9041 dB
ISTA Iteration 2/10, Current PSNR: 27.2294 dB
ISTA Iteration 3/10, Current PSNR: 27.3468 dB
ISTA Iteration 4/10, Current PSNR: 27.3929 dB
ISTA Iteration 5/10, Current PSNR: 27.4126 dB
ISTA Iteration 6/10, Current PSNR: 27.4217 dB
ISTA Iteration 7/10, Current PSNR: 27.4260 dB
ISTA Iteration 8/10, Current PSNR: 27.4281 dB
ISTA Iteration 9/10, Current PSNR: 27.4292 dB
ISTA Iteration 10/10, Current PSNR: 27.4297 dB
Cartesian Mask: ZF PSNR=25.25, ISTA PSNR=27.43, ZF SSIM=0.5718, ISTA SSIM=0.6949, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3093 dB
ISTA Iteration 2/10, Current PSNR: 25.7008 dB
ISTA Iteration 3/10, Current PSNR: 25.8469 dB
ISTA Iteration 4/10, Current PSNR: 25.9057 dB
ISTA Iteration 5/10, Current PSNR: 25.9312 dB
ISTA Iteration 6/10, Current PSNR: 25.9431 dB
ISTA Iteration 7/10, Current PSNR: 25.9488 dB
ISTA Iteration 8/10, Current PSNR: 25.9515 dB
ISTA Iteration 9/10, Current PSNR: 25.9529 dB
ISTA Iteration 10/10, Current PSNR: 25.9536 dB
Random 2D Mask: ZF PSNR=23.48, ISTA PSNR=25.95, ZF SSIM=0.3349, ISTA SSIM=0.5508, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1462 dB
ISTA Iteration 2/10, Current PSNR: 36.1462 dB
ISTA Iteration 3/10, Current PSNR: 36.1462 dB
ISTA Iteration 4/10, Current PSNR: 36.1462 dB
ISTA Iteration 5/10, Current PSNR: 36.1462 dB
ISTA Iteration 6/10, Current PSNR: 36.1462 dB
ISTA Iteration 7/10, Current PSNR: 36.1462 dB
ISTA Iteration 8/10, Current PSNR: 36.1462 dB
ISTA Iteration 9/10, Current PSNR: 36.1462 dB
ISTA Iteration 10/10, Current PSNR: 36.1462 dB
Variable Density Mask: ZF PSNR=36.02, ISTA PSNR=36.15, ZF SSIM=0.9472, ISTA SSIM=0.9659, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7376 dB
ISTA Iteration 2/10, Current PSNR: 35.7376 dB
ISTA Iteration 3/10, Current PSNR: 35.7376 dB
ISTA Iteration 4/10, Current PSNR: 35.7376 dB
ISTA Iteration 5/10, Current PSNR: 35.7376 dB
ISTA Iteration 6/10, Current PSNR: 35.7376 dB
ISTA Iteration 7/10, Current PSNR: 35.7376 dB
ISTA Iteration 8/10, Current PSNR: 35.7376 dB
ISTA Iteration 9/10, Current PSNR: 35.7376 dB
ISTA Iteration 10/10, Current PSNR: 35.7376 dB
Edge-Enhanced Mask: ZF PSNR=34.00, ISTA PSNR=35.74, ZF SSIM=0.7048, ISTA SSIM=0.8971, Time=0.12s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9204 dB
ISTA Iteration 2/10, Current PSNR: 27.2347 dB
ISTA Iteration 3/10, Current PSNR: 27.3481 dB
ISTA Iteration 4/10, Current PSNR: 27.3927 dB
ISTA Iteration 5/10, Current PSNR: 27.4118 dB
ISTA Iteration 6/10, Current PSNR: 27.4206 dB
ISTA Iteration 7/10, Current PSNR: 27.4247 dB
ISTA Iteration 8/10, Current PSNR: 27.4268 dB
ISTA Iteration 9/10, Current PSNR: 27.4278 dB
ISTA Iteration 10/10, Current PSNR: 27.4283 dB
Cartesian Mask: ZF PSNR=25.32, ISTA PSNR=27.43, ZF SSIM=0.5736, ISTA SSIM=0.6966, Time=0.11s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.4344 dB
ISTA Iteration 2/10, Current PSNR: 25.8269 dB
ISTA Iteration 3/10, Current PSNR: 25.9728 dB
ISTA Iteration 4/10, Current PSNR: 26.0311 dB
ISTA Iteration 5/10, Current PSNR: 26.0565 dB
ISTA Iteration 6/10, Current PSNR: 26.0682 dB
ISTA Iteration 7/10, Current PSNR: 26.0738 dB
ISTA Iteration 8/10, Current PSNR: 26.0766 dB
ISTA Iteration 9/10, Current PSNR: 26.0779 dB
ISTA Iteration 10/10, Current PSNR: 26.0786 dB
Random 2D Mask: ZF PSNR=23.58, ISTA PSNR=26.08, ZF SSIM=0.3384, ISTA SSIM=0.5553, Time=0.13s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2378 dB
ISTA Iteration 2/10, Current PSNR: 36.2378 dB
ISTA Iteration 3/10, Current PSNR: 36.2378 dB
ISTA Iteration 4/10, Current PSNR: 36.2378 dB
ISTA Iteration 5/10, Current PSNR: 36.2378 dB
ISTA Iteration 6/10, Current PSNR: 36.2378 dB
ISTA Iteration 7/10, Current PSNR: 36.2378 dB
ISTA Iteration 8/10, Current PSNR: 36.2378 dB
ISTA Iteration 9/10, Current PSNR: 36.2378 dB
ISTA Iteration 10/10, Current PSNR: 36.2378 dB
Variable Density Mask: ZF PSNR=36.11, ISTA PSNR=36.24, ZF SSIM=0.9489, ISTA SSIM=0.9676, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8265 dB
ISTA Iteration 2/10, Current PSNR: 35.8266 dB
ISTA Iteration 3/10, Current PSNR: 35.8267 dB
ISTA Iteration 4/10, Current PSNR: 35.8267 dB
ISTA Iteration 5/10, Current PSNR: 35.8267 dB
ISTA Iteration 6/10, Current PSNR: 35.8267 dB
ISTA Iteration 7/10, Current PSNR: 35.8267 dB
ISTA Iteration 8/10, Current PSNR: 35.8267 dB
ISTA Iteration 9/10, Current PSNR: 35.8267 dB
ISTA Iteration 10/10, Current PSNR: 35.8267 dB
Edge-Enhanced Mask: ZF PSNR=34.25, ISTA PSNR=35.83, ZF SSIM=0.7234, ISTA SSIM=0.9044, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8378 dB
ISTA Iteration 2/10, Current PSNR: 27.1428 dB
ISTA Iteration 3/10, Current PSNR: 27.2526 dB
ISTA Iteration 4/10, Current PSNR: 27.2955 dB
ISTA Iteration 5/10, Current PSNR: 27.3138 dB
ISTA Iteration 6/10, Current PSNR: 27.3222 dB
ISTA Iteration 7/10, Current PSNR: 27.3262 dB
ISTA Iteration 8/10, Current PSNR: 27.3281 dB
ISTA Iteration 9/10, Current PSNR: 27.3291 dB
ISTA Iteration 10/10, Current PSNR: 27.3296 dB
Cartesian Mask: ZF PSNR=25.27, ISTA PSNR=27.33, ZF SSIM=0.5770, ISTA SSIM=0.6981, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3565 dB
ISTA Iteration 2/10, Current PSNR: 25.7429 dB
ISTA Iteration 3/10, Current PSNR: 25.8859 dB
ISTA Iteration 4/10, Current PSNR: 25.9430 dB
ISTA Iteration 5/10, Current PSNR: 25.9677 dB
ISTA Iteration 6/10, Current PSNR: 25.9791 dB
ISTA Iteration 7/10, Current PSNR: 25.9845 dB
ISTA Iteration 8/10, Current PSNR: 25.9872 dB
ISTA Iteration 9/10, Current PSNR: 25.9885 dB
ISTA Iteration 10/10, Current PSNR: 25.9892 dB
Random 2D Mask: ZF PSNR=23.52, ISTA PSNR=25.99, ZF SSIM=0.3386, ISTA SSIM=0.5552, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3289 dB
ISTA Iteration 2/10, Current PSNR: 36.3290 dB
ISTA Iteration 3/10, Current PSNR: 36.3290 dB
ISTA Iteration 4/10, Current PSNR: 36.3290 dB
ISTA Iteration 5/10, Current PSNR: 36.3290 dB
ISTA Iteration 6/10, Current PSNR: 36.3290 dB
ISTA Iteration 7/10, Current PSNR: 36.3290 dB
ISTA Iteration 8/10, Current PSNR: 36.3290 dB
ISTA Iteration 9/10, Current PSNR: 36.3290 dB
ISTA Iteration 10/10, Current PSNR: 36.3290 dB
Variable Density Mask: ZF PSNR=36.21, ISTA PSNR=36.33, ZF SSIM=0.9503, ISTA SSIM=0.9684, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8866 dB
ISTA Iteration 2/10, Current PSNR: 35.8866 dB
ISTA Iteration 3/10, Current PSNR: 35.8866 dB
ISTA Iteration 4/10, Current PSNR: 35.8866 dB
ISTA Iteration 5/10, Current PSNR: 35.8866 dB
ISTA Iteration 6/10, Current PSNR: 35.8866 dB
ISTA Iteration 7/10, Current PSNR: 35.8866 dB
ISTA Iteration 8/10, Current PSNR: 35.8866 dB
ISTA Iteration 9/10, Current PSNR: 35.8866 dB
ISTA Iteration 10/10, Current PSNR: 35.8866 dB
Edge-Enhanced Mask: ZF PSNR=34.13, ISTA PSNR=35.89, ZF SSIM=0.7082, ISTA SSIM=0.8999, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.4258 dB
ISTA Iteration 2/10, Current PSNR: 26.7294 dB
ISTA Iteration 3/10, Current PSNR: 26.8383 dB
ISTA Iteration 4/10, Current PSNR: 26.8809 dB
ISTA Iteration 5/10, Current PSNR: 26.8991 dB
ISTA Iteration 6/10, Current PSNR: 26.9074 dB
ISTA Iteration 7/10, Current PSNR: 26.9114 dB
ISTA Iteration 8/10, Current PSNR: 26.9133 dB
ISTA Iteration 9/10, Current PSNR: 26.9143 dB
ISTA Iteration 10/10, Current PSNR: 26.9147 dB
Cartesian Mask: ZF PSNR=24.86, ISTA PSNR=26.91, ZF SSIM=0.5746, ISTA SSIM=0.6896, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.8528 dB
ISTA Iteration 2/10, Current PSNR: 25.2318 dB
ISTA Iteration 3/10, Current PSNR: 25.3723 dB
ISTA Iteration 4/10, Current PSNR: 25.4285 dB
ISTA Iteration 5/10, Current PSNR: 25.4529 dB
ISTA Iteration 6/10, Current PSNR: 25.4641 dB
ISTA Iteration 7/10, Current PSNR: 25.4695 dB
ISTA Iteration 8/10, Current PSNR: 25.4721 dB
ISTA Iteration 9/10, Current PSNR: 25.4734 dB
ISTA Iteration 10/10, Current PSNR: 25.4741 dB
Random 2D Mask: ZF PSNR=23.04, ISTA PSNR=25.47, ZF SSIM=0.3319, ISTA SSIM=0.5438, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.9138 dB
ISTA Iteration 2/10, Current PSNR: 35.9138 dB
ISTA Iteration 3/10, Current PSNR: 35.9138 dB
ISTA Iteration 4/10, Current PSNR: 35.9138 dB
ISTA Iteration 5/10, Current PSNR: 35.9138 dB
ISTA Iteration 6/10, Current PSNR: 35.9138 dB
ISTA Iteration 7/10, Current PSNR: 35.9138 dB
ISTA Iteration 8/10, Current PSNR: 35.9138 dB
ISTA Iteration 9/10, Current PSNR: 35.9138 dB
ISTA Iteration 10/10, Current PSNR: 35.9138 dB
Variable Density Mask: ZF PSNR=35.79, ISTA PSNR=35.91, ZF SSIM=0.9490, ISTA SSIM=0.9677, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.4873 dB
ISTA Iteration 2/10, Current PSNR: 35.4874 dB
ISTA Iteration 3/10, Current PSNR: 35.4875 dB
ISTA Iteration 4/10, Current PSNR: 35.4875 dB
ISTA Iteration 5/10, Current PSNR: 35.4875 dB
ISTA Iteration 6/10, Current PSNR: 35.4875 dB
ISTA Iteration 7/10, Current PSNR: 35.4875 dB
ISTA Iteration 8/10, Current PSNR: 35.4875 dB
ISTA Iteration 9/10, Current PSNR: 35.4875 dB
ISTA Iteration 10/10, Current PSNR: 35.4875 dB
Edge-Enhanced Mask: ZF PSNR=33.69, ISTA PSNR=35.49, ZF SSIM=0.6927, ISTA SSIM=0.8914, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0227_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0227_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3722.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0323 dB
ISTA Iteration 2/10, Current PSNR: 27.3439 dB
ISTA Iteration 3/10, Current PSNR: 27.4575 dB
ISTA Iteration 4/10, Current PSNR: 27.5024 dB
ISTA Iteration 5/10, Current PSNR: 27.5218 dB
ISTA Iteration 6/10, Current PSNR: 27.5307 dB
ISTA Iteration 7/10, Current PSNR: 27.5350 dB
ISTA Iteration 8/10, Current PSNR: 27.5371 dB
ISTA Iteration 9/10, Current PSNR: 27.5381 dB
ISTA Iteration 10/10, Current PSNR: 27.5386 dB
Cartesian Mask: ZF PSNR=25.10, ISTA PSNR=27.54, ZF SSIM=0.5521, ISTA SSIM=0.7119, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0908 dB
ISTA Iteration 2/10, Current PSNR: 25.4812 dB
ISTA Iteration 3/10, Current PSNR: 25.6282 dB
ISTA Iteration 4/10, Current PSNR: 25.6876 dB
ISTA Iteration 5/10, Current PSNR: 25.7137 dB
ISTA Iteration 6/10, Current PSNR: 25.7257 dB
ISTA Iteration 7/10, Current PSNR: 25.7315 dB
ISTA Iteration 8/10, Current PSNR: 25.7344 dB
ISTA Iteration 9/10, Current PSNR: 25.7358 dB
ISTA Iteration 10/10, Current PSNR: 25.7365 dB
Random 2D Mask: ZF PSNR=23.03, ISTA PSNR=25.74, ZF SSIM=0.3082, ISTA SSIM=0.5618, Time=0.14s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1780 dB
ISTA Iteration 2/10, Current PSNR: 36.1780 dB
ISTA Iteration 3/10, Current PSNR: 36.1780 dB
ISTA Iteration 4/10, Current PSNR: 36.1780 dB
ISTA Iteration 5/10, Current PSNR: 36.1780 dB
ISTA Iteration 6/10, Current PSNR: 36.1780 dB
ISTA Iteration 7/10, Current PSNR: 36.1780 dB
ISTA Iteration 8/10, Current PSNR: 36.1780 dB
ISTA Iteration 9/10, Current PSNR: 36.1780 dB
ISTA Iteration 10/10, Current PSNR: 36.1780 dB
Variable Density Mask: ZF PSNR=35.93, ISTA PSNR=36.18, ZF SSIM=0.9496, ISTA SSIM=0.9726, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8878 dB
ISTA Iteration 2/10, Current PSNR: 35.8881 dB
ISTA Iteration 3/10, Current PSNR: 35.8881 dB
ISTA Iteration 4/10, Current PSNR: 35.8882 dB
ISTA Iteration 5/10, Current PSNR: 35.8882 dB
ISTA Iteration 6/10, Current PSNR: 35.8882 dB
ISTA Iteration 7/10, Current PSNR: 35.8882 dB
ISTA Iteration 8/10, Current PSNR: 35.8882 dB
ISTA Iteration 9/10, Current PSNR: 35.8882 dB
ISTA Iteration 10/10, Current PSNR: 35.8882 dB
Edge-Enhanced Mask: ZF PSNR=33.98, ISTA PSNR=35.89, ZF SSIM=0.6959, ISTA SSIM=0.9096, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1704 dB
ISTA Iteration 2/10, Current PSNR: 27.4813 dB
ISTA Iteration 3/10, Current PSNR: 27.5946 dB
ISTA Iteration 4/10, Current PSNR: 27.6395 dB
ISTA Iteration 5/10, Current PSNR: 27.6588 dB
ISTA Iteration 6/10, Current PSNR: 27.6677 dB
ISTA Iteration 7/10, Current PSNR: 27.6719 dB
ISTA Iteration 8/10, Current PSNR: 27.6740 dB
ISTA Iteration 9/10, Current PSNR: 27.6750 dB
ISTA Iteration 10/10, Current PSNR: 27.6756 dB
Cartesian Mask: ZF PSNR=25.25, ISTA PSNR=27.68, ZF SSIM=0.5508, ISTA SSIM=0.7138, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.2854 dB
ISTA Iteration 2/10, Current PSNR: 25.6769 dB
ISTA Iteration 3/10, Current PSNR: 25.8241 dB
ISTA Iteration 4/10, Current PSNR: 25.8836 dB
ISTA Iteration 5/10, Current PSNR: 25.9097 dB
ISTA Iteration 6/10, Current PSNR: 25.9218 dB
ISTA Iteration 7/10, Current PSNR: 25.9276 dB
ISTA Iteration 8/10, Current PSNR: 25.9305 dB
ISTA Iteration 9/10, Current PSNR: 25.9319 dB
ISTA Iteration 10/10, Current PSNR: 25.9326 dB
Random 2D Mask: ZF PSNR=23.23, ISTA PSNR=25.93, ZF SSIM=0.3096, ISTA SSIM=0.5645, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.0441 dB
ISTA Iteration 2/10, Current PSNR: 36.0441 dB
ISTA Iteration 3/10, Current PSNR: 36.0441 dB
ISTA Iteration 4/10, Current PSNR: 36.0441 dB
ISTA Iteration 5/10, Current PSNR: 36.0441 dB
ISTA Iteration 6/10, Current PSNR: 36.0441 dB
ISTA Iteration 7/10, Current PSNR: 36.0441 dB
ISTA Iteration 8/10, Current PSNR: 36.0441 dB
ISTA Iteration 9/10, Current PSNR: 36.0441 dB
ISTA Iteration 10/10, Current PSNR: 36.0441 dB
Variable Density Mask: ZF PSNR=35.80, ISTA PSNR=36.04, ZF SSIM=0.9467, ISTA SSIM=0.9706, Time=0.14s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.8733 dB
ISTA Iteration 2/10, Current PSNR: 35.8734 dB
ISTA Iteration 3/10, Current PSNR: 35.8734 dB
ISTA Iteration 4/10, Current PSNR: 35.8734 dB
ISTA Iteration 5/10, Current PSNR: 35.8735 dB
ISTA Iteration 6/10, Current PSNR: 35.8735 dB
ISTA Iteration 7/10, Current PSNR: 35.8735 dB
ISTA Iteration 8/10, Current PSNR: 35.8735 dB
ISTA Iteration 9/10, Current PSNR: 35.8735 dB
ISTA Iteration 10/10, Current PSNR: 35.8735 dB
Edge-Enhanced Mask: ZF PSNR=34.02, ISTA PSNR=35.87, ZF SSIM=0.6970, ISTA SSIM=0.9100, Time=0.13s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.3919 dB
ISTA Iteration 2/10, Current PSNR: 27.7061 dB
ISTA Iteration 3/10, Current PSNR: 27.8198 dB
ISTA Iteration 4/10, Current PSNR: 27.8645 dB
ISTA Iteration 5/10, Current PSNR: 27.8836 dB
ISTA Iteration 6/10, Current PSNR: 27.8924 dB
ISTA Iteration 7/10, Current PSNR: 27.8965 dB
ISTA Iteration 8/10, Current PSNR: 27.8986 dB
ISTA Iteration 9/10, Current PSNR: 27.8996 dB
ISTA Iteration 10/10, Current PSNR: 27.9001 dB
Cartesian Mask: ZF PSNR=25.43, ISTA PSNR=27.90, ZF SSIM=0.5538, ISTA SSIM=0.7185, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.4641 dB
ISTA Iteration 2/10, Current PSNR: 25.8591 dB
ISTA Iteration 3/10, Current PSNR: 26.0073 dB
ISTA Iteration 4/10, Current PSNR: 26.0671 dB
ISTA Iteration 5/10, Current PSNR: 26.0932 dB
ISTA Iteration 6/10, Current PSNR: 26.1053 dB
ISTA Iteration 7/10, Current PSNR: 26.1111 dB
ISTA Iteration 8/10, Current PSNR: 26.1139 dB
ISTA Iteration 9/10, Current PSNR: 26.1153 dB
ISTA Iteration 10/10, Current PSNR: 26.1160 dB
Random 2D Mask: ZF PSNR=23.38, ISTA PSNR=26.12, ZF SSIM=0.3141, ISTA SSIM=0.5662, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.4223 dB
ISTA Iteration 2/10, Current PSNR: 36.4223 dB
ISTA Iteration 3/10, Current PSNR: 36.4223 dB
ISTA Iteration 4/10, Current PSNR: 36.4223 dB
ISTA Iteration 5/10, Current PSNR: 36.4223 dB
ISTA Iteration 6/10, Current PSNR: 36.4223 dB
ISTA Iteration 7/10, Current PSNR: 36.4223 dB
ISTA Iteration 8/10, Current PSNR: 36.4223 dB
ISTA Iteration 9/10, Current PSNR: 36.4223 dB
ISTA Iteration 10/10, Current PSNR: 36.4223 dB
Variable Density Mask: ZF PSNR=36.17, ISTA PSNR=36.42, ZF SSIM=0.9472, ISTA SSIM=0.9707, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.0354 dB
ISTA Iteration 2/10, Current PSNR: 36.0356 dB
ISTA Iteration 3/10, Current PSNR: 36.0356 dB
ISTA Iteration 4/10, Current PSNR: 36.0357 dB
ISTA Iteration 5/10, Current PSNR: 36.0357 dB
ISTA Iteration 6/10, Current PSNR: 36.0357 dB
ISTA Iteration 7/10, Current PSNR: 36.0357 dB
ISTA Iteration 8/10, Current PSNR: 36.0357 dB
ISTA Iteration 9/10, Current PSNR: 36.0357 dB
ISTA Iteration 10/10, Current PSNR: 36.0357 dB
Edge-Enhanced Mask: ZF PSNR=33.98, ISTA PSNR=36.04, ZF SSIM=0.6845, ISTA SSIM=0.9050, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.3318 dB
ISTA Iteration 2/10, Current PSNR: 27.6463 dB
ISTA Iteration 3/10, Current PSNR: 27.7601 dB
ISTA Iteration 4/10, Current PSNR: 27.8047 dB
ISTA Iteration 5/10, Current PSNR: 27.8239 dB
ISTA Iteration 6/10, Current PSNR: 27.8326 dB
ISTA Iteration 7/10, Current PSNR: 27.8368 dB
ISTA Iteration 8/10, Current PSNR: 27.8388 dB
ISTA Iteration 9/10, Current PSNR: 27.8398 dB
ISTA Iteration 10/10, Current PSNR: 27.8403 dB
Cartesian Mask: ZF PSNR=25.34, ISTA PSNR=27.84, ZF SSIM=0.5538, ISTA SSIM=0.7182, Time=0.11s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.3721 dB
ISTA Iteration 2/10, Current PSNR: 25.7723 dB
ISTA Iteration 3/10, Current PSNR: 25.9222 dB
ISTA Iteration 4/10, Current PSNR: 25.9826 dB
ISTA Iteration 5/10, Current PSNR: 26.0090 dB
ISTA Iteration 6/10, Current PSNR: 26.0212 dB
ISTA Iteration 7/10, Current PSNR: 26.0270 dB
ISTA Iteration 8/10, Current PSNR: 26.0299 dB
ISTA Iteration 9/10, Current PSNR: 26.0313 dB
ISTA Iteration 10/10, Current PSNR: 26.0320 dB
Random 2D Mask: ZF PSNR=23.25, ISTA PSNR=26.03, ZF SSIM=0.3123, ISTA SSIM=0.5658, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.4500 dB
ISTA Iteration 2/10, Current PSNR: 36.4501 dB
ISTA Iteration 3/10, Current PSNR: 36.4501 dB
ISTA Iteration 4/10, Current PSNR: 36.4501 dB
ISTA Iteration 5/10, Current PSNR: 36.4501 dB
ISTA Iteration 6/10, Current PSNR: 36.4501 dB
ISTA Iteration 7/10, Current PSNR: 36.4501 dB
ISTA Iteration 8/10, Current PSNR: 36.4501 dB
ISTA Iteration 9/10, Current PSNR: 36.4501 dB
ISTA Iteration 10/10, Current PSNR: 36.4501 dB
Variable Density Mask: ZF PSNR=36.20, ISTA PSNR=36.45, ZF SSIM=0.9481, ISTA SSIM=0.9721, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3579 dB
ISTA Iteration 2/10, Current PSNR: 36.3585 dB
ISTA Iteration 3/10, Current PSNR: 36.3587 dB
ISTA Iteration 4/10, Current PSNR: 36.3587 dB
ISTA Iteration 5/10, Current PSNR: 36.3588 dB
ISTA Iteration 6/10, Current PSNR: 36.3588 dB
ISTA Iteration 7/10, Current PSNR: 36.3588 dB
ISTA Iteration 8/10, Current PSNR: 36.3588 dB
ISTA Iteration 9/10, Current PSNR: 36.3588 dB
ISTA Iteration 10/10, Current PSNR: 36.3588 dB
Edge-Enhanced Mask: ZF PSNR=34.62, ISTA PSNR=36.36, ZF SSIM=0.7233, ISTA SSIM=0.9200, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5745 dB
ISTA Iteration 2/10, Current PSNR: 27.8995 dB
ISTA Iteration 3/10, Current PSNR: 28.0172 dB
ISTA Iteration 4/10, Current PSNR: 28.0634 dB
ISTA Iteration 5/10, Current PSNR: 28.0832 dB
ISTA Iteration 6/10, Current PSNR: 28.0923 dB
ISTA Iteration 7/10, Current PSNR: 28.0966 dB
ISTA Iteration 8/10, Current PSNR: 28.0987 dB
ISTA Iteration 9/10, Current PSNR: 28.0998 dB
ISTA Iteration 10/10, Current PSNR: 28.1003 dB
Cartesian Mask: ZF PSNR=25.54, ISTA PSNR=28.10, ZF SSIM=0.5585, ISTA SSIM=0.7242, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.5458 dB
ISTA Iteration 2/10, Current PSNR: 25.9442 dB
ISTA Iteration 3/10, Current PSNR: 26.0933 dB
ISTA Iteration 4/10, Current PSNR: 26.1533 dB
ISTA Iteration 5/10, Current PSNR: 26.1795 dB
ISTA Iteration 6/10, Current PSNR: 26.1916 dB
ISTA Iteration 7/10, Current PSNR: 26.1974 dB
ISTA Iteration 8/10, Current PSNR: 26.2002 dB
ISTA Iteration 9/10, Current PSNR: 26.2016 dB
ISTA Iteration 10/10, Current PSNR: 26.2023 dB
Random 2D Mask: ZF PSNR=23.42, ISTA PSNR=26.20, ZF SSIM=0.3151, ISTA SSIM=0.5744, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7561 dB
ISTA Iteration 2/10, Current PSNR: 36.7562 dB
ISTA Iteration 3/10, Current PSNR: 36.7562 dB
ISTA Iteration 4/10, Current PSNR: 36.7562 dB
ISTA Iteration 5/10, Current PSNR: 36.7562 dB
ISTA Iteration 6/10, Current PSNR: 36.7562 dB
ISTA Iteration 7/10, Current PSNR: 36.7562 dB
ISTA Iteration 8/10, Current PSNR: 36.7562 dB
ISTA Iteration 9/10, Current PSNR: 36.7562 dB
ISTA Iteration 10/10, Current PSNR: 36.7562 dB
Variable Density Mask: ZF PSNR=36.50, ISTA PSNR=36.76, ZF SSIM=0.9523, ISTA SSIM=0.9747, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.6266 dB
ISTA Iteration 2/10, Current PSNR: 36.6267 dB
ISTA Iteration 3/10, Current PSNR: 36.6267 dB
ISTA Iteration 4/10, Current PSNR: 36.6267 dB
ISTA Iteration 5/10, Current PSNR: 36.6267 dB
ISTA Iteration 6/10, Current PSNR: 36.6267 dB
ISTA Iteration 7/10, Current PSNR: 36.6267 dB
ISTA Iteration 8/10, Current PSNR: 36.6267 dB
ISTA Iteration 9/10, Current PSNR: 36.6267 dB
ISTA Iteration 10/10, Current PSNR: 36.6267 dB
Edge-Enhanced Mask: ZF PSNR=34.96, ISTA PSNR=36.63, ZF SSIM=0.7401, ISTA SSIM=0.9255, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0195_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0195_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3936.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8669 dB
ISTA Iteration 2/10, Current PSNR: 27.2156 dB
ISTA Iteration 3/10, Current PSNR: 27.3427 dB
ISTA Iteration 4/10, Current PSNR: 27.3929 dB
ISTA Iteration 5/10, Current PSNR: 27.4145 dB
ISTA Iteration 6/10, Current PSNR: 27.4244 dB
ISTA Iteration 7/10, Current PSNR: 27.4292 dB
ISTA Iteration 8/10, Current PSNR: 27.4315 dB
ISTA Iteration 9/10, Current PSNR: 27.4326 dB
ISTA Iteration 10/10, Current PSNR: 27.4332 dB
Cartesian Mask: ZF PSNR=24.93, ISTA PSNR=27.43, ZF SSIM=0.5705, ISTA SSIM=0.7066, Time=0.11s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6316 dB
ISTA Iteration 2/10, Current PSNR: 25.0347 dB
ISTA Iteration 3/10, Current PSNR: 25.1855 dB
ISTA Iteration 4/10, Current PSNR: 25.2462 dB
ISTA Iteration 5/10, Current PSNR: 25.2727 dB
ISTA Iteration 6/10, Current PSNR: 25.2849 dB
ISTA Iteration 7/10, Current PSNR: 25.2908 dB
ISTA Iteration 8/10, Current PSNR: 25.2937 dB
ISTA Iteration 9/10, Current PSNR: 25.2951 dB
ISTA Iteration 10/10, Current PSNR: 25.2958 dB
Random 2D Mask: ZF PSNR=22.68, ISTA PSNR=25.30, ZF SSIM=0.3049, ISTA SSIM=0.5408, Time=0.14s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7491 dB
ISTA Iteration 2/10, Current PSNR: 36.7491 dB
ISTA Iteration 3/10, Current PSNR: 36.7491 dB
ISTA Iteration 4/10, Current PSNR: 36.7491 dB
ISTA Iteration 5/10, Current PSNR: 36.7491 dB
ISTA Iteration 6/10, Current PSNR: 36.7491 dB
ISTA Iteration 7/10, Current PSNR: 36.7491 dB
ISTA Iteration 8/10, Current PSNR: 36.7491 dB
ISTA Iteration 9/10, Current PSNR: 36.7491 dB
ISTA Iteration 10/10, Current PSNR: 36.7491 dB
Variable Density Mask: ZF PSNR=36.59, ISTA PSNR=36.75, ZF SSIM=0.9608, ISTA SSIM=0.9774, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.9344 dB
ISTA Iteration 2/10, Current PSNR: 35.9344 dB
ISTA Iteration 3/10, Current PSNR: 35.9344 dB
ISTA Iteration 4/10, Current PSNR: 35.9344 dB
ISTA Iteration 5/10, Current PSNR: 35.9344 dB
ISTA Iteration 6/10, Current PSNR: 35.9344 dB
ISTA Iteration 7/10, Current PSNR: 35.9344 dB
ISTA Iteration 8/10, Current PSNR: 35.9344 dB
ISTA Iteration 9/10, Current PSNR: 35.9344 dB
ISTA Iteration 10/10, Current PSNR: 35.9344 dB
Edge-Enhanced Mask: ZF PSNR=33.43, ISTA PSNR=35.93, ZF SSIM=0.6509, ISTA SSIM=0.8905, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.6249 dB
ISTA Iteration 2/10, Current PSNR: 26.9726 dB
ISTA Iteration 3/10, Current PSNR: 27.0998 dB
ISTA Iteration 4/10, Current PSNR: 27.1501 dB
ISTA Iteration 5/10, Current PSNR: 27.1719 dB
ISTA Iteration 6/10, Current PSNR: 27.1819 dB
ISTA Iteration 7/10, Current PSNR: 27.1866 dB
ISTA Iteration 8/10, Current PSNR: 27.1890 dB
ISTA Iteration 9/10, Current PSNR: 27.1901 dB
ISTA Iteration 10/10, Current PSNR: 27.1907 dB
Cartesian Mask: ZF PSNR=24.71, ISTA PSNR=27.19, ZF SSIM=0.5671, ISTA SSIM=0.7035, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.4480 dB
ISTA Iteration 2/10, Current PSNR: 24.8487 dB
ISTA Iteration 3/10, Current PSNR: 24.9985 dB
ISTA Iteration 4/10, Current PSNR: 25.0587 dB
ISTA Iteration 5/10, Current PSNR: 25.0850 dB
ISTA Iteration 6/10, Current PSNR: 25.0972 dB
ISTA Iteration 7/10, Current PSNR: 25.1030 dB
ISTA Iteration 8/10, Current PSNR: 25.1059 dB
ISTA Iteration 9/10, Current PSNR: 25.1073 dB
ISTA Iteration 10/10, Current PSNR: 25.1080 dB
Random 2D Mask: ZF PSNR=22.50, ISTA PSNR=25.11, ZF SSIM=0.3018, ISTA SSIM=0.5370, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3247 dB
ISTA Iteration 2/10, Current PSNR: 36.3247 dB
ISTA Iteration 3/10, Current PSNR: 36.3247 dB
ISTA Iteration 4/10, Current PSNR: 36.3247 dB
ISTA Iteration 5/10, Current PSNR: 36.3247 dB
ISTA Iteration 6/10, Current PSNR: 36.3247 dB
ISTA Iteration 7/10, Current PSNR: 36.3247 dB
ISTA Iteration 8/10, Current PSNR: 36.3247 dB
ISTA Iteration 9/10, Current PSNR: 36.3247 dB
ISTA Iteration 10/10, Current PSNR: 36.3247 dB
Variable Density Mask: ZF PSNR=36.17, ISTA PSNR=36.32, ZF SSIM=0.9579, ISTA SSIM=0.9757, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.5792 dB
ISTA Iteration 2/10, Current PSNR: 35.5792 dB
ISTA Iteration 3/10, Current PSNR: 35.5792 dB
ISTA Iteration 4/10, Current PSNR: 35.5792 dB
ISTA Iteration 5/10, Current PSNR: 35.5792 dB
ISTA Iteration 6/10, Current PSNR: 35.5792 dB
ISTA Iteration 7/10, Current PSNR: 35.5792 dB
ISTA Iteration 8/10, Current PSNR: 35.5792 dB
ISTA Iteration 9/10, Current PSNR: 35.5792 dB
ISTA Iteration 10/10, Current PSNR: 35.5792 dB
Edge-Enhanced Mask: ZF PSNR=33.10, ISTA PSNR=35.58, ZF SSIM=0.6411, ISTA SSIM=0.8864, Time=0.12s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.5987 dB
ISTA Iteration 2/10, Current PSNR: 26.9380 dB
ISTA Iteration 3/10, Current PSNR: 27.0628 dB
ISTA Iteration 4/10, Current PSNR: 27.1125 dB
ISTA Iteration 5/10, Current PSNR: 27.1340 dB
ISTA Iteration 6/10, Current PSNR: 27.1439 dB
ISTA Iteration 7/10, Current PSNR: 27.1486 dB
ISTA Iteration 8/10, Current PSNR: 27.1509 dB
ISTA Iteration 9/10, Current PSNR: 27.1521 dB
ISTA Iteration 10/10, Current PSNR: 27.1526 dB
Cartesian Mask: ZF PSNR=24.71, ISTA PSNR=27.15, ZF SSIM=0.5655, ISTA SSIM=0.7008, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.4551 dB
ISTA Iteration 2/10, Current PSNR: 24.8494 dB
ISTA Iteration 3/10, Current PSNR: 24.9964 dB
ISTA Iteration 4/10, Current PSNR: 25.0554 dB
ISTA Iteration 5/10, Current PSNR: 25.0811 dB
ISTA Iteration 6/10, Current PSNR: 25.0930 dB
ISTA Iteration 7/10, Current PSNR: 25.0987 dB
ISTA Iteration 8/10, Current PSNR: 25.1015 dB
ISTA Iteration 9/10, Current PSNR: 25.1029 dB
ISTA Iteration 10/10, Current PSNR: 25.1036 dB
Random 2D Mask: ZF PSNR=22.51, ISTA PSNR=25.10, ZF SSIM=0.3028, ISTA SSIM=0.5347, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.6040 dB
ISTA Iteration 2/10, Current PSNR: 36.6040 dB
ISTA Iteration 3/10, Current PSNR: 36.6041 dB
ISTA Iteration 4/10, Current PSNR: 36.6041 dB
ISTA Iteration 5/10, Current PSNR: 36.6041 dB
ISTA Iteration 6/10, Current PSNR: 36.6041 dB
ISTA Iteration 7/10, Current PSNR: 36.6041 dB
ISTA Iteration 8/10, Current PSNR: 36.6041 dB
ISTA Iteration 9/10, Current PSNR: 36.6041 dB
ISTA Iteration 10/10, Current PSNR: 36.6041 dB
Variable Density Mask: ZF PSNR=36.44, ISTA PSNR=36.60, ZF SSIM=0.9585, ISTA SSIM=0.9765, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2169 dB
ISTA Iteration 2/10, Current PSNR: 36.2169 dB
ISTA Iteration 3/10, Current PSNR: 36.2169 dB
ISTA Iteration 4/10, Current PSNR: 36.2169 dB
ISTA Iteration 5/10, Current PSNR: 36.2169 dB
ISTA Iteration 6/10, Current PSNR: 36.2169 dB
ISTA Iteration 7/10, Current PSNR: 36.2169 dB
ISTA Iteration 8/10, Current PSNR: 36.2169 dB
ISTA Iteration 9/10, Current PSNR: 36.2169 dB
ISTA Iteration 10/10, Current PSNR: 36.2169 dB
Edge-Enhanced Mask: ZF PSNR=34.28, ISTA PSNR=36.22, ZF SSIM=0.7058, ISTA SSIM=0.9121, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9506 dB
ISTA Iteration 2/10, Current PSNR: 27.2829 dB
ISTA Iteration 3/10, Current PSNR: 27.4046 dB
ISTA Iteration 4/10, Current PSNR: 27.4530 dB
ISTA Iteration 5/10, Current PSNR: 27.4739 dB
ISTA Iteration 6/10, Current PSNR: 27.4836 dB
ISTA Iteration 7/10, Current PSNR: 27.4882 dB
ISTA Iteration 8/10, Current PSNR: 27.4904 dB
ISTA Iteration 9/10, Current PSNR: 27.4916 dB
ISTA Iteration 10/10, Current PSNR: 27.4921 dB
Cartesian Mask: ZF PSNR=25.09, ISTA PSNR=27.49, ZF SSIM=0.5674, ISTA SSIM=0.7020, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.9125 dB
ISTA Iteration 2/10, Current PSNR: 25.3097 dB
ISTA Iteration 3/10, Current PSNR: 25.4578 dB
ISTA Iteration 4/10, Current PSNR: 25.5172 dB
ISTA Iteration 5/10, Current PSNR: 25.5431 dB
ISTA Iteration 6/10, Current PSNR: 25.5550 dB
ISTA Iteration 7/10, Current PSNR: 25.5607 dB
ISTA Iteration 8/10, Current PSNR: 25.5635 dB
ISTA Iteration 9/10, Current PSNR: 25.5649 dB
ISTA Iteration 10/10, Current PSNR: 25.5656 dB
Random 2D Mask: ZF PSNR=22.96, ISTA PSNR=25.57, ZF SSIM=0.3111, ISTA SSIM=0.5421, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.0706 dB
ISTA Iteration 2/10, Current PSNR: 37.0707 dB
ISTA Iteration 3/10, Current PSNR: 37.0708 dB
ISTA Iteration 4/10, Current PSNR: 37.0708 dB
ISTA Iteration 5/10, Current PSNR: 37.0708 dB
ISTA Iteration 6/10, Current PSNR: 37.0708 dB
ISTA Iteration 7/10, Current PSNR: 37.0708 dB
ISTA Iteration 8/10, Current PSNR: 37.0708 dB
ISTA Iteration 9/10, Current PSNR: 37.0708 dB
ISTA Iteration 10/10, Current PSNR: 37.0708 dB
Variable Density Mask: ZF PSNR=36.91, ISTA PSNR=37.07, ZF SSIM=0.9605, ISTA SSIM=0.9766, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.6460 dB
ISTA Iteration 2/10, Current PSNR: 36.6460 dB
ISTA Iteration 3/10, Current PSNR: 36.6460 dB
ISTA Iteration 4/10, Current PSNR: 36.6460 dB
ISTA Iteration 5/10, Current PSNR: 36.6460 dB
ISTA Iteration 6/10, Current PSNR: 36.6460 dB
ISTA Iteration 7/10, Current PSNR: 36.6460 dB
ISTA Iteration 8/10, Current PSNR: 36.6460 dB
ISTA Iteration 9/10, Current PSNR: 36.6460 dB
ISTA Iteration 10/10, Current PSNR: 36.6460 dB
Edge-Enhanced Mask: ZF PSNR=34.52, ISTA PSNR=36.65, ZF SSIM=0.6981, ISTA SSIM=0.9127, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.7679 dB
ISTA Iteration 2/10, Current PSNR: 27.0975 dB
ISTA Iteration 3/10, Current PSNR: 27.2176 dB
ISTA Iteration 4/10, Current PSNR: 27.2651 dB
ISTA Iteration 5/10, Current PSNR: 27.2856 dB
ISTA Iteration 6/10, Current PSNR: 27.2950 dB
ISTA Iteration 7/10, Current PSNR: 27.2995 dB
ISTA Iteration 8/10, Current PSNR: 27.3017 dB
ISTA Iteration 9/10, Current PSNR: 27.3027 dB
ISTA Iteration 10/10, Current PSNR: 27.3033 dB
Cartesian Mask: ZF PSNR=24.91, ISTA PSNR=27.30, ZF SSIM=0.5634, ISTA SSIM=0.6968, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.7833 dB
ISTA Iteration 2/10, Current PSNR: 25.1812 dB
ISTA Iteration 3/10, Current PSNR: 25.3294 dB
ISTA Iteration 4/10, Current PSNR: 25.3889 dB
ISTA Iteration 5/10, Current PSNR: 25.4147 dB
ISTA Iteration 6/10, Current PSNR: 25.4267 dB
ISTA Iteration 7/10, Current PSNR: 25.4324 dB
ISTA Iteration 8/10, Current PSNR: 25.4352 dB
ISTA Iteration 9/10, Current PSNR: 25.4366 dB
ISTA Iteration 10/10, Current PSNR: 25.4373 dB
Random 2D Mask: ZF PSNR=22.83, ISTA PSNR=25.44, ZF SSIM=0.3069, ISTA SSIM=0.5356, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.8869 dB
ISTA Iteration 2/10, Current PSNR: 36.8870 dB
ISTA Iteration 3/10, Current PSNR: 36.8870 dB
ISTA Iteration 4/10, Current PSNR: 36.8870 dB
ISTA Iteration 5/10, Current PSNR: 36.8870 dB
ISTA Iteration 6/10, Current PSNR: 36.8870 dB
ISTA Iteration 7/10, Current PSNR: 36.8870 dB
ISTA Iteration 8/10, Current PSNR: 36.8870 dB
ISTA Iteration 9/10, Current PSNR: 36.8870 dB
ISTA Iteration 10/10, Current PSNR: 36.8870 dB
Variable Density Mask: ZF PSNR=36.73, ISTA PSNR=36.89, ZF SSIM=0.9596, ISTA SSIM=0.9752, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3718 dB
ISTA Iteration 2/10, Current PSNR: 36.3719 dB
ISTA Iteration 3/10, Current PSNR: 36.3719 dB
ISTA Iteration 4/10, Current PSNR: 36.3719 dB
ISTA Iteration 5/10, Current PSNR: 36.3719 dB
ISTA Iteration 6/10, Current PSNR: 36.3719 dB
ISTA Iteration 7/10, Current PSNR: 36.3719 dB
ISTA Iteration 8/10, Current PSNR: 36.3719 dB
ISTA Iteration 9/10, Current PSNR: 36.3719 dB
ISTA Iteration 10/10, Current PSNR: 36.3719 dB
Edge-Enhanced Mask: ZF PSNR=34.23, ISTA PSNR=36.37, ZF SSIM=0.6874, ISTA SSIM=0.9090, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0205_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0205_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3646.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8228 dB
ISTA Iteration 2/10, Current PSNR: 27.1419 dB
ISTA Iteration 3/10, Current PSNR: 27.2576 dB
ISTA Iteration 4/10, Current PSNR: 27.3033 dB
ISTA Iteration 5/10, Current PSNR: 27.3230 dB
ISTA Iteration 6/10, Current PSNR: 27.3320 dB
ISTA Iteration 7/10, Current PSNR: 27.3364 dB
ISTA Iteration 8/10, Current PSNR: 27.3385 dB
ISTA Iteration 9/10, Current PSNR: 27.3395 dB
ISTA Iteration 10/10, Current PSNR: 27.3400 dB
Cartesian Mask: ZF PSNR=25.27, ISTA PSNR=27.34, ZF SSIM=0.5502, ISTA SSIM=0.7008, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0056 dB
ISTA Iteration 2/10, Current PSNR: 25.3480 dB
ISTA Iteration 3/10, Current PSNR: 25.4729 dB
ISTA Iteration 4/10, Current PSNR: 25.5225 dB
ISTA Iteration 5/10, Current PSNR: 25.5439 dB
ISTA Iteration 6/10, Current PSNR: 25.5537 dB
ISTA Iteration 7/10, Current PSNR: 25.5585 dB
ISTA Iteration 8/10, Current PSNR: 25.5608 dB
ISTA Iteration 9/10, Current PSNR: 25.5619 dB
ISTA Iteration 10/10, Current PSNR: 25.5625 dB
Random 2D Mask: ZF PSNR=23.41, ISTA PSNR=25.56, ZF SSIM=0.3616, ISTA SSIM=0.5699, Time=0.15s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.3088 dB
ISTA Iteration 2/10, Current PSNR: 34.3088 dB
ISTA Iteration 3/10, Current PSNR: 34.3089 dB
ISTA Iteration 4/10, Current PSNR: 34.3089 dB
ISTA Iteration 5/10, Current PSNR: 34.3089 dB
ISTA Iteration 6/10, Current PSNR: 34.3089 dB
ISTA Iteration 7/10, Current PSNR: 34.3089 dB
ISTA Iteration 8/10, Current PSNR: 34.3089 dB
ISTA Iteration 9/10, Current PSNR: 34.3089 dB
ISTA Iteration 10/10, Current PSNR: 34.3089 dB
Variable Density Mask: ZF PSNR=34.20, ISTA PSNR=34.31, ZF SSIM=0.9411, ISTA SSIM=0.9618, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.0150 dB
ISTA Iteration 2/10, Current PSNR: 34.0151 dB
ISTA Iteration 3/10, Current PSNR: 34.0151 dB
ISTA Iteration 4/10, Current PSNR: 34.0151 dB
ISTA Iteration 5/10, Current PSNR: 34.0151 dB
ISTA Iteration 6/10, Current PSNR: 34.0151 dB
ISTA Iteration 7/10, Current PSNR: 34.0151 dB
ISTA Iteration 8/10, Current PSNR: 34.0151 dB
ISTA Iteration 9/10, Current PSNR: 34.0151 dB
ISTA Iteration 10/10, Current PSNR: 34.0151 dB
Edge-Enhanced Mask: ZF PSNR=32.65, ISTA PSNR=34.02, ZF SSIM=0.7053, ISTA SSIM=0.8806, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.0266 dB
ISTA Iteration 2/10, Current PSNR: 26.3446 dB
ISTA Iteration 3/10, Current PSNR: 26.4598 dB
ISTA Iteration 4/10, Current PSNR: 26.5052 dB
ISTA Iteration 5/10, Current PSNR: 26.5247 dB
ISTA Iteration 6/10, Current PSNR: 26.5336 dB
ISTA Iteration 7/10, Current PSNR: 26.5379 dB
ISTA Iteration 8/10, Current PSNR: 26.5400 dB
ISTA Iteration 9/10, Current PSNR: 26.5410 dB
ISTA Iteration 10/10, Current PSNR: 26.5415 dB
Cartesian Mask: ZF PSNR=24.48, ISTA PSNR=26.54, ZF SSIM=0.5362, ISTA SSIM=0.6851, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.3054 dB
ISTA Iteration 2/10, Current PSNR: 24.6515 dB
ISTA Iteration 3/10, Current PSNR: 24.7780 dB
ISTA Iteration 4/10, Current PSNR: 24.8283 dB
ISTA Iteration 5/10, Current PSNR: 24.8500 dB
ISTA Iteration 6/10, Current PSNR: 24.8600 dB
ISTA Iteration 7/10, Current PSNR: 24.8648 dB
ISTA Iteration 8/10, Current PSNR: 24.8671 dB
ISTA Iteration 9/10, Current PSNR: 24.8683 dB
ISTA Iteration 10/10, Current PSNR: 24.8689 dB
Random 2D Mask: ZF PSNR=22.69, ISTA PSNR=24.87, ZF SSIM=0.3474, ISTA SSIM=0.5530, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.2860 dB
ISTA Iteration 2/10, Current PSNR: 33.2860 dB
ISTA Iteration 3/10, Current PSNR: 33.2861 dB
ISTA Iteration 4/10, Current PSNR: 33.2861 dB
ISTA Iteration 5/10, Current PSNR: 33.2861 dB
ISTA Iteration 6/10, Current PSNR: 33.2861 dB
ISTA Iteration 7/10, Current PSNR: 33.2861 dB
ISTA Iteration 8/10, Current PSNR: 33.2861 dB
ISTA Iteration 9/10, Current PSNR: 33.2861 dB
ISTA Iteration 10/10, Current PSNR: 33.2861 dB
Variable Density Mask: ZF PSNR=33.18, ISTA PSNR=33.29, ZF SSIM=0.9326, ISTA SSIM=0.9568, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 32.8186 dB
ISTA Iteration 2/10, Current PSNR: 32.8191 dB
ISTA Iteration 3/10, Current PSNR: 32.8192 dB
ISTA Iteration 4/10, Current PSNR: 32.8193 dB
ISTA Iteration 5/10, Current PSNR: 32.8193 dB
ISTA Iteration 6/10, Current PSNR: 32.8193 dB
ISTA Iteration 7/10, Current PSNR: 32.8193 dB
ISTA Iteration 8/10, Current PSNR: 32.8193 dB
ISTA Iteration 9/10, Current PSNR: 32.8193 dB
ISTA Iteration 10/10, Current PSNR: 32.8193 dB
Edge-Enhanced Mask: ZF PSNR=31.33, ISTA PSNR=32.82, ZF SSIM=0.6583, ISTA SSIM=0.8506, Time=0.12s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.1639 dB
ISTA Iteration 2/10, Current PSNR: 26.4873 dB
ISTA Iteration 3/10, Current PSNR: 26.6048 dB
ISTA Iteration 4/10, Current PSNR: 26.6513 dB
ISTA Iteration 5/10, Current PSNR: 26.6713 dB
ISTA Iteration 6/10, Current PSNR: 26.6805 dB
ISTA Iteration 7/10, Current PSNR: 26.6849 dB
ISTA Iteration 8/10, Current PSNR: 26.6870 dB
ISTA Iteration 9/10, Current PSNR: 26.6881 dB
ISTA Iteration 10/10, Current PSNR: 26.6886 dB
Cartesian Mask: ZF PSNR=24.60, ISTA PSNR=26.69, ZF SSIM=0.5393, ISTA SSIM=0.6877, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.3651 dB
ISTA Iteration 2/10, Current PSNR: 24.7102 dB
ISTA Iteration 3/10, Current PSNR: 24.8366 dB
ISTA Iteration 4/10, Current PSNR: 24.8868 dB
ISTA Iteration 5/10, Current PSNR: 24.9085 dB
ISTA Iteration 6/10, Current PSNR: 24.9185 dB
ISTA Iteration 7/10, Current PSNR: 24.9233 dB
ISTA Iteration 8/10, Current PSNR: 24.9256 dB
ISTA Iteration 9/10, Current PSNR: 24.9268 dB
ISTA Iteration 10/10, Current PSNR: 24.9274 dB
Random 2D Mask: ZF PSNR=22.75, ISTA PSNR=24.93, ZF SSIM=0.3462, ISTA SSIM=0.5518, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.5748 dB
ISTA Iteration 2/10, Current PSNR: 33.5748 dB
ISTA Iteration 3/10, Current PSNR: 33.5748 dB
ISTA Iteration 4/10, Current PSNR: 33.5748 dB
ISTA Iteration 5/10, Current PSNR: 33.5748 dB
ISTA Iteration 6/10, Current PSNR: 33.5748 dB
ISTA Iteration 7/10, Current PSNR: 33.5748 dB
ISTA Iteration 8/10, Current PSNR: 33.5748 dB
ISTA Iteration 9/10, Current PSNR: 33.5748 dB
ISTA Iteration 10/10, Current PSNR: 33.5748 dB
Variable Density Mask: ZF PSNR=33.47, ISTA PSNR=33.57, ZF SSIM=0.9364, ISTA SSIM=0.9604, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.0620 dB
ISTA Iteration 2/10, Current PSNR: 33.0626 dB
ISTA Iteration 3/10, Current PSNR: 33.0628 dB
ISTA Iteration 4/10, Current PSNR: 33.0629 dB
ISTA Iteration 5/10, Current PSNR: 33.0629 dB
ISTA Iteration 6/10, Current PSNR: 33.0629 dB
ISTA Iteration 7/10, Current PSNR: 33.0629 dB
ISTA Iteration 8/10, Current PSNR: 33.0629 dB
ISTA Iteration 9/10, Current PSNR: 33.0629 dB
ISTA Iteration 10/10, Current PSNR: 33.0629 dB
Edge-Enhanced Mask: ZF PSNR=31.56, ISTA PSNR=33.06, ZF SSIM=0.6658, ISTA SSIM=0.8560, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.4206 dB
ISTA Iteration 2/10, Current PSNR: 26.7586 dB
ISTA Iteration 3/10, Current PSNR: 26.8817 dB
ISTA Iteration 4/10, Current PSNR: 26.9303 dB
ISTA Iteration 5/10, Current PSNR: 26.9512 dB
ISTA Iteration 6/10, Current PSNR: 26.9608 dB
ISTA Iteration 7/10, Current PSNR: 26.9654 dB
ISTA Iteration 8/10, Current PSNR: 26.9677 dB
ISTA Iteration 9/10, Current PSNR: 26.9688 dB
ISTA Iteration 10/10, Current PSNR: 26.9693 dB
Cartesian Mask: ZF PSNR=24.78, ISTA PSNR=26.97, ZF SSIM=0.5419, ISTA SSIM=0.6923, Time=0.11s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.4624 dB
ISTA Iteration 2/10, Current PSNR: 24.8009 dB
ISTA Iteration 3/10, Current PSNR: 24.9246 dB
ISTA Iteration 4/10, Current PSNR: 24.9736 dB
ISTA Iteration 5/10, Current PSNR: 24.9948 dB
ISTA Iteration 6/10, Current PSNR: 25.0046 dB
ISTA Iteration 7/10, Current PSNR: 25.0092 dB
ISTA Iteration 8/10, Current PSNR: 25.0115 dB
ISTA Iteration 9/10, Current PSNR: 25.0126 dB
ISTA Iteration 10/10, Current PSNR: 25.0132 dB
Random 2D Mask: ZF PSNR=22.87, ISTA PSNR=25.01, ZF SSIM=0.3494, ISTA SSIM=0.5537, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.8560 dB
ISTA Iteration 2/10, Current PSNR: 33.8560 dB
ISTA Iteration 3/10, Current PSNR: 33.8560 dB
ISTA Iteration 4/10, Current PSNR: 33.8560 dB
ISTA Iteration 5/10, Current PSNR: 33.8560 dB
ISTA Iteration 6/10, Current PSNR: 33.8560 dB
ISTA Iteration 7/10, Current PSNR: 33.8560 dB
ISTA Iteration 8/10, Current PSNR: 33.8560 dB
ISTA Iteration 9/10, Current PSNR: 33.8560 dB
ISTA Iteration 10/10, Current PSNR: 33.8560 dB
Variable Density Mask: ZF PSNR=33.75, ISTA PSNR=33.86, ZF SSIM=0.9403, ISTA SSIM=0.9624, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.4937 dB
ISTA Iteration 2/10, Current PSNR: 33.4938 dB
ISTA Iteration 3/10, Current PSNR: 33.4938 dB
ISTA Iteration 4/10, Current PSNR: 33.4938 dB
ISTA Iteration 5/10, Current PSNR: 33.4938 dB
ISTA Iteration 6/10, Current PSNR: 33.4938 dB
ISTA Iteration 7/10, Current PSNR: 33.4938 dB
ISTA Iteration 8/10, Current PSNR: 33.4938 dB
ISTA Iteration 9/10, Current PSNR: 33.4938 dB
ISTA Iteration 10/10, Current PSNR: 33.4938 dB
Edge-Enhanced Mask: ZF PSNR=32.01, ISTA PSNR=33.49, ZF SSIM=0.6798, ISTA SSIM=0.8681, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.6137 dB
ISTA Iteration 2/10, Current PSNR: 26.9559 dB
ISTA Iteration 3/10, Current PSNR: 27.0797 dB
ISTA Iteration 4/10, Current PSNR: 27.1283 dB
ISTA Iteration 5/10, Current PSNR: 27.1491 dB
ISTA Iteration 6/10, Current PSNR: 27.1586 dB
ISTA Iteration 7/10, Current PSNR: 27.1632 dB
ISTA Iteration 8/10, Current PSNR: 27.1654 dB
ISTA Iteration 9/10, Current PSNR: 27.1665 dB
ISTA Iteration 10/10, Current PSNR: 27.1670 dB
Cartesian Mask: ZF PSNR=24.94, ISTA PSNR=27.17, ZF SSIM=0.5426, ISTA SSIM=0.6948, Time=0.11s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.5734 dB
ISTA Iteration 2/10, Current PSNR: 24.9033 dB
ISTA Iteration 3/10, Current PSNR: 25.0238 dB
ISTA Iteration 4/10, Current PSNR: 25.0716 dB
ISTA Iteration 5/10, Current PSNR: 25.0923 dB
ISTA Iteration 6/10, Current PSNR: 25.1018 dB
ISTA Iteration 7/10, Current PSNR: 25.1064 dB
ISTA Iteration 8/10, Current PSNR: 25.1086 dB
ISTA Iteration 9/10, Current PSNR: 25.1097 dB
ISTA Iteration 10/10, Current PSNR: 25.1102 dB
Random 2D Mask: ZF PSNR=23.01, ISTA PSNR=25.11, ZF SSIM=0.3526, ISTA SSIM=0.5567, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.9956 dB
ISTA Iteration 2/10, Current PSNR: 33.9956 dB
ISTA Iteration 3/10, Current PSNR: 33.9956 dB
ISTA Iteration 4/10, Current PSNR: 33.9956 dB
ISTA Iteration 5/10, Current PSNR: 33.9956 dB
ISTA Iteration 6/10, Current PSNR: 33.9956 dB
ISTA Iteration 7/10, Current PSNR: 33.9956 dB
ISTA Iteration 8/10, Current PSNR: 33.9956 dB
ISTA Iteration 9/10, Current PSNR: 33.9956 dB
ISTA Iteration 10/10, Current PSNR: 33.9956 dB
Variable Density Mask: ZF PSNR=33.89, ISTA PSNR=34.00, ZF SSIM=0.9399, ISTA SSIM=0.9619, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.4369 dB
ISTA Iteration 2/10, Current PSNR: 33.4369 dB
ISTA Iteration 3/10, Current PSNR: 33.4369 dB
ISTA Iteration 4/10, Current PSNR: 33.4370 dB
ISTA Iteration 5/10, Current PSNR: 33.4370 dB
ISTA Iteration 6/10, Current PSNR: 33.4370 dB
ISTA Iteration 7/10, Current PSNR: 33.4370 dB
ISTA Iteration 8/10, Current PSNR: 33.4370 dB
ISTA Iteration 9/10, Current PSNR: 33.4370 dB
ISTA Iteration 10/10, Current PSNR: 33.4370 dB
Edge-Enhanced Mask: ZF PSNR=31.83, ISTA PSNR=33.44, ZF SSIM=0.6684, ISTA SSIM=0.8584, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0211_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0211_MR1_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 3960.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0991 dB
ISTA Iteration 2/10, Current PSNR: 27.3743 dB
ISTA Iteration 3/10, Current PSNR: 27.4712 dB
ISTA Iteration 4/10, Current PSNR: 27.5086 dB
ISTA Iteration 5/10, Current PSNR: 27.5244 dB
ISTA Iteration 6/10, Current PSNR: 27.5315 dB
ISTA Iteration 7/10, Current PSNR: 27.5349 dB
ISTA Iteration 8/10, Current PSNR: 27.5366 dB
ISTA Iteration 9/10, Current PSNR: 27.5374 dB
ISTA Iteration 10/10, Current PSNR: 27.5378 dB
Cartesian Mask: ZF PSNR=25.44, ISTA PSNR=27.54, ZF SSIM=0.5508, ISTA SSIM=0.7176, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0608 dB
ISTA Iteration 2/10, Current PSNR: 25.4318 dB
ISTA Iteration 3/10, Current PSNR: 25.5671 dB
ISTA Iteration 4/10, Current PSNR: 25.6205 dB
ISTA Iteration 5/10, Current PSNR: 25.6434 dB
ISTA Iteration 6/10, Current PSNR: 25.6539 dB
ISTA Iteration 7/10, Current PSNR: 25.6589 dB
ISTA Iteration 8/10, Current PSNR: 25.6614 dB
ISTA Iteration 9/10, Current PSNR: 25.6626 dB
ISTA Iteration 10/10, Current PSNR: 25.6632 dB
Random 2D Mask: ZF PSNR=23.19, ISTA PSNR=25.66, ZF SSIM=0.3368, ISTA SSIM=0.5863, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.9351 dB
ISTA Iteration 2/10, Current PSNR: 34.9351 dB
ISTA Iteration 3/10, Current PSNR: 34.9351 dB
ISTA Iteration 4/10, Current PSNR: 34.9351 dB
ISTA Iteration 5/10, Current PSNR: 34.9351 dB
ISTA Iteration 6/10, Current PSNR: 34.9351 dB
ISTA Iteration 7/10, Current PSNR: 34.9351 dB
ISTA Iteration 8/10, Current PSNR: 34.9351 dB
ISTA Iteration 9/10, Current PSNR: 34.9351 dB
ISTA Iteration 10/10, Current PSNR: 34.9351 dB
Variable Density Mask: ZF PSNR=34.75, ISTA PSNR=34.94, ZF SSIM=0.9431, ISTA SSIM=0.9668, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.0514 dB
ISTA Iteration 2/10, Current PSNR: 35.0514 dB
ISTA Iteration 3/10, Current PSNR: 35.0514 dB
ISTA Iteration 4/10, Current PSNR: 35.0514 dB
ISTA Iteration 5/10, Current PSNR: 35.0514 dB
ISTA Iteration 6/10, Current PSNR: 35.0514 dB
ISTA Iteration 7/10, Current PSNR: 35.0514 dB
ISTA Iteration 8/10, Current PSNR: 35.0514 dB
ISTA Iteration 9/10, Current PSNR: 35.0514 dB
ISTA Iteration 10/10, Current PSNR: 35.0514 dB
Edge-Enhanced Mask: ZF PSNR=33.46, ISTA PSNR=35.05, ZF SSIM=0.7101, ISTA SSIM=0.9024, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1551 dB
ISTA Iteration 2/10, Current PSNR: 27.4258 dB
ISTA Iteration 3/10, Current PSNR: 27.5213 dB
ISTA Iteration 4/10, Current PSNR: 27.5580 dB
ISTA Iteration 5/10, Current PSNR: 27.5736 dB
ISTA Iteration 6/10, Current PSNR: 27.5806 dB
ISTA Iteration 7/10, Current PSNR: 27.5840 dB
ISTA Iteration 8/10, Current PSNR: 27.5856 dB
ISTA Iteration 9/10, Current PSNR: 27.5864 dB
ISTA Iteration 10/10, Current PSNR: 27.5868 dB
Cartesian Mask: ZF PSNR=25.50, ISTA PSNR=27.59, ZF SSIM=0.5525, ISTA SSIM=0.7175, Time=0.11s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.1584 dB
ISTA Iteration 2/10, Current PSNR: 25.5314 dB
ISTA Iteration 3/10, Current PSNR: 25.6676 dB
ISTA Iteration 4/10, Current PSNR: 25.7213 dB
ISTA Iteration 5/10, Current PSNR: 25.7443 dB
ISTA Iteration 6/10, Current PSNR: 25.7549 dB
ISTA Iteration 7/10, Current PSNR: 25.7600 dB
ISTA Iteration 8/10, Current PSNR: 25.7624 dB
ISTA Iteration 9/10, Current PSNR: 25.7636 dB
ISTA Iteration 10/10, Current PSNR: 25.7642 dB
Random 2D Mask: ZF PSNR=23.28, ISTA PSNR=25.76, ZF SSIM=0.3384, ISTA SSIM=0.5877, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.7878 dB
ISTA Iteration 2/10, Current PSNR: 34.7878 dB
ISTA Iteration 3/10, Current PSNR: 34.7878 dB
ISTA Iteration 4/10, Current PSNR: 34.7878 dB
ISTA Iteration 5/10, Current PSNR: 34.7878 dB
ISTA Iteration 6/10, Current PSNR: 34.7878 dB
ISTA Iteration 7/10, Current PSNR: 34.7878 dB
ISTA Iteration 8/10, Current PSNR: 34.7878 dB
ISTA Iteration 9/10, Current PSNR: 34.7878 dB
ISTA Iteration 10/10, Current PSNR: 34.7878 dB
Variable Density Mask: ZF PSNR=34.62, ISTA PSNR=34.79, ZF SSIM=0.9410, ISTA SSIM=0.9633, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.8432 dB
ISTA Iteration 2/10, Current PSNR: 34.8432 dB
ISTA Iteration 3/10, Current PSNR: 34.8432 dB
ISTA Iteration 4/10, Current PSNR: 34.8432 dB
ISTA Iteration 5/10, Current PSNR: 34.8432 dB
ISTA Iteration 6/10, Current PSNR: 34.8432 dB
ISTA Iteration 7/10, Current PSNR: 34.8432 dB
ISTA Iteration 8/10, Current PSNR: 34.8432 dB
ISTA Iteration 9/10, Current PSNR: 34.8432 dB
ISTA Iteration 10/10, Current PSNR: 34.8432 dB
Edge-Enhanced Mask: ZF PSNR=33.38, ISTA PSNR=34.84, ZF SSIM=0.7109, ISTA SSIM=0.9007, Time=0.13s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.7760 dB
ISTA Iteration 2/10, Current PSNR: 27.0381 dB
ISTA Iteration 3/10, Current PSNR: 27.1300 dB
ISTA Iteration 4/10, Current PSNR: 27.1652 dB
ISTA Iteration 5/10, Current PSNR: 27.1801 dB
ISTA Iteration 6/10, Current PSNR: 27.1868 dB
ISTA Iteration 7/10, Current PSNR: 27.1900 dB
ISTA Iteration 8/10, Current PSNR: 27.1916 dB
ISTA Iteration 9/10, Current PSNR: 27.1923 dB
ISTA Iteration 10/10, Current PSNR: 27.1927 dB
Cartesian Mask: ZF PSNR=25.16, ISTA PSNR=27.19, ZF SSIM=0.5460, ISTA SSIM=0.7096, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.8079 dB
ISTA Iteration 2/10, Current PSNR: 25.1792 dB
ISTA Iteration 3/10, Current PSNR: 25.3149 dB
ISTA Iteration 4/10, Current PSNR: 25.3685 dB
ISTA Iteration 5/10, Current PSNR: 25.3915 dB
ISTA Iteration 6/10, Current PSNR: 25.4021 dB
ISTA Iteration 7/10, Current PSNR: 25.4071 dB
ISTA Iteration 8/10, Current PSNR: 25.4096 dB
ISTA Iteration 9/10, Current PSNR: 25.4108 dB
ISTA Iteration 10/10, Current PSNR: 25.4114 dB
Random 2D Mask: ZF PSNR=22.93, ISTA PSNR=25.41, ZF SSIM=0.3321, ISTA SSIM=0.5757, Time=0.13s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.7333 dB
ISTA Iteration 2/10, Current PSNR: 34.7333 dB
ISTA Iteration 3/10, Current PSNR: 34.7333 dB
ISTA Iteration 4/10, Current PSNR: 34.7333 dB
ISTA Iteration 5/10, Current PSNR: 34.7333 dB
ISTA Iteration 6/10, Current PSNR: 34.7333 dB
ISTA Iteration 7/10, Current PSNR: 34.7333 dB
ISTA Iteration 8/10, Current PSNR: 34.7333 dB
ISTA Iteration 9/10, Current PSNR: 34.7333 dB
ISTA Iteration 10/10, Current PSNR: 34.7333 dB
Variable Density Mask: ZF PSNR=34.56, ISTA PSNR=34.73, ZF SSIM=0.9407, ISTA SSIM=0.9636, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.6933 dB
ISTA Iteration 2/10, Current PSNR: 34.6934 dB
ISTA Iteration 3/10, Current PSNR: 34.6934 dB
ISTA Iteration 4/10, Current PSNR: 34.6934 dB
ISTA Iteration 5/10, Current PSNR: 34.6934 dB
ISTA Iteration 6/10, Current PSNR: 34.6934 dB
ISTA Iteration 7/10, Current PSNR: 34.6934 dB
ISTA Iteration 8/10, Current PSNR: 34.6934 dB
ISTA Iteration 9/10, Current PSNR: 34.6934 dB
ISTA Iteration 10/10, Current PSNR: 34.6934 dB
Edge-Enhanced Mask: ZF PSNR=33.19, ISTA PSNR=34.69, ZF SSIM=0.7038, ISTA SSIM=0.8965, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.5407 dB
ISTA Iteration 2/10, Current PSNR: 26.8038 dB
ISTA Iteration 3/10, Current PSNR: 26.8963 dB
ISTA Iteration 4/10, Current PSNR: 26.9319 dB
ISTA Iteration 5/10, Current PSNR: 26.9469 dB
ISTA Iteration 6/10, Current PSNR: 26.9537 dB
ISTA Iteration 7/10, Current PSNR: 26.9569 dB
ISTA Iteration 8/10, Current PSNR: 26.9585 dB
ISTA Iteration 9/10, Current PSNR: 26.9593 dB
ISTA Iteration 10/10, Current PSNR: 26.9597 dB
Cartesian Mask: ZF PSNR=24.95, ISTA PSNR=26.96, ZF SSIM=0.5426, ISTA SSIM=0.7025, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6135 dB
ISTA Iteration 2/10, Current PSNR: 24.9821 dB
ISTA Iteration 3/10, Current PSNR: 25.1168 dB
ISTA Iteration 4/10, Current PSNR: 25.1699 dB
ISTA Iteration 5/10, Current PSNR: 25.1928 dB
ISTA Iteration 6/10, Current PSNR: 25.2033 dB
ISTA Iteration 7/10, Current PSNR: 25.2083 dB
ISTA Iteration 8/10, Current PSNR: 25.2108 dB
ISTA Iteration 9/10, Current PSNR: 25.2120 dB
ISTA Iteration 10/10, Current PSNR: 25.2126 dB
Random 2D Mask: ZF PSNR=22.75, ISTA PSNR=25.21, ZF SSIM=0.3257, ISTA SSIM=0.5651, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.5621 dB
ISTA Iteration 2/10, Current PSNR: 34.5621 dB
ISTA Iteration 3/10, Current PSNR: 34.5621 dB
ISTA Iteration 4/10, Current PSNR: 34.5621 dB
ISTA Iteration 5/10, Current PSNR: 34.5621 dB
ISTA Iteration 6/10, Current PSNR: 34.5621 dB
ISTA Iteration 7/10, Current PSNR: 34.5621 dB
ISTA Iteration 8/10, Current PSNR: 34.5621 dB
ISTA Iteration 9/10, Current PSNR: 34.5621 dB
ISTA Iteration 10/10, Current PSNR: 34.5621 dB
Variable Density Mask: ZF PSNR=34.38, ISTA PSNR=34.56, ZF SSIM=0.9397, ISTA SSIM=0.9627, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.5366 dB
ISTA Iteration 2/10, Current PSNR: 34.5366 dB
ISTA Iteration 3/10, Current PSNR: 34.5366 dB
ISTA Iteration 4/10, Current PSNR: 34.5366 dB
ISTA Iteration 5/10, Current PSNR: 34.5366 dB
ISTA Iteration 6/10, Current PSNR: 34.5366 dB
ISTA Iteration 7/10, Current PSNR: 34.5366 dB
ISTA Iteration 8/10, Current PSNR: 34.5366 dB
ISTA Iteration 9/10, Current PSNR: 34.5366 dB
ISTA Iteration 10/10, Current PSNR: 34.5366 dB
Edge-Enhanced Mask: ZF PSNR=33.07, ISTA PSNR=34.54, ZF SSIM=0.7021, ISTA SSIM=0.8944, Time=0.12s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8926 dB
ISTA Iteration 2/10, Current PSNR: 27.1602 dB
ISTA Iteration 3/10, Current PSNR: 27.2546 dB
ISTA Iteration 4/10, Current PSNR: 27.2911 dB
ISTA Iteration 5/10, Current PSNR: 27.3065 dB
ISTA Iteration 6/10, Current PSNR: 27.3135 dB
ISTA Iteration 7/10, Current PSNR: 27.3168 dB
ISTA Iteration 8/10, Current PSNR: 27.3185 dB
ISTA Iteration 9/10, Current PSNR: 27.3193 dB
ISTA Iteration 10/10, Current PSNR: 27.3197 dB
Cartesian Mask: ZF PSNR=25.31, ISTA PSNR=27.32, ZF SSIM=0.5495, ISTA SSIM=0.7091, Time=0.11s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 25.0072 dB
ISTA Iteration 2/10, Current PSNR: 25.3773 dB
ISTA Iteration 3/10, Current PSNR: 25.5123 dB
ISTA Iteration 4/10, Current PSNR: 25.5655 dB
ISTA Iteration 5/10, Current PSNR: 25.5883 dB
ISTA Iteration 6/10, Current PSNR: 25.5988 dB
ISTA Iteration 7/10, Current PSNR: 25.6038 dB
ISTA Iteration 8/10, Current PSNR: 25.6062 dB
ISTA Iteration 9/10, Current PSNR: 25.6074 dB
ISTA Iteration 10/10, Current PSNR: 25.6080 dB
Random 2D Mask: ZF PSNR=23.13, ISTA PSNR=25.61, ZF SSIM=0.3336, ISTA SSIM=0.5742, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.8993 dB
ISTA Iteration 2/10, Current PSNR: 34.8993 dB
ISTA Iteration 3/10, Current PSNR: 34.8993 dB
ISTA Iteration 4/10, Current PSNR: 34.8993 dB
ISTA Iteration 5/10, Current PSNR: 34.8993 dB
ISTA Iteration 6/10, Current PSNR: 34.8993 dB
ISTA Iteration 7/10, Current PSNR: 34.8993 dB
ISTA Iteration 8/10, Current PSNR: 34.8993 dB
ISTA Iteration 9/10, Current PSNR: 34.8993 dB
ISTA Iteration 10/10, Current PSNR: 34.8993 dB
Variable Density Mask: ZF PSNR=34.73, ISTA PSNR=34.90, ZF SSIM=0.9441, ISTA SSIM=0.9645, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.8388 dB
ISTA Iteration 2/10, Current PSNR: 34.8390 dB
ISTA Iteration 3/10, Current PSNR: 34.8390 dB
ISTA Iteration 4/10, Current PSNR: 34.8390 dB
ISTA Iteration 5/10, Current PSNR: 34.8391 dB
ISTA Iteration 6/10, Current PSNR: 34.8391 dB
ISTA Iteration 7/10, Current PSNR: 34.8391 dB
ISTA Iteration 8/10, Current PSNR: 34.8391 dB
ISTA Iteration 9/10, Current PSNR: 34.8391 dB
ISTA Iteration 10/10, Current PSNR: 34.8391 dB
Edge-Enhanced Mask: ZF PSNR=33.25, ISTA PSNR=34.84, ZF SSIM=0.6995, ISTA SSIM=0.8936, Time=0.12s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0208_MR1/PROCESSED/MPRAGE/SUBJ_111/OAS1_0208_MR1_mpr_n3_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 4004.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1539 dB
ISTA Iteration 2/10, Current PSNR: 27.4518 dB
ISTA Iteration 3/10, Current PSNR: 27.5572 dB
ISTA Iteration 4/10, Current PSNR: 27.5977 dB
ISTA Iteration 5/10, Current PSNR: 27.6148 dB
ISTA Iteration 6/10, Current PSNR: 27.6226 dB
ISTA Iteration 7/10, Current PSNR: 27.6263 dB
ISTA Iteration 8/10, Current PSNR: 27.6281 dB
ISTA Iteration 9/10, Current PSNR: 27.6289 dB
ISTA Iteration 10/10, Current PSNR: 27.6294 dB
Cartesian Mask: ZF PSNR=25.59, ISTA PSNR=27.63, ZF SSIM=0.6145, ISTA SSIM=0.7302, Time=0.11s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.3935 dB
ISTA Iteration 2/10, Current PSNR: 24.7312 dB
ISTA Iteration 3/10, Current PSNR: 24.8564 dB
ISTA Iteration 4/10, Current PSNR: 24.9066 dB
ISTA Iteration 5/10, Current PSNR: 24.9286 dB
ISTA Iteration 6/10, Current PSNR: 24.9387 dB
ISTA Iteration 7/10, Current PSNR: 24.9436 dB
ISTA Iteration 8/10, Current PSNR: 24.9459 dB
ISTA Iteration 9/10, Current PSNR: 24.9471 dB
ISTA Iteration 10/10, Current PSNR: 24.9477 dB
Random 2D Mask: ZF PSNR=22.76, ISTA PSNR=24.95, ZF SSIM=0.3155, ISTA SSIM=0.5334, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2818 dB
ISTA Iteration 2/10, Current PSNR: 36.2819 dB
ISTA Iteration 3/10, Current PSNR: 36.2819 dB
ISTA Iteration 4/10, Current PSNR: 36.2819 dB
ISTA Iteration 5/10, Current PSNR: 36.2819 dB
ISTA Iteration 6/10, Current PSNR: 36.2819 dB
ISTA Iteration 7/10, Current PSNR: 36.2819 dB
ISTA Iteration 8/10, Current PSNR: 36.2819 dB
ISTA Iteration 9/10, Current PSNR: 36.2819 dB
ISTA Iteration 10/10, Current PSNR: 36.2819 dB
Variable Density Mask: ZF PSNR=36.21, ISTA PSNR=36.28, ZF SSIM=0.9584, ISTA SSIM=0.9707, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.1200 dB
ISTA Iteration 2/10, Current PSNR: 36.1200 dB
ISTA Iteration 3/10, Current PSNR: 36.1200 dB
ISTA Iteration 4/10, Current PSNR: 36.1200 dB
ISTA Iteration 5/10, Current PSNR: 36.1200 dB
ISTA Iteration 6/10, Current PSNR: 36.1200 dB
ISTA Iteration 7/10, Current PSNR: 36.1200 dB
ISTA Iteration 8/10, Current PSNR: 36.1200 dB
ISTA Iteration 9/10, Current PSNR: 36.1200 dB
ISTA Iteration 10/10, Current PSNR: 36.1200 dB
Edge-Enhanced Mask: ZF PSNR=34.85, ISTA PSNR=36.12, ZF SSIM=0.7665, ISTA SSIM=0.9245, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5604 dB
ISTA Iteration 2/10, Current PSNR: 27.8664 dB
ISTA Iteration 3/10, Current PSNR: 27.9748 dB
ISTA Iteration 4/10, Current PSNR: 28.0166 dB
ISTA Iteration 5/10, Current PSNR: 28.0342 dB
ISTA Iteration 6/10, Current PSNR: 28.0422 dB
ISTA Iteration 7/10, Current PSNR: 28.0460 dB
ISTA Iteration 8/10, Current PSNR: 28.0479 dB
ISTA Iteration 9/10, Current PSNR: 28.0488 dB
ISTA Iteration 10/10, Current PSNR: 28.0492 dB
Cartesian Mask: ZF PSNR=25.96, ISTA PSNR=28.05, ZF SSIM=0.6194, ISTA SSIM=0.7376, Time=0.12s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.7380 dB
ISTA Iteration 2/10, Current PSNR: 25.0843 dB
ISTA Iteration 3/10, Current PSNR: 25.2131 dB
ISTA Iteration 4/10, Current PSNR: 25.2650 dB
ISTA Iteration 5/10, Current PSNR: 25.2876 dB
ISTA Iteration 6/10, Current PSNR: 25.2981 dB
ISTA Iteration 7/10, Current PSNR: 25.3032 dB
ISTA Iteration 8/10, Current PSNR: 25.3056 dB
ISTA Iteration 9/10, Current PSNR: 25.3069 dB
ISTA Iteration 10/10, Current PSNR: 25.3075 dB
Random 2D Mask: ZF PSNR=23.07, ISTA PSNR=25.31, ZF SSIM=0.3208, ISTA SSIM=0.5423, Time=0.14s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2629 dB
ISTA Iteration 2/10, Current PSNR: 36.2630 dB
ISTA Iteration 3/10, Current PSNR: 36.2630 dB
ISTA Iteration 4/10, Current PSNR: 36.2630 dB
ISTA Iteration 5/10, Current PSNR: 36.2630 dB
ISTA Iteration 6/10, Current PSNR: 36.2630 dB
ISTA Iteration 7/10, Current PSNR: 36.2630 dB
ISTA Iteration 8/10, Current PSNR: 36.2630 dB
ISTA Iteration 9/10, Current PSNR: 36.2630 dB
ISTA Iteration 10/10, Current PSNR: 36.2630 dB
Variable Density Mask: ZF PSNR=36.19, ISTA PSNR=36.26, ZF SSIM=0.9572, ISTA SSIM=0.9691, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2940 dB
ISTA Iteration 2/10, Current PSNR: 36.2941 dB
ISTA Iteration 3/10, Current PSNR: 36.2942 dB
ISTA Iteration 4/10, Current PSNR: 36.2942 dB
ISTA Iteration 5/10, Current PSNR: 36.2942 dB
ISTA Iteration 6/10, Current PSNR: 36.2942 dB
ISTA Iteration 7/10, Current PSNR: 36.2942 dB
ISTA Iteration 8/10, Current PSNR: 36.2942 dB
ISTA Iteration 9/10, Current PSNR: 36.2942 dB
ISTA Iteration 10/10, Current PSNR: 36.2942 dB
Edge-Enhanced Mask: ZF PSNR=35.20, ISTA PSNR=36.29, ZF SSIM=0.7890, ISTA SSIM=0.9312, Time=0.13s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5166 dB
ISTA Iteration 2/10, Current PSNR: 27.8279 dB
ISTA Iteration 3/10, Current PSNR: 27.9379 dB
ISTA Iteration 4/10, Current PSNR: 27.9802 dB
ISTA Iteration 5/10, Current PSNR: 27.9981 dB
ISTA Iteration 6/10, Current PSNR: 28.0062 dB
ISTA Iteration 7/10, Current PSNR: 28.0100 dB
ISTA Iteration 8/10, Current PSNR: 28.0119 dB
ISTA Iteration 9/10, Current PSNR: 28.0128 dB
ISTA Iteration 10/10, Current PSNR: 28.0133 dB
Cartesian Mask: ZF PSNR=25.89, ISTA PSNR=28.01, ZF SSIM=0.6230, ISTA SSIM=0.7383, Time=0.12s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6821 dB
ISTA Iteration 2/10, Current PSNR: 25.0369 dB
ISTA Iteration 3/10, Current PSNR: 25.1688 dB
ISTA Iteration 4/10, Current PSNR: 25.2217 dB
ISTA Iteration 5/10, Current PSNR: 25.2448 dB
ISTA Iteration 6/10, Current PSNR: 25.2554 dB
ISTA Iteration 7/10, Current PSNR: 25.2605 dB
ISTA Iteration 8/10, Current PSNR: 25.2631 dB
ISTA Iteration 9/10, Current PSNR: 25.2643 dB
ISTA Iteration 10/10, Current PSNR: 25.2649 dB
Random 2D Mask: ZF PSNR=22.98, ISTA PSNR=25.26, ZF SSIM=0.3219, ISTA SSIM=0.5402, Time=0.13s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.9495 dB
ISTA Iteration 2/10, Current PSNR: 36.9495 dB
ISTA Iteration 3/10, Current PSNR: 36.9495 dB
ISTA Iteration 4/10, Current PSNR: 36.9495 dB
ISTA Iteration 5/10, Current PSNR: 36.9495 dB
ISTA Iteration 6/10, Current PSNR: 36.9495 dB
ISTA Iteration 7/10, Current PSNR: 36.9495 dB
ISTA Iteration 8/10, Current PSNR: 36.9495 dB
ISTA Iteration 9/10, Current PSNR: 36.9495 dB
ISTA Iteration 10/10, Current PSNR: 36.9495 dB
Variable Density Mask: ZF PSNR=36.87, ISTA PSNR=36.95, ZF SSIM=0.9629, ISTA SSIM=0.9738, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.9794 dB
ISTA Iteration 2/10, Current PSNR: 36.9794 dB
ISTA Iteration 3/10, Current PSNR: 36.9794 dB
ISTA Iteration 4/10, Current PSNR: 36.9794 dB
ISTA Iteration 5/10, Current PSNR: 36.9794 dB
ISTA Iteration 6/10, Current PSNR: 36.9794 dB
ISTA Iteration 7/10, Current PSNR: 36.9794 dB
ISTA Iteration 8/10, Current PSNR: 36.9794 dB
ISTA Iteration 9/10, Current PSNR: 36.9794 dB
ISTA Iteration 10/10, Current PSNR: 36.9794 dB
Edge-Enhanced Mask: ZF PSNR=35.85, ISTA PSNR=36.98, ZF SSIM=0.8072, ISTA SSIM=0.9402, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.7290 dB
ISTA Iteration 2/10, Current PSNR: 28.0323 dB
ISTA Iteration 3/10, Current PSNR: 28.1389 dB
ISTA Iteration 4/10, Current PSNR: 28.1797 dB
ISTA Iteration 5/10, Current PSNR: 28.1969 dB
ISTA Iteration 6/10, Current PSNR: 28.2047 dB
ISTA Iteration 7/10, Current PSNR: 28.2084 dB
ISTA Iteration 8/10, Current PSNR: 28.2102 dB
ISTA Iteration 9/10, Current PSNR: 28.2111 dB
ISTA Iteration 10/10, Current PSNR: 28.2115 dB
Cartesian Mask: ZF PSNR=26.12, ISTA PSNR=28.21, ZF SSIM=0.6289, ISTA SSIM=0.7416, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.8476 dB
ISTA Iteration 2/10, Current PSNR: 25.2005 dB
ISTA Iteration 3/10, Current PSNR: 25.3311 dB
ISTA Iteration 4/10, Current PSNR: 25.3835 dB
ISTA Iteration 5/10, Current PSNR: 25.4063 dB
ISTA Iteration 6/10, Current PSNR: 25.4168 dB
ISTA Iteration 7/10, Current PSNR: 25.4219 dB
ISTA Iteration 8/10, Current PSNR: 25.4244 dB
ISTA Iteration 9/10, Current PSNR: 25.4256 dB
ISTA Iteration 10/10, Current PSNR: 25.4262 dB
Random 2D Mask: ZF PSNR=23.14, ISTA PSNR=25.43, ZF SSIM=0.3241, ISTA SSIM=0.5425, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.4610 dB
ISTA Iteration 2/10, Current PSNR: 37.4612 dB
ISTA Iteration 3/10, Current PSNR: 37.4612 dB
ISTA Iteration 4/10, Current PSNR: 37.4612 dB
ISTA Iteration 5/10, Current PSNR: 37.4613 dB
ISTA Iteration 6/10, Current PSNR: 37.4613 dB
ISTA Iteration 7/10, Current PSNR: 37.4613 dB
ISTA Iteration 8/10, Current PSNR: 37.4613 dB
ISTA Iteration 9/10, Current PSNR: 37.4613 dB
ISTA Iteration 10/10, Current PSNR: 37.4613 dB
Variable Density Mask: ZF PSNR=37.38, ISTA PSNR=37.46, ZF SSIM=0.9665, ISTA SSIM=0.9765, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.3960 dB
ISTA Iteration 2/10, Current PSNR: 37.3960 dB
ISTA Iteration 3/10, Current PSNR: 37.3960 dB
ISTA Iteration 4/10, Current PSNR: 37.3960 dB
ISTA Iteration 5/10, Current PSNR: 37.3961 dB
ISTA Iteration 6/10, Current PSNR: 37.3961 dB
ISTA Iteration 7/10, Current PSNR: 37.3961 dB
ISTA Iteration 8/10, Current PSNR: 37.3961 dB
ISTA Iteration 9/10, Current PSNR: 37.3961 dB
ISTA Iteration 10/10, Current PSNR: 37.3961 dB
Edge-Enhanced Mask: ZF PSNR=36.42, ISTA PSNR=37.40, ZF SSIM=0.8376, ISTA SSIM=0.9486, Time=0.13s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5200 dB
ISTA Iteration 2/10, Current PSNR: 27.8192 dB
ISTA Iteration 3/10, Current PSNR: 27.9239 dB
ISTA Iteration 4/10, Current PSNR: 27.9638 dB
ISTA Iteration 5/10, Current PSNR: 27.9807 dB
ISTA Iteration 6/10, Current PSNR: 27.9883 dB
ISTA Iteration 7/10, Current PSNR: 27.9919 dB
ISTA Iteration 8/10, Current PSNR: 27.9936 dB
ISTA Iteration 9/10, Current PSNR: 27.9945 dB
ISTA Iteration 10/10, Current PSNR: 27.9949 dB
Cartesian Mask: ZF PSNR=25.91, ISTA PSNR=27.99, ZF SSIM=0.6255, ISTA SSIM=0.7390, Time=0.12s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.6541 dB
ISTA Iteration 2/10, Current PSNR: 25.0077 dB
ISTA Iteration 3/10, Current PSNR: 25.1385 dB
ISTA Iteration 4/10, Current PSNR: 25.1909 dB
ISTA Iteration 5/10, Current PSNR: 25.2137 dB
ISTA Iteration 6/10, Current PSNR: 25.2242 dB
ISTA Iteration 7/10, Current PSNR: 25.2292 dB
ISTA Iteration 8/10, Current PSNR: 25.2316 dB
ISTA Iteration 9/10, Current PSNR: 25.2329 dB
ISTA Iteration 10/10, Current PSNR: 25.2335 dB
Random 2D Mask: ZF PSNR=22.93, ISTA PSNR=25.23, ZF SSIM=0.3189, ISTA SSIM=0.5377, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.2530 dB
ISTA Iteration 2/10, Current PSNR: 37.2534 dB
ISTA Iteration 3/10, Current PSNR: 37.2535 dB
ISTA Iteration 4/10, Current PSNR: 37.2536 dB
ISTA Iteration 5/10, Current PSNR: 37.2536 dB
ISTA Iteration 6/10, Current PSNR: 37.2536 dB
ISTA Iteration 7/10, Current PSNR: 37.2536 dB
ISTA Iteration 8/10, Current PSNR: 37.2536 dB
ISTA Iteration 9/10, Current PSNR: 37.2536 dB
ISTA Iteration 10/10, Current PSNR: 37.2536 dB
Variable Density Mask: ZF PSNR=37.17, ISTA PSNR=37.25, ZF SSIM=0.9646, ISTA SSIM=0.9755, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.1161 dB
ISTA Iteration 2/10, Current PSNR: 37.1161 dB
ISTA Iteration 3/10, Current PSNR: 37.1161 dB
ISTA Iteration 4/10, Current PSNR: 37.1161 dB
ISTA Iteration 5/10, Current PSNR: 37.1161 dB
ISTA Iteration 6/10, Current PSNR: 37.1161 dB
ISTA Iteration 7/10, Current PSNR: 37.1161 dB
ISTA Iteration 8/10, Current PSNR: 37.1161 dB
ISTA Iteration 9/10, Current PSNR: 37.1161 dB
ISTA Iteration 10/10, Current PSNR: 37.1161 dB
Edge-Enhanced Mask: ZF PSNR=36.01, ISTA PSNR=37.12, ZF SSIM=0.8140, ISTA SSIM=0.9429, Time=0.13s

Processing: /kaggle/input/oasis-1/oasis_cross-sectional_disc6/disc6/OAS1_0202_MR2/PROCESSED/MPRAGE/SUBJ_111/OAS1_0202_MR2_mpr_n4_anon_sbj_111.img
  Image shape: (256, 256, 160, 1), Data type: float64, Min: 0.00, Max: 2819.00

Processing slice 78
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1830 dB
ISTA Iteration 2/10, Current PSNR: 27.4867 dB
ISTA Iteration 3/10, Current PSNR: 27.5934 dB
ISTA Iteration 4/10, Current PSNR: 27.6342 dB
ISTA Iteration 5/10, Current PSNR: 27.6513 dB
ISTA Iteration 6/10, Current PSNR: 27.6591 dB
ISTA Iteration 7/10, Current PSNR: 27.6627 dB
ISTA Iteration 8/10, Current PSNR: 27.6645 dB
ISTA Iteration 9/10, Current PSNR: 27.6654 dB
ISTA Iteration 10/10, Current PSNR: 27.6658 dB
Cartesian Mask: ZF PSNR=25.58, ISTA PSNR=27.67, ZF SSIM=0.6161, ISTA SSIM=0.7269, Time=0.12s

Testing Random 2D Mask (R=4) for slice 78
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.7313 dB
ISTA Iteration 2/10, Current PSNR: 25.1066 dB
ISTA Iteration 3/10, Current PSNR: 25.2466 dB
ISTA Iteration 4/10, Current PSNR: 25.3029 dB
ISTA Iteration 5/10, Current PSNR: 25.3275 dB
ISTA Iteration 6/10, Current PSNR: 25.3388 dB
ISTA Iteration 7/10, Current PSNR: 25.3443 dB
ISTA Iteration 8/10, Current PSNR: 25.3469 dB
ISTA Iteration 9/10, Current PSNR: 25.3483 dB
ISTA Iteration 10/10, Current PSNR: 25.3489 dB
Random 2D Mask: ZF PSNR=22.95, ISTA PSNR=25.35, ZF SSIM=0.3354, ISTA SSIM=0.5512, Time=0.13s

Testing Variable Density Mask (R=4) for slice 78
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.5502 dB
ISTA Iteration 2/10, Current PSNR: 36.5502 dB
ISTA Iteration 3/10, Current PSNR: 36.5502 dB
ISTA Iteration 4/10, Current PSNR: 36.5503 dB
ISTA Iteration 5/10, Current PSNR: 36.5503 dB
ISTA Iteration 6/10, Current PSNR: 36.5503 dB
ISTA Iteration 7/10, Current PSNR: 36.5503 dB
ISTA Iteration 8/10, Current PSNR: 36.5503 dB
ISTA Iteration 9/10, Current PSNR: 36.5503 dB
ISTA Iteration 10/10, Current PSNR: 36.5503 dB
Variable Density Mask: ZF PSNR=36.41, ISTA PSNR=36.55, ZF SSIM=0.9585, ISTA SSIM=0.9741, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 78
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3531 dB
ISTA Iteration 2/10, Current PSNR: 36.3531 dB
ISTA Iteration 3/10, Current PSNR: 36.3532 dB
ISTA Iteration 4/10, Current PSNR: 36.3532 dB
ISTA Iteration 5/10, Current PSNR: 36.3532 dB
ISTA Iteration 6/10, Current PSNR: 36.3532 dB
ISTA Iteration 7/10, Current PSNR: 36.3532 dB
ISTA Iteration 8/10, Current PSNR: 36.3532 dB
ISTA Iteration 9/10, Current PSNR: 36.3532 dB
ISTA Iteration 10/10, Current PSNR: 36.3532 dB
Edge-Enhanced Mask: ZF PSNR=34.99, ISTA PSNR=36.35, ZF SSIM=0.7690, ISTA SSIM=0.9252, Time=0.12s

Processing slice 79
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8703 dB
ISTA Iteration 2/10, Current PSNR: 27.1652 dB
ISTA Iteration 3/10, Current PSNR: 27.2689 dB
ISTA Iteration 4/10, Current PSNR: 27.3086 dB
ISTA Iteration 5/10, Current PSNR: 27.3254 dB
ISTA Iteration 6/10, Current PSNR: 27.3330 dB
ISTA Iteration 7/10, Current PSNR: 27.3366 dB
ISTA Iteration 8/10, Current PSNR: 27.3383 dB
ISTA Iteration 9/10, Current PSNR: 27.3392 dB
ISTA Iteration 10/10, Current PSNR: 27.3396 dB
Cartesian Mask: ZF PSNR=25.31, ISTA PSNR=27.34, ZF SSIM=0.6123, ISTA SSIM=0.7236, Time=0.11s

Testing Random 2D Mask (R=4) for slice 79
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.5236 dB
ISTA Iteration 2/10, Current PSNR: 24.9045 dB
ISTA Iteration 3/10, Current PSNR: 25.0470 dB
ISTA Iteration 4/10, Current PSNR: 25.1046 dB
ISTA Iteration 5/10, Current PSNR: 25.1297 dB
ISTA Iteration 6/10, Current PSNR: 25.1414 dB
ISTA Iteration 7/10, Current PSNR: 25.1470 dB
ISTA Iteration 8/10, Current PSNR: 25.1497 dB
ISTA Iteration 9/10, Current PSNR: 25.1511 dB
ISTA Iteration 10/10, Current PSNR: 25.1518 dB
Random 2D Mask: ZF PSNR=22.72, ISTA PSNR=25.15, ZF SSIM=0.3301, ISTA SSIM=0.5466, Time=0.13s

Testing Variable Density Mask (R=4) for slice 79
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.4554 dB
ISTA Iteration 2/10, Current PSNR: 35.4554 dB
ISTA Iteration 3/10, Current PSNR: 35.4554 dB
ISTA Iteration 4/10, Current PSNR: 35.4554 dB
ISTA Iteration 5/10, Current PSNR: 35.4554 dB
ISTA Iteration 6/10, Current PSNR: 35.4554 dB
ISTA Iteration 7/10, Current PSNR: 35.4554 dB
ISTA Iteration 8/10, Current PSNR: 35.4554 dB
ISTA Iteration 9/10, Current PSNR: 35.4554 dB
ISTA Iteration 10/10, Current PSNR: 35.4554 dB
Variable Density Mask: ZF PSNR=35.33, ISTA PSNR=35.46, ZF SSIM=0.9510, ISTA SSIM=0.9682, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 79
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.3808 dB
ISTA Iteration 2/10, Current PSNR: 35.3809 dB
ISTA Iteration 3/10, Current PSNR: 35.3809 dB
ISTA Iteration 4/10, Current PSNR: 35.3809 dB
ISTA Iteration 5/10, Current PSNR: 35.3810 dB
ISTA Iteration 6/10, Current PSNR: 35.3810 dB
ISTA Iteration 7/10, Current PSNR: 35.3810 dB
ISTA Iteration 8/10, Current PSNR: 35.3810 dB
ISTA Iteration 9/10, Current PSNR: 35.3810 dB
ISTA Iteration 10/10, Current PSNR: 35.3810 dB
Edge-Enhanced Mask: ZF PSNR=34.13, ISTA PSNR=35.38, ZF SSIM=0.7493, ISTA SSIM=0.9135, Time=0.12s

Processing slice 80
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8382 dB
ISTA Iteration 2/10, Current PSNR: 27.1450 dB
ISTA Iteration 3/10, Current PSNR: 27.2532 dB
ISTA Iteration 4/10, Current PSNR: 27.2949 dB
ISTA Iteration 5/10, Current PSNR: 27.3124 dB
ISTA Iteration 6/10, Current PSNR: 27.3204 dB
ISTA Iteration 7/10, Current PSNR: 27.3242 dB
ISTA Iteration 8/10, Current PSNR: 27.3260 dB
ISTA Iteration 9/10, Current PSNR: 27.3269 dB
ISTA Iteration 10/10, Current PSNR: 27.3273 dB
Cartesian Mask: ZF PSNR=25.26, ISTA PSNR=27.33, ZF SSIM=0.6152, ISTA SSIM=0.7279, Time=0.11s

Testing Random 2D Mask (R=4) for slice 80
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.4369 dB
ISTA Iteration 2/10, Current PSNR: 24.8169 dB
ISTA Iteration 3/10, Current PSNR: 24.9587 dB
ISTA Iteration 4/10, Current PSNR: 25.0158 dB
ISTA Iteration 5/10, Current PSNR: 25.0407 dB
ISTA Iteration 6/10, Current PSNR: 25.0523 dB
ISTA Iteration 7/10, Current PSNR: 25.0578 dB
ISTA Iteration 8/10, Current PSNR: 25.0605 dB
ISTA Iteration 9/10, Current PSNR: 25.0618 dB
ISTA Iteration 10/10, Current PSNR: 25.0625 dB
Random 2D Mask: ZF PSNR=22.63, ISTA PSNR=25.06, ZF SSIM=0.3289, ISTA SSIM=0.5488, Time=0.14s

Testing Variable Density Mask (R=4) for slice 80
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.7442 dB
ISTA Iteration 2/10, Current PSNR: 35.7442 dB
ISTA Iteration 3/10, Current PSNR: 35.7442 dB
ISTA Iteration 4/10, Current PSNR: 35.7442 dB
ISTA Iteration 5/10, Current PSNR: 35.7442 dB
ISTA Iteration 6/10, Current PSNR: 35.7442 dB
ISTA Iteration 7/10, Current PSNR: 35.7442 dB
ISTA Iteration 8/10, Current PSNR: 35.7442 dB
ISTA Iteration 9/10, Current PSNR: 35.7442 dB
ISTA Iteration 10/10, Current PSNR: 35.7442 dB
Variable Density Mask: ZF PSNR=35.62, ISTA PSNR=35.74, ZF SSIM=0.9549, ISTA SSIM=0.9714, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 80
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.6829 dB
ISTA Iteration 2/10, Current PSNR: 35.6832 dB
ISTA Iteration 3/10, Current PSNR: 35.6833 dB
ISTA Iteration 4/10, Current PSNR: 35.6833 dB
ISTA Iteration 5/10, Current PSNR: 35.6833 dB
ISTA Iteration 6/10, Current PSNR: 35.6833 dB
ISTA Iteration 7/10, Current PSNR: 35.6833 dB
ISTA Iteration 8/10, Current PSNR: 35.6833 dB
ISTA Iteration 9/10, Current PSNR: 35.6833 dB
ISTA Iteration 10/10, Current PSNR: 35.6833 dB
Edge-Enhanced Mask: ZF PSNR=34.49, ISTA PSNR=35.68, ZF SSIM=0.7687, ISTA SSIM=0.9234, Time=0.12s

Processing slice 81
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9620 dB
ISTA Iteration 2/10, Current PSNR: 27.2708 dB
ISTA Iteration 3/10, Current PSNR: 27.3806 dB
ISTA Iteration 4/10, Current PSNR: 27.4231 dB
ISTA Iteration 5/10, Current PSNR: 27.4411 dB
ISTA Iteration 6/10, Current PSNR: 27.4492 dB
ISTA Iteration 7/10, Current PSNR: 27.4531 dB
ISTA Iteration 8/10, Current PSNR: 27.4550 dB
ISTA Iteration 9/10, Current PSNR: 27.4559 dB
ISTA Iteration 10/10, Current PSNR: 27.4564 dB
Cartesian Mask: ZF PSNR=25.38, ISTA PSNR=27.46, ZF SSIM=0.6174, ISTA SSIM=0.7306, Time=0.12s

Testing Random 2D Mask (R=4) for slice 81
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.5515 dB
ISTA Iteration 2/10, Current PSNR: 24.9311 dB
ISTA Iteration 3/10, Current PSNR: 25.0722 dB
ISTA Iteration 4/10, Current PSNR: 25.1287 dB
ISTA Iteration 5/10, Current PSNR: 25.1533 dB
ISTA Iteration 6/10, Current PSNR: 25.1647 dB
ISTA Iteration 7/10, Current PSNR: 25.1702 dB
ISTA Iteration 8/10, Current PSNR: 25.1728 dB
ISTA Iteration 9/10, Current PSNR: 25.1741 dB
ISTA Iteration 10/10, Current PSNR: 25.1748 dB
Random 2D Mask: ZF PSNR=22.74, ISTA PSNR=25.17, ZF SSIM=0.3350, ISTA SSIM=0.5551, Time=0.13s

Testing Variable Density Mask (R=4) for slice 81
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3331 dB
ISTA Iteration 2/10, Current PSNR: 36.3331 dB
ISTA Iteration 3/10, Current PSNR: 36.3331 dB
ISTA Iteration 4/10, Current PSNR: 36.3331 dB
ISTA Iteration 5/10, Current PSNR: 36.3331 dB
ISTA Iteration 6/10, Current PSNR: 36.3331 dB
ISTA Iteration 7/10, Current PSNR: 36.3331 dB
ISTA Iteration 8/10, Current PSNR: 36.3331 dB
ISTA Iteration 9/10, Current PSNR: 36.3331 dB
ISTA Iteration 10/10, Current PSNR: 36.3331 dB
Variable Density Mask: ZF PSNR=36.20, ISTA PSNR=36.33, ZF SSIM=0.9604, ISTA SSIM=0.9753, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 81
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.2524 dB
ISTA Iteration 2/10, Current PSNR: 36.2526 dB
ISTA Iteration 3/10, Current PSNR: 36.2526 dB
ISTA Iteration 4/10, Current PSNR: 36.2527 dB
ISTA Iteration 5/10, Current PSNR: 36.2527 dB
ISTA Iteration 6/10, Current PSNR: 36.2527 dB
ISTA Iteration 7/10, Current PSNR: 36.2527 dB
ISTA Iteration 8/10, Current PSNR: 36.2527 dB
ISTA Iteration 9/10, Current PSNR: 36.2527 dB
ISTA Iteration 10/10, Current PSNR: 36.2527 dB
Edge-Enhanced Mask: ZF PSNR=34.98, ISTA PSNR=36.25, ZF SSIM=0.7790, ISTA SSIM=0.9299, Time=0.13s

Processing slice 82
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9155 dB
ISTA Iteration 2/10, Current PSNR: 27.2235 dB
ISTA Iteration 3/10, Current PSNR: 27.3331 dB
ISTA Iteration 4/10, Current PSNR: 27.3756 dB
ISTA Iteration 5/10, Current PSNR: 27.3935 dB
ISTA Iteration 6/10, Current PSNR: 27.4017 dB
ISTA Iteration 7/10, Current PSNR: 27.4056 dB
ISTA Iteration 8/10, Current PSNR: 27.4075 dB
ISTA Iteration 9/10, Current PSNR: 27.4084 dB
ISTA Iteration 10/10, Current PSNR: 27.4089 dB
Cartesian Mask: ZF PSNR=25.32, ISTA PSNR=27.41, ZF SSIM=0.6154, ISTA SSIM=0.7307, Time=0.11s

Testing Random 2D Mask (R=4) for slice 82
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 24.5262 dB
ISTA Iteration 2/10, Current PSNR: 24.9064 dB
ISTA Iteration 3/10, Current PSNR: 25.0473 dB
ISTA Iteration 4/10, Current PSNR: 25.1037 dB
ISTA Iteration 5/10, Current PSNR: 25.1282 dB
ISTA Iteration 6/10, Current PSNR: 25.1395 dB
ISTA Iteration 7/10, Current PSNR: 25.1450 dB
ISTA Iteration 8/10, Current PSNR: 25.1476 dB
ISTA Iteration 9/10, Current PSNR: 25.1489 dB
ISTA Iteration 10/10, Current PSNR: 25.1496 dB
Random 2D Mask: ZF PSNR=22.72, ISTA PSNR=25.15, ZF SSIM=0.3374, ISTA SSIM=0.5574, Time=0.13s

Testing Variable Density Mask (R=4) for slice 82
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.5768 dB
ISTA Iteration 2/10, Current PSNR: 36.5768 dB
ISTA Iteration 3/10, Current PSNR: 36.5768 dB
ISTA Iteration 4/10, Current PSNR: 36.5768 dB
ISTA Iteration 5/10, Current PSNR: 36.5768 dB
ISTA Iteration 6/10, Current PSNR: 36.5768 dB
ISTA Iteration 7/10, Current PSNR: 36.5768 dB
ISTA Iteration 8/10, Current PSNR: 36.5768 dB
ISTA Iteration 9/10, Current PSNR: 36.5768 dB
ISTA Iteration 10/10, Current PSNR: 36.5768 dB
Variable Density Mask: ZF PSNR=36.45, ISTA PSNR=36.58, ZF SSIM=0.9631, ISTA SSIM=0.9774, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 82
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.3724 dB
ISTA Iteration 2/10, Current PSNR: 36.3725 dB
ISTA Iteration 3/10, Current PSNR: 36.3725 dB
ISTA Iteration 4/10, Current PSNR: 36.3725 dB
ISTA Iteration 5/10, Current PSNR: 36.3725 dB
ISTA Iteration 6/10, Current PSNR: 36.3725 dB
ISTA Iteration 7/10, Current PSNR: 36.3725 dB
ISTA Iteration 8/10, Current PSNR: 36.3725 dB
ISTA Iteration 9/10, Current PSNR: 36.3725 dB
ISTA Iteration 10/10, Current PSNR: 36.3725 dB
Edge-Enhanced Mask: ZF PSNR=34.90, ISTA PSNR=36.37, ZF SSIM=0.7638, ISTA SSIM=0.9253, Time=0.12s

--- Summary of Results (R=4) ---
Subject                        | Slice      | Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------------------------------------
OAS1_0220_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.25      | 27.72      | 0.6165     | 0.7370     | 0.14      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 22.94      | 25.48      | 0.3070     | 0.5381     | 0.16      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 36.14      | 36.25      | 0.9603     | 0.9760     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 33.90      | 35.74      | 0.6904     | 0.9019     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.16      | 27.14      | 0.6016     | 0.7163     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.18      | 25.68      | 0.3094     | 0.5410     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 36.20      | 36.30      | 0.9593     | 0.9744     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 33.99      | 35.80      | 0.6959     | 0.9015     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.53      | 27.49      | 0.6057     | 0.7185     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 23.48      | 26.03      | 0.3178     | 0.5490     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 36.78      | 36.88      | 0.9630     | 0.9763     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 34.30      | 36.20      | 0.6986     | 0.9035     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.44      | 27.47      | 0.6086     | 0.7208     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 23.21      | 25.76      | 0.3109     | 0.5411     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 36.59      | 36.70      | 0.9624     | 0.9766     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.29      | 36.22      | 0.6997     | 0.9060     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.58      | 27.67      | 0.6125     | 0.7271     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.27      | 25.83      | 0.3128     | 0.5443     | 0.13      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 36.61      | 36.72      | 0.9628     | 0.9766     | 0.12      
OAS1_0220_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.73      | 36.39      | 0.7286     | 0.9162     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.65      | 27.94      | 0.5803     | 0.7175     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.21      | 25.51      | 0.3445     | 0.5605     | 0.13      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 78         | Variable Density | 36.27      | 36.45      | 0.9534     | 0.9717     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 34.04      | 35.78      | 0.7231     | 0.9026     | 0.13      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 79         | Cartesian       | 26.03      | 28.23      | 0.5824     | 0.7214     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.61      | 25.86      | 0.3522     | 0.5725     | 0.13      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 79         | Variable Density | 36.17      | 36.33      | 0.9524     | 0.9693     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 34.04      | 35.76      | 0.7235     | 0.9035     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.33      | 27.50      | 0.5700     | 0.7061     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 80         | Random 2D       | 23.00      | 25.23      | 0.3416     | 0.5583     | 0.14      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 80         | Variable Density | 35.55      | 35.69      | 0.9525     | 0.9693     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 33.41      | 35.10      | 0.7090     | 0.8947     | 0.13      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 81         | Cartesian       | 26.11      | 28.27      | 0.5838     | 0.7199     | 0.11      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 81         | Random 2D       | 23.74      | 25.96      | 0.3599     | 0.5778     | 0.14      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 81         | Variable Density | 36.62      | 36.76      | 0.9596     | 0.9738     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.25      | 36.00      | 0.7290     | 0.9060     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.71      | 27.90      | 0.5789     | 0.7143     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.34      | 25.53      | 0.3530     | 0.5673     | 0.13      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 82         | Variable Density | 36.41      | 36.57      | 0.9576     | 0.9740     | 0.12      
OAS1_0230_MR2_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.08      | 35.86      | 0.7269     | 0.9074     | 0.12      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.88      | 27.94      | 0.6050     | 0.7270     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.80      | 26.15      | 0.3535     | 0.5663     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 36.02      | 36.11      | 0.9564     | 0.9703     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 34.63      | 36.01      | 0.7551     | 0.9186     | 0.12      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.87      | 27.92      | 0.5995     | 0.7244     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.86      | 26.20      | 0.3515     | 0.5648     | 0.14      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 35.74      | 35.83      | 0.9530     | 0.9667     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 34.35      | 35.67      | 0.7457     | 0.9108     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.81      | 27.92      | 0.6001     | 0.7232     | 0.12      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 23.73      | 26.02      | 0.3505     | 0.5591     | 0.14      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 35.75      | 35.85      | 0.9527     | 0.9675     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 34.32      | 35.72      | 0.7386     | 0.9107     | 0.12      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.76      | 27.89      | 0.6031     | 0.7260     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 23.67      | 25.90      | 0.3483     | 0.5573     | 0.13      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 35.88      | 35.98      | 0.9544     | 0.9697     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.41      | 35.76      | 0.7501     | 0.9135     | 0.12      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.82      | 27.92      | 0.6042     | 0.7267     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.70      | 25.92      | 0.3466     | 0.5584     | 0.14      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 36.00      | 36.10      | 0.9557     | 0.9707     | 0.11      
OAS1_0224_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.64      | 35.97      | 0.7569     | 0.9164     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.38      | 27.58      | 0.5749     | 0.6994     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.59      | 26.01      | 0.3369     | 0.5530     | 0.13      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 36.21      | 36.34      | 0.9497     | 0.9677     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 34.11      | 35.95      | 0.7041     | 0.8984     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.25      | 27.43      | 0.5718     | 0.6949     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.48      | 25.95      | 0.3349     | 0.5508     | 0.13      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 36.02      | 36.15      | 0.9472     | 0.9659     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 34.00      | 35.74      | 0.7048     | 0.8971     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.32      | 27.43      | 0.5736     | 0.6966     | 0.11      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 23.58      | 26.08      | 0.3384     | 0.5553     | 0.13      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 36.11      | 36.24      | 0.9489     | 0.9676     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 34.25      | 35.83      | 0.7234     | 0.9044     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.27      | 27.33      | 0.5770     | 0.6981     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 23.52      | 25.99      | 0.3386     | 0.5552     | 0.13      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 36.21      | 36.33      | 0.9503     | 0.9684     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.13      | 35.89      | 0.7082     | 0.8999     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 24.86      | 26.91      | 0.5746     | 0.6896     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.04      | 25.47      | 0.3319     | 0.5438     | 0.13      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 35.79      | 35.91      | 0.9490     | 0.9677     | 0.12      
OAS1_0212_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 33.69      | 35.49      | 0.6927     | 0.8914     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.10      | 27.54      | 0.5521     | 0.7119     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.03      | 25.74      | 0.3082     | 0.5618     | 0.14      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 35.93      | 36.18      | 0.9496     | 0.9726     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 33.98      | 35.89      | 0.6959     | 0.9096     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.25      | 27.68      | 0.5508     | 0.7138     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.23      | 25.93      | 0.3096     | 0.5645     | 0.13      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 35.80      | 36.04      | 0.9467     | 0.9706     | 0.14      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 34.02      | 35.87      | 0.6970     | 0.9100     | 0.13      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.43      | 27.90      | 0.5538     | 0.7185     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 23.38      | 26.12      | 0.3141     | 0.5662     | 0.14      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 36.17      | 36.42      | 0.9472     | 0.9707     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 33.98      | 36.04      | 0.6845     | 0.9050     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.34      | 27.84      | 0.5538     | 0.7182     | 0.11      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 23.25      | 26.03      | 0.3123     | 0.5658     | 0.13      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 36.20      | 36.45      | 0.9481     | 0.9721     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.62      | 36.36      | 0.7233     | 0.9200     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.54      | 28.10      | 0.5585     | 0.7242     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.42      | 26.20      | 0.3151     | 0.5744     | 0.13      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 36.50      | 36.76      | 0.9523     | 0.9747     | 0.12      
OAS1_0227_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.96      | 36.63      | 0.7401     | 0.9255     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 24.93      | 27.43      | 0.5705     | 0.7066     | 0.11      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 22.68      | 25.30      | 0.3049     | 0.5408     | 0.14      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 36.59      | 36.75      | 0.9608     | 0.9774     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 33.43      | 35.93      | 0.6509     | 0.8905     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 24.71      | 27.19      | 0.5671     | 0.7035     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 22.50      | 25.11      | 0.3018     | 0.5370     | 0.13      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 36.17      | 36.32      | 0.9579     | 0.9757     | 0.11      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 33.10      | 35.58      | 0.6411     | 0.8864     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 24.71      | 27.15      | 0.5655     | 0.7008     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 22.51      | 25.10      | 0.3028     | 0.5347     | 0.14      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 36.44      | 36.60      | 0.9585     | 0.9765     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 34.28      | 36.22      | 0.7058     | 0.9121     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.09      | 27.49      | 0.5674     | 0.7020     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 22.96      | 25.57      | 0.3111     | 0.5421     | 0.13      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 36.91      | 37.07      | 0.9605     | 0.9766     | 0.11      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.52      | 36.65      | 0.6981     | 0.9127     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 24.91      | 27.30      | 0.5634     | 0.6968     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 22.83      | 25.44      | 0.3069     | 0.5356     | 0.13      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 36.73      | 36.89      | 0.9596     | 0.9752     | 0.12      
OAS1_0195_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.23      | 36.37      | 0.6874     | 0.9090     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.27      | 27.34      | 0.5502     | 0.7008     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.41      | 25.56      | 0.3616     | 0.5699     | 0.15      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 34.20      | 34.31      | 0.9411     | 0.9618     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 32.65      | 34.02      | 0.7053     | 0.8806     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 24.48      | 26.54      | 0.5362     | 0.6851     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 22.69      | 24.87      | 0.3474     | 0.5530     | 0.13      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 33.18      | 33.29      | 0.9326     | 0.9568     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 31.33      | 32.82      | 0.6583     | 0.8506     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 24.60      | 26.69      | 0.5393     | 0.6877     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 22.75      | 24.93      | 0.3462     | 0.5518     | 0.14      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 33.47      | 33.57      | 0.9364     | 0.9604     | 0.11      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 31.56      | 33.06      | 0.6658     | 0.8560     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 24.78      | 26.97      | 0.5419     | 0.6923     | 0.11      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 22.87      | 25.01      | 0.3494     | 0.5537     | 0.13      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 33.75      | 33.86      | 0.9403     | 0.9624     | 0.11      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 32.01      | 33.49      | 0.6798     | 0.8681     | 0.12      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 24.94      | 27.17      | 0.5426     | 0.6948     | 0.11      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.01      | 25.11      | 0.3526     | 0.5567     | 0.13      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 33.89      | 34.00      | 0.9399     | 0.9619     | 0.11      
OAS1_0205_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 31.83      | 33.44      | 0.6684     | 0.8584     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.44      | 27.54      | 0.5508     | 0.7176     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 78         | Random 2D       | 23.19      | 25.66      | 0.3368     | 0.5863     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 78         | Variable Density | 34.75      | 34.94      | 0.9431     | 0.9668     | 0.11      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 33.46      | 35.05      | 0.7101     | 0.9024     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.50      | 27.59      | 0.5525     | 0.7175     | 0.11      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 79         | Random 2D       | 23.28      | 25.76      | 0.3384     | 0.5877     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 79         | Variable Density | 34.62      | 34.79      | 0.9410     | 0.9633     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 33.38      | 34.84      | 0.7109     | 0.9007     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.16      | 27.19      | 0.5460     | 0.7096     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 80         | Random 2D       | 22.93      | 25.41      | 0.3321     | 0.5757     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 80         | Variable Density | 34.56      | 34.73      | 0.9407     | 0.9636     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 33.19      | 34.69      | 0.7038     | 0.8965     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 81         | Cartesian       | 24.95      | 26.96      | 0.5426     | 0.7025     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 81         | Random 2D       | 22.75      | 25.21      | 0.3257     | 0.5651     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 81         | Variable Density | 34.38      | 34.56      | 0.9397     | 0.9627     | 0.11      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 33.07      | 34.54      | 0.7021     | 0.8944     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.31      | 27.32      | 0.5495     | 0.7091     | 0.11      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 82         | Random 2D       | 23.13      | 25.61      | 0.3336     | 0.5742     | 0.13      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 82         | Variable Density | 34.73      | 34.90      | 0.9441     | 0.9645     | 0.12      
OAS1_0211_MR1_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 33.25      | 34.84      | 0.6995     | 0.8936     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 78         | Cartesian       | 25.59      | 27.63      | 0.6145     | 0.7302     | 0.11      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 78         | Random 2D       | 22.76      | 24.95      | 0.3155     | 0.5334     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 78         | Variable Density | 36.21      | 36.28      | 0.9584     | 0.9707     | 0.11      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 78         | Edge-Enhanced   | 34.85      | 36.12      | 0.7665     | 0.9245     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 79         | Cartesian       | 25.96      | 28.05      | 0.6194     | 0.7376     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 79         | Random 2D       | 23.07      | 25.31      | 0.3208     | 0.5423     | 0.14      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 79         | Variable Density | 36.19      | 36.26      | 0.9572     | 0.9691     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 79         | Edge-Enhanced   | 35.20      | 36.29      | 0.7890     | 0.9312     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 80         | Cartesian       | 25.89      | 28.01      | 0.6230     | 0.7383     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 80         | Random 2D       | 22.98      | 25.26      | 0.3219     | 0.5402     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 80         | Variable Density | 36.87      | 36.95      | 0.9629     | 0.9738     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 80         | Edge-Enhanced   | 35.85      | 36.98      | 0.8072     | 0.9402     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 81         | Cartesian       | 26.12      | 28.21      | 0.6289     | 0.7416     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 81         | Random 2D       | 23.14      | 25.43      | 0.3241     | 0.5425     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 81         | Variable Density | 37.38      | 37.46      | 0.9665     | 0.9765     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 81         | Edge-Enhanced   | 36.42      | 37.40      | 0.8376     | 0.9486     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 82         | Cartesian       | 25.91      | 27.99      | 0.6255     | 0.7390     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 82         | Random 2D       | 22.93      | 25.23      | 0.3189     | 0.5377     | 0.13      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 82         | Variable Density | 37.17      | 37.25      | 0.9646     | 0.9755     | 0.12      
OAS1_0208_MR1_mpr_n3_anon_sbj  | 82         | Edge-Enhanced   | 36.01      | 37.12      | 0.8140     | 0.9429     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 78         | Cartesian       | 25.58      | 27.67      | 0.6161     | 0.7269     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 78         | Random 2D       | 22.95      | 25.35      | 0.3354     | 0.5512     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 78         | Variable Density | 36.41      | 36.55      | 0.9585     | 0.9741     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 78         | Edge-Enhanced   | 34.99      | 36.35      | 0.7690     | 0.9252     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 79         | Cartesian       | 25.31      | 27.34      | 0.6123     | 0.7236     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 79         | Random 2D       | 22.72      | 25.15      | 0.3301     | 0.5466     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 79         | Variable Density | 35.33      | 35.46      | 0.9510     | 0.9682     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 79         | Edge-Enhanced   | 34.13      | 35.38      | 0.7493     | 0.9135     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 80         | Cartesian       | 25.26      | 27.33      | 0.6152     | 0.7279     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 80         | Random 2D       | 22.63      | 25.06      | 0.3289     | 0.5488     | 0.14      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 80         | Variable Density | 35.62      | 35.74      | 0.9549     | 0.9714     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 80         | Edge-Enhanced   | 34.49      | 35.68      | 0.7687     | 0.9234     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 81         | Cartesian       | 25.38      | 27.46      | 0.6174     | 0.7306     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 81         | Random 2D       | 22.74      | 25.17      | 0.3350     | 0.5551     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 81         | Variable Density | 36.20      | 36.33      | 0.9604     | 0.9753     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 81         | Edge-Enhanced   | 34.98      | 36.25      | 0.7790     | 0.9299     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 82         | Cartesian       | 25.32      | 27.41      | 0.6154     | 0.7307     | 0.11      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 82         | Random 2D       | 22.72      | 25.15      | 0.3374     | 0.5574     | 0.13      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 82         | Variable Density | 36.45      | 36.58      | 0.9631     | 0.9774     | 0.12      
OAS1_0202_MR2_mpr_n4_anon_sbj  | 82         | Edge-Enhanced   | 34.90      | 36.37      | 0.7638     | 0.9253     | 0.12      

--- Mean/Std Metrics (R=4) ---
psnr_zf: Mean=29.6012, Std=5.4848
psnr_ista: Mean=31.1895, Std=4.7405
ssim_zf: Mean=0.6465, Std=0.2272
ssim_ista: Mean=0.7866, Std=0.1639

--- Comparison to Reference Paper ---
Paper's Edge-Enhanced (R=4, 25% data): PSNR=33.52 dB, SSIM=0.4206 (TV algorithm)
Paper's Edge-Enhanced (R=2, 50% data): PSNR=34.76 dB, SSIM=0.4008 (TV algorithm)
Your Best (Variable Density, R=4, 25% data, OAS1_0208_MR1_mpr_n3_anon_sbj_111.img, Slice 81): PSNR=37.46 dB, SSIM=0.9765 (ISTA)

--- Experiments Complete ---

EXPERIMENT 8
MRI_CS_fastMRI_exp
!pip install h5py nibabel numpy matplotlib pywavelets scikit-image
import os
import glob
import h5py
import numpy as np
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
from skimage.filters import sobel
import time
import gc
from skimage.transform import resize

# --- 1. DEFINE BASE PATHS ---
base_path = '/kaggle/input/fastmri-brain-multicoil'
print(f"Attempting to access base dataset path: {base_path}")

if not os.path.isdir(base_path):
    print(f"ERROR: Base dataset path does not exist: {base_path}")
    print(f"Listing contents of '/kaggle/input': {os.listdir('/kaggle/input')}")
    exit()

print(f"Successfully located base dataset path: {base_path}")
h5_files = glob.glob(os.path.join(base_path, '*.h5'))
print(f"Found {len(h5_files)} .h5 files")

# --- 2. MASK FUNCTIONS ---
def create_cartesian_mask(shape, acceleration_factor, center_fraction=0.08):
    num_cols = shape[1]
    num_low_freqs = int(round(num_cols * center_fraction))
    mask = np.zeros(shape, dtype=bool)
    pad = (num_cols - num_low_freqs + 1) // 2
    mask[:, pad:pad + num_low_freqs] = True
    num_sampled_lines_outer = (num_cols - num_low_freqs) // acceleration_factor
    outer_lines_indices = np.setdiff1d(np.arange(num_cols), np.arange(pad, pad + num_low_freqs))
    permuted_outer_lines = np.random.permutation(outer_lines_indices)
    selected_outer_lines = permuted_outer_lines[:num_sampled_lines_outer]
    mask[:, selected_outer_lines] = True
    return mask

def create_random_2d_mask(shape, acceleration_factor, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    num_points = int(np.prod(shape) / acceleration_factor)
    mask = np.zeros(shape, dtype=bool)
    center_rows = int(shape[0] * center_fraction)
    center_cols = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows//2, shape[0]//2 + center_rows//2
    c_start, c_end = shape[1]//2 - center_cols//2, shape[1]//2 + center_cols//2
    mask[r_start:r_end, c_start:c_end] = True
    num_sampled_center = np.sum(mask)
    remaining_points = num_points - num_sampled_center
    if remaining_points > 0:
        outer_indices = [(r, c) for r in range(shape[0]) for c in range(shape[1])
                         if not (r_start <= r < r_end and c_start <= c < c_end)]
        if len(outer_indices) > 0:
            chosen_indices = np.random.choice(len(outer_indices), 
                                             min(remaining_points, len(outer_indices)), 
                                             replace=False)
            for idx in chosen_indices:
                r, c = outer_indices[idx]
                mask[r, c] = True
    return mask

def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
    if seed is not None:
        np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

def create_edge_enhanced_mask(shape, acceleration_factor, reference_image, center_fraction=0.08, seed=None):
    if seed is not None:
        np.random.seed(seed)
    edge_map = sobel(reference_image)
    edge_map = np.clip(edge_map, 0, np.percentile(edge_map, 99))
    if np.max(edge_map) > np.min(edge_map):
        edge_map = (edge_map - np.min(edge_map)) / (np.max(edge_map) - np.min(edge_map))
    k_space_edge = fftshift(fft2(edge_map))
    k_space_energy = np.abs(k_space_edge)
    k_space_energy = np.clip(k_space_energy, 0, np.percentile(k_space_energy, 99))
    if np.max(k_space_energy) > np.min(k_space_energy):
        k_space_energy = (k_space_energy - np.min(k_space_energy)) / \
                         (np.max(k_space_energy) - np.min(k_space_energy))
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x) / (cols / 2)
    y_coords = np.abs(np.arange(rows) - center_y) / (rows / 2)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    center_pdf = (1 - dist_x**2) * (1 - dist_y**2)
    center_pdf = np.clip(center_pdf, 0, 1)
    edge_weight = 0.7
    pdf = edge_weight * k_space_energy + (1 - edge_weight) * center_pdf
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"  Edge-Enhanced Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# --- 3. ISTA FUNCTIONS ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    print(f"Starting ISTA: iterations={n_iters}, lambda={lambda_val}, wavelet={wavelet}, level={level}")
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iteration {i+1}/{n_iters}, Current PSNR: {current_psnr:.4f} dB")
    return np.clip(np.real(x_recon), 0, 1)

# --- 4. PROCESS FASTMRI ---
num_subjects = min(10, len(h5_files))
slices_per_subject = 5
h5_files = h5_files[:num_subjects]
all_results = []
fixed_R = 4
optimal_lambda = 0.0001
optimal_iters = 10
masks_to_test = [
    ('Cartesian', lambda shape, R: create_cartesian_mask(shape, R)),
    ('Random 2D', lambda shape, R: create_random_2d_mask(shape, R, seed=0)),
    ('Variable Density', lambda shape, R: create_variable_density_mask(shape, R, poly_degree=2, seed=0)),
    ('Edge-Enhanced', lambda shape, R: create_edge_enhanced_mask(shape, R, ground_truth_image, seed=0))
]

for h5_path in h5_files:
    try:
        print(f"\nProcessing: {h5_path}")
        with h5py.File(h5_path, 'r') as f:
            kspace = f['kspace'][()]  # Shape: (slices, coils, height, width)
            print(f"  k-space shape: {kspace.shape}, dtype: {kspace.dtype}")
            num_slices = kspace.shape[0]
            central_idx = num_slices // 2
            slice_indices = range(central_idx - 2, central_idx + 3)
            subject_results = []
            for slice_idx in slice_indices:
                if slice_idx >= num_slices:
                    print(f"  Skipping slice {slice_idx} (out of bounds)")
                    continue
                print(f"\nProcessing slice {slice_idx}")
                kspace_slice = kspace[slice_idx]  # Shape: (coils, height, width)
                img_coils = ifft2(ifftshift(kspace_slice, axes=(1, 2)), axes=(1, 2))
                img_rss = np.sqrt(np.sum(np.abs(img_coils)**2, axis=0))
                img_rss = resize(img_rss, (256, 256), anti_aliasing=True)
                ground_truth_image = img_rss.astype(np.float32)
                if np.max(ground_truth_image) > np.min(ground_truth_image):
                    ground_truth_image = (ground_truth_image - np.min(ground_truth_image)) / \
                                         (np.max(ground_truth_image) - np.min(ground_truth_image))
                else:
                    ground_truth_image = np.zeros_like(ground_truth_image)
                print(f"Selected 2D slice (shape {ground_truth_image.shape}, "
                      f"range [{np.min(ground_truth_image):.2f}, {np.max(ground_truth_image):.2f}])")

                plt.figure(figsize=(8, 8))
                plt.imshow(ground_truth_image, cmap='gray')
                plt.title(f"Ground Truth (File: {os.path.basename(h5_path)}, Slice: {slice_idx})")
                plt.axis('off')
                plt.show()

                k_space_full = fftshift(fft2(ground_truth_image))
                results = []
                for mask_name, mask_func in masks_to_test:
                    print(f"\nTesting {mask_name} Mask (R={fixed_R}) for slice {slice_idx}")
                    try:
                        start_time = time.time()
                        mask = mask_func(k_space_full.shape, fixed_R)
                        k_space_undersampled = k_space_full * mask
                        zf_recon = np.abs(ifft2(ifftshift(k_space_undersampled)))
                        psnr_zf = psnr(ground_truth_image, zf_recon, data_range=1.0)
                        ssim_zf = ssim(ground_truth_image, zf_recon, data_range=1.0, channel_axis=None)
                        ista_recon = ista_wavelet_cs(
                            k_space_undersampled, mask, zf_recon.copy(),
                            n_iters=optimal_iters, lambda_val=optimal_lambda,
                            ground_truth_for_psnr=ground_truth_image
                        )
                        psnr_ista = psnr(ground_truth_image, ista_recon, data_range=1.0)
                        ssim_ista = ssim(ground_truth_image, ista_recon, data_range=1.0, channel_axis=None)
                        results.append({
                            'name': mask_name, 'mask': mask, 'zf_recon': zf_recon, 'ista_recon': ista_recon,
                            'psnr_zf': psnr_zf, 'ssim_zf': ssim_zf, 'psnr_ista': psnr_ista, 'ssim_ista': ssim_ista,
                            'time': time.time() - start_time, 'subject': os.path.basename(h5_path), 'slice': slice_idx
                        })
                        print(f"{mask_name} Mask: ZF PSNR={psnr_zf:.2f}, ISTA PSNR={psnr_ista:.2f}, "
                              f"ZF SSIM={ssim_zf:.4f}, ISTA SSIM={ssim_ista:.4f}, Time={results[-1]['time']:.2f}s")
                    except Exception as e:
                        print(f"ERROR in CS simulation for {mask_name}: {e}")
                        continue
                subject_results.append(results)

                plt.figure(figsize=(18, 12))
                for i, res in enumerate(results):
                    plt.subplot(4, 5, i*5 + 1)
                    plt.imshow(fftshift(res['mask']), cmap='gray')
                    plt.title(f"{res['name']} Mask\n(R={fixed_R})")
                    plt.axis('off')
                    plt.subplot(4, 5, i*5 + 2)
                    plt.imshow(res['zf_recon'], cmap='gray', vmin=0, vmax=1)
                    plt.title(f"ZF ({res['name']})\nPSNR: {res['psnr_zf']:.2f}\nSSIM: {res['ssim_zf']:.4f}")
                    plt.axis('off')
                    plt.subplot(4, 5, i*5 + 3)
                    plt.imshow(res['ista_recon'], cmap='gray', vmin=0, vmax=1)
                    plt.title(f"ISTA ({res['name']})\nPSNR: {res['psnr_ista']:.2f}\nSSIM: {res['ssim_ista']:.4f}")
                    plt.axis('off')
                    diff = np.abs(ground_truth_image - res['ista_recon'])
                    plt.subplot(4, 5, i*5 + 4)
                    plt.imshow(diff, cmap='hot', vmin=0, vmax=np.percentile(diff, 99))
                    plt.title(f"ISTA Diff\nMean Err: {np.mean(diff):.4f}")
                    plt.axis('off')
                    if i == 0:
                        plt.subplot(4, 5, 5)
                        plt.imshow(ground_truth_image, cmap='gray', vmin=0, vmax=1)
                        plt.title("Ground Truth")
                        plt.axis('off')
                plt.tight_layout()
                plt.savefig(f'results_{os.path.basename(h5_path)}_slice_{slice_idx}.png', dpi=300)
                plt.close()
                gc.collect()

            all_results.append(subject_results)
    except Exception as e:
        print(f"  ERROR loading file '{h5_path}': {e}")
        continue

# --- 5. SUMMARIZE RESULTS ---
print("\n--- Summary of Results (R=4) ---")
print(f"{'Subject':<30} | {'Slice':<10} | {'Mask':<15} | {'ZF PSNR':<10} | {'ISTA PSNR':<10} | {'ZF SSIM':<10} | {'ISTA SSIM':<10} | {'Time (s)':<10}")
print("-" * 100)
for subject_results in all_results:
    for results in subject_results:
        for res in results:
            print(f"{res['subject'][:29]:<30} | {res['slice']:<10} | {res['name']:<15} | {res['psnr_zf']:<10.2f} | {res['psnr_ista']:<10.2f} | "
                  f"{res['ssim_zf']:<10.4f} | {res['ssim_ista']:<10.4f} | {res['time']:<10.2f}")

metrics = {'psnr_zf': [], 'psnr_ista': [], 'ssim_zf': [], 'ssim_ista': []}
for subject_results in all_results:
    for results in subject_results:
        for res in results:
            metrics['psnr_zf'].append(res['psnr_zf'])
            metrics['psnr_ista'].append(res['psnr_ista'])
            metrics['ssim_zf'].append(res['ssim_zf'])
            metrics['ssim_ista'].append(res['ssim_ista'])

print("\n--- Mean/Std Metrics (R=4) ---")
for metric, values in metrics.items():
    print(f"{metric}: Mean={np.mean(values):.4f}, Std={np.std(values):.4f}")

print("\n--- Experiments Complete ---")

Attempting to access base dataset path: /kaggle/input/fastmri-brain-multicoil
Successfully located base dataset path: /kaggle/input/fastmri-brain-multicoil
Found 57 .h5 files

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXFLAIR_200_6002441.h5
  k-space shape: (16, 20, 640, 320), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.1620 dB
ISTA Iteration 2/10, Current PSNR: 43.4053 dB
ISTA Iteration 3/10, Current PSNR: 43.4683 dB
ISTA Iteration 4/10, Current PSNR: 43.4842 dB
ISTA Iteration 5/10, Current PSNR: 43.4881 dB
ISTA Iteration 6/10, Current PSNR: 43.4891 dB
ISTA Iteration 7/10, Current PSNR: 43.4894 dB
ISTA Iteration 8/10, Current PSNR: 43.4895 dB
ISTA Iteration 9/10, Current PSNR: 43.4895 dB
ISTA Iteration 10/10, Current PSNR: 43.4895 dB
Cartesian Mask: ZF PSNR=42.31, ISTA PSNR=43.49, ZF SSIM=0.9861, ISTA SSIM=0.9890, Time=0.12s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.9435 dB
ISTA Iteration 2/10, Current PSNR: 30.2513 dB
ISTA Iteration 3/10, Current PSNR: 30.3630 dB
ISTA Iteration 4/10, Current PSNR: 30.4074 dB
ISTA Iteration 5/10, Current PSNR: 30.4268 dB
ISTA Iteration 6/10, Current PSNR: 30.4357 dB
ISTA Iteration 7/10, Current PSNR: 30.4400 dB
ISTA Iteration 8/10, Current PSNR: 30.4421 dB
ISTA Iteration 9/10, Current PSNR: 30.4431 dB
ISTA Iteration 10/10, Current PSNR: 30.4436 dB
Random 2D Mask: ZF PSNR=28.87, ISTA PSNR=30.44, ZF SSIM=0.7747, ISTA SSIM=0.7622, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.7425 dB
ISTA Iteration 2/10, Current PSNR: 42.7425 dB
ISTA Iteration 3/10, Current PSNR: 42.7425 dB
ISTA Iteration 4/10, Current PSNR: 42.7425 dB
ISTA Iteration 5/10, Current PSNR: 42.7425 dB
ISTA Iteration 6/10, Current PSNR: 42.7425 dB
ISTA Iteration 7/10, Current PSNR: 42.7425 dB
ISTA Iteration 8/10, Current PSNR: 42.7425 dB
ISTA Iteration 9/10, Current PSNR: 42.7425 dB
ISTA Iteration 10/10, Current PSNR: 42.7425 dB
Variable Density Mask: ZF PSNR=42.74, ISTA PSNR=42.74, ZF SSIM=0.9865, ISTA SSIM=0.9865, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.9052 dB
ISTA Iteration 2/10, Current PSNR: 45.9052 dB
ISTA Iteration 3/10, Current PSNR: 45.9053 dB
ISTA Iteration 4/10, Current PSNR: 45.9053 dB
ISTA Iteration 5/10, Current PSNR: 45.9053 dB
ISTA Iteration 6/10, Current PSNR: 45.9053 dB
ISTA Iteration 7/10, Current PSNR: 45.9053 dB
ISTA Iteration 8/10, Current PSNR: 45.9053 dB
ISTA Iteration 9/10, Current PSNR: 45.9053 dB
ISTA Iteration 10/10, Current PSNR: 45.9053 dB
Edge-Enhanced Mask: ZF PSNR=45.90, ISTA PSNR=45.91, ZF SSIM=0.9889, ISTA SSIM=0.9889, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.7973 dB
ISTA Iteration 2/10, Current PSNR: 42.9221 dB
ISTA Iteration 3/10, Current PSNR: 42.9539 dB
ISTA Iteration 4/10, Current PSNR: 42.9618 dB
ISTA Iteration 5/10, Current PSNR: 42.9638 dB
ISTA Iteration 6/10, Current PSNR: 42.9643 dB
ISTA Iteration 7/10, Current PSNR: 42.9645 dB
ISTA Iteration 8/10, Current PSNR: 42.9645 dB
ISTA Iteration 9/10, Current PSNR: 42.9645 dB
ISTA Iteration 10/10, Current PSNR: 42.9645 dB
Cartesian Mask: ZF PSNR=42.33, ISTA PSNR=42.96, ZF SSIM=0.9832, ISTA SSIM=0.9842, Time=0.12s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.4487 dB
ISTA Iteration 2/10, Current PSNR: 28.7389 dB
ISTA Iteration 3/10, Current PSNR: 28.8496 dB
ISTA Iteration 4/10, Current PSNR: 28.8954 dB
ISTA Iteration 5/10, Current PSNR: 28.9159 dB
ISTA Iteration 6/10, Current PSNR: 28.9255 dB
ISTA Iteration 7/10, Current PSNR: 28.9301 dB
ISTA Iteration 8/10, Current PSNR: 28.9324 dB
ISTA Iteration 9/10, Current PSNR: 28.9336 dB
ISTA Iteration 10/10, Current PSNR: 28.9341 dB
Random 2D Mask: ZF PSNR=27.47, ISTA PSNR=28.93, ZF SSIM=0.7705, ISTA SSIM=0.7173, Time=0.14s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.4999 dB
ISTA Iteration 2/10, Current PSNR: 42.4999 dB
ISTA Iteration 3/10, Current PSNR: 42.4999 dB
ISTA Iteration 4/10, Current PSNR: 42.4999 dB
ISTA Iteration 5/10, Current PSNR: 42.4999 dB
ISTA Iteration 6/10, Current PSNR: 42.4999 dB
ISTA Iteration 7/10, Current PSNR: 42.4999 dB
ISTA Iteration 8/10, Current PSNR: 42.4999 dB
ISTA Iteration 9/10, Current PSNR: 42.4999 dB
ISTA Iteration 10/10, Current PSNR: 42.4999 dB
Variable Density Mask: ZF PSNR=42.50, ISTA PSNR=42.50, ZF SSIM=0.9874, ISTA SSIM=0.9874, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.6465 dB
ISTA Iteration 2/10, Current PSNR: 46.6465 dB
ISTA Iteration 3/10, Current PSNR: 46.6465 dB
ISTA Iteration 4/10, Current PSNR: 46.6465 dB
ISTA Iteration 5/10, Current PSNR: 46.6465 dB
ISTA Iteration 6/10, Current PSNR: 46.6465 dB
ISTA Iteration 7/10, Current PSNR: 46.6465 dB
ISTA Iteration 8/10, Current PSNR: 46.6465 dB
ISTA Iteration 9/10, Current PSNR: 46.6465 dB
ISTA Iteration 10/10, Current PSNR: 46.6465 dB
Edge-Enhanced Mask: ZF PSNR=46.65, ISTA PSNR=46.65, ZF SSIM=0.9895, ISTA SSIM=0.9895, Time=0.14s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.3075 dB
ISTA Iteration 2/10, Current PSNR: 43.4478 dB
ISTA Iteration 3/10, Current PSNR: 43.4836 dB
ISTA Iteration 4/10, Current PSNR: 43.4926 dB
ISTA Iteration 5/10, Current PSNR: 43.4948 dB
ISTA Iteration 6/10, Current PSNR: 43.4954 dB
ISTA Iteration 7/10, Current PSNR: 43.4955 dB
ISTA Iteration 8/10, Current PSNR: 43.4956 dB
ISTA Iteration 9/10, Current PSNR: 43.4956 dB
ISTA Iteration 10/10, Current PSNR: 43.4956 dB
Cartesian Mask: ZF PSNR=42.79, ISTA PSNR=43.50, ZF SSIM=0.9862, ISTA SSIM=0.9878, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.8724 dB
ISTA Iteration 2/10, Current PSNR: 31.1841 dB
ISTA Iteration 3/10, Current PSNR: 31.3000 dB
ISTA Iteration 4/10, Current PSNR: 31.3470 dB
ISTA Iteration 5/10, Current PSNR: 31.3676 dB
ISTA Iteration 6/10, Current PSNR: 31.3772 dB
ISTA Iteration 7/10, Current PSNR: 31.3819 dB
ISTA Iteration 8/10, Current PSNR: 31.3841 dB
ISTA Iteration 9/10, Current PSNR: 31.3853 dB
ISTA Iteration 10/10, Current PSNR: 31.3858 dB
Random 2D Mask: ZF PSNR=29.80, ISTA PSNR=31.39, ZF SSIM=0.7948, ISTA SSIM=0.7725, Time=0.13s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.6788 dB
ISTA Iteration 2/10, Current PSNR: 43.6788 dB
ISTA Iteration 3/10, Current PSNR: 43.6788 dB
ISTA Iteration 4/10, Current PSNR: 43.6788 dB
ISTA Iteration 5/10, Current PSNR: 43.6788 dB
ISTA Iteration 6/10, Current PSNR: 43.6788 dB
ISTA Iteration 7/10, Current PSNR: 43.6788 dB
ISTA Iteration 8/10, Current PSNR: 43.6788 dB
ISTA Iteration 9/10, Current PSNR: 43.6788 dB
ISTA Iteration 10/10, Current PSNR: 43.6788 dB
Variable Density Mask: ZF PSNR=43.68, ISTA PSNR=43.68, ZF SSIM=0.9884, ISTA SSIM=0.9884, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.2683 dB
ISTA Iteration 2/10, Current PSNR: 46.2683 dB
ISTA Iteration 3/10, Current PSNR: 46.2683 dB
ISTA Iteration 4/10, Current PSNR: 46.2683 dB
ISTA Iteration 5/10, Current PSNR: 46.2683 dB
ISTA Iteration 6/10, Current PSNR: 46.2683 dB
ISTA Iteration 7/10, Current PSNR: 46.2683 dB
ISTA Iteration 8/10, Current PSNR: 46.2683 dB
ISTA Iteration 9/10, Current PSNR: 46.2683 dB
ISTA Iteration 10/10, Current PSNR: 46.2683 dB
Edge-Enhanced Mask: ZF PSNR=46.27, ISTA PSNR=46.27, ZF SSIM=0.9897, ISTA SSIM=0.9897, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.8632 dB
ISTA Iteration 2/10, Current PSNR: 43.9657 dB
ISTA Iteration 3/10, Current PSNR: 43.9916 dB
ISTA Iteration 4/10, Current PSNR: 43.9982 dB
ISTA Iteration 5/10, Current PSNR: 43.9998 dB
ISTA Iteration 6/10, Current PSNR: 44.0002 dB
ISTA Iteration 7/10, Current PSNR: 44.0003 dB
ISTA Iteration 8/10, Current PSNR: 44.0003 dB
ISTA Iteration 9/10, Current PSNR: 44.0003 dB
ISTA Iteration 10/10, Current PSNR: 44.0003 dB
Cartesian Mask: ZF PSNR=43.48, ISTA PSNR=44.00, ZF SSIM=0.9852, ISTA SSIM=0.9864, Time=0.11s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.1632 dB
ISTA Iteration 2/10, Current PSNR: 30.4457 dB
ISTA Iteration 3/10, Current PSNR: 30.5516 dB
ISTA Iteration 4/10, Current PSNR: 30.5952 dB
ISTA Iteration 5/10, Current PSNR: 30.6146 dB
ISTA Iteration 6/10, Current PSNR: 30.6236 dB
ISTA Iteration 7/10, Current PSNR: 30.6280 dB
ISTA Iteration 8/10, Current PSNR: 30.6302 dB
ISTA Iteration 9/10, Current PSNR: 30.6312 dB
ISTA Iteration 10/10, Current PSNR: 30.6318 dB
Random 2D Mask: ZF PSNR=29.18, ISTA PSNR=30.63, ZF SSIM=0.8045, ISTA SSIM=0.7617, Time=0.15s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 44.8742 dB
ISTA Iteration 2/10, Current PSNR: 44.8742 dB
ISTA Iteration 3/10, Current PSNR: 44.8743 dB
ISTA Iteration 4/10, Current PSNR: 44.8743 dB
ISTA Iteration 5/10, Current PSNR: 44.8743 dB
ISTA Iteration 6/10, Current PSNR: 44.8743 dB
ISTA Iteration 7/10, Current PSNR: 44.8743 dB
ISTA Iteration 8/10, Current PSNR: 44.8743 dB
ISTA Iteration 9/10, Current PSNR: 44.8743 dB
ISTA Iteration 10/10, Current PSNR: 44.8743 dB
Variable Density Mask: ZF PSNR=44.87, ISTA PSNR=44.87, ZF SSIM=0.9900, ISTA SSIM=0.9900, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.5619 dB
ISTA Iteration 2/10, Current PSNR: 47.5619 dB
ISTA Iteration 3/10, Current PSNR: 47.5619 dB
ISTA Iteration 4/10, Current PSNR: 47.5619 dB
ISTA Iteration 5/10, Current PSNR: 47.5619 dB
ISTA Iteration 6/10, Current PSNR: 47.5619 dB
ISTA Iteration 7/10, Current PSNR: 47.5619 dB
ISTA Iteration 8/10, Current PSNR: 47.5619 dB
ISTA Iteration 9/10, Current PSNR: 47.5619 dB
ISTA Iteration 10/10, Current PSNR: 47.5619 dB
Edge-Enhanced Mask: ZF PSNR=47.56, ISTA PSNR=47.56, ZF SSIM=0.9913, ISTA SSIM=0.9913, Time=0.13s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 44.6607 dB
ISTA Iteration 2/10, Current PSNR: 44.7985 dB
ISTA Iteration 3/10, Current PSNR: 44.8336 dB
ISTA Iteration 4/10, Current PSNR: 44.8424 dB
ISTA Iteration 5/10, Current PSNR: 44.8446 dB
ISTA Iteration 6/10, Current PSNR: 44.8452 dB
ISTA Iteration 7/10, Current PSNR: 44.8453 dB
ISTA Iteration 8/10, Current PSNR: 44.8454 dB
ISTA Iteration 9/10, Current PSNR: 44.8454 dB
ISTA Iteration 10/10, Current PSNR: 44.8454 dB
Cartesian Mask: ZF PSNR=44.15, ISTA PSNR=44.85, ZF SSIM=0.9878, ISTA SSIM=0.9893, Time=0.12s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.3711 dB
ISTA Iteration 2/10, Current PSNR: 33.6185 dB
ISTA Iteration 3/10, Current PSNR: 33.7069 dB
ISTA Iteration 4/10, Current PSNR: 33.7416 dB
ISTA Iteration 5/10, Current PSNR: 33.7567 dB
ISTA Iteration 6/10, Current PSNR: 33.7636 dB
ISTA Iteration 7/10, Current PSNR: 33.7669 dB
ISTA Iteration 8/10, Current PSNR: 33.7685 dB
ISTA Iteration 9/10, Current PSNR: 33.7693 dB
ISTA Iteration 10/10, Current PSNR: 33.7697 dB
Random 2D Mask: ZF PSNR=32.50, ISTA PSNR=33.77, ZF SSIM=0.8597, ISTA SSIM=0.8322, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.0019 dB
ISTA Iteration 2/10, Current PSNR: 47.0019 dB
ISTA Iteration 3/10, Current PSNR: 47.0019 dB
ISTA Iteration 4/10, Current PSNR: 47.0019 dB
ISTA Iteration 5/10, Current PSNR: 47.0019 dB
ISTA Iteration 6/10, Current PSNR: 47.0019 dB
ISTA Iteration 7/10, Current PSNR: 47.0019 dB
ISTA Iteration 8/10, Current PSNR: 47.0019 dB
ISTA Iteration 9/10, Current PSNR: 47.0019 dB
ISTA Iteration 10/10, Current PSNR: 47.0019 dB
Variable Density Mask: ZF PSNR=47.00, ISTA PSNR=47.00, ZF SSIM=0.9923, ISTA SSIM=0.9923, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.1675 dB
ISTA Iteration 2/10, Current PSNR: 48.1675 dB
ISTA Iteration 3/10, Current PSNR: 48.1675 dB
ISTA Iteration 4/10, Current PSNR: 48.1675 dB
ISTA Iteration 5/10, Current PSNR: 48.1675 dB
ISTA Iteration 6/10, Current PSNR: 48.1675 dB
ISTA Iteration 7/10, Current PSNR: 48.1675 dB
ISTA Iteration 8/10, Current PSNR: 48.1675 dB
ISTA Iteration 9/10, Current PSNR: 48.1675 dB
ISTA Iteration 10/10, Current PSNR: 48.1675 dB
Edge-Enhanced Mask: ZF PSNR=48.17, ISTA PSNR=48.17, ZF SSIM=0.9924, ISTA SSIM=0.9924, Time=0.12s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT1POST_207_2070561.h5
  k-space shape: (16, 4, 640, 322), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.0921 dB
ISTA Iteration 2/10, Current PSNR: 34.2875 dB
ISTA Iteration 3/10, Current PSNR: 34.3455 dB
ISTA Iteration 4/10, Current PSNR: 34.3640 dB
ISTA Iteration 5/10, Current PSNR: 34.3705 dB
ISTA Iteration 6/10, Current PSNR: 34.3731 dB
ISTA Iteration 7/10, Current PSNR: 34.3742 dB
ISTA Iteration 8/10, Current PSNR: 34.3748 dB
ISTA Iteration 9/10, Current PSNR: 34.3750 dB
ISTA Iteration 10/10, Current PSNR: 34.3751 dB
Cartesian Mask: ZF PSNR=33.36, ISTA PSNR=34.38, ZF SSIM=0.9242, ISTA SSIM=0.9296, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.8661 dB
ISTA Iteration 2/10, Current PSNR: 28.2601 dB
ISTA Iteration 3/10, Current PSNR: 28.4156 dB
ISTA Iteration 4/10, Current PSNR: 28.4812 dB
ISTA Iteration 5/10, Current PSNR: 28.5107 dB
ISTA Iteration 6/10, Current PSNR: 28.5247 dB
ISTA Iteration 7/10, Current PSNR: 28.5314 dB
ISTA Iteration 8/10, Current PSNR: 28.5348 dB
ISTA Iteration 9/10, Current PSNR: 28.5364 dB
ISTA Iteration 10/10, Current PSNR: 28.5372 dB
Random 2D Mask: ZF PSNR=26.29, ISTA PSNR=28.54, ZF SSIM=0.6081, ISTA SSIM=0.6691, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.8645 dB
ISTA Iteration 2/10, Current PSNR: 37.8648 dB
ISTA Iteration 3/10, Current PSNR: 37.8648 dB
ISTA Iteration 4/10, Current PSNR: 37.8648 dB
ISTA Iteration 5/10, Current PSNR: 37.8649 dB
ISTA Iteration 6/10, Current PSNR: 37.8649 dB
ISTA Iteration 7/10, Current PSNR: 37.8649 dB
ISTA Iteration 8/10, Current PSNR: 37.8649 dB
ISTA Iteration 9/10, Current PSNR: 37.8649 dB
ISTA Iteration 10/10, Current PSNR: 37.8649 dB
Variable Density Mask: ZF PSNR=37.71, ISTA PSNR=37.86, ZF SSIM=0.9787, ISTA SSIM=0.9791, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.8216 dB
ISTA Iteration 2/10, Current PSNR: 41.8216 dB
ISTA Iteration 3/10, Current PSNR: 41.8216 dB
ISTA Iteration 4/10, Current PSNR: 41.8216 dB
ISTA Iteration 5/10, Current PSNR: 41.8216 dB
ISTA Iteration 6/10, Current PSNR: 41.8216 dB
ISTA Iteration 7/10, Current PSNR: 41.8216 dB
ISTA Iteration 8/10, Current PSNR: 41.8216 dB
ISTA Iteration 9/10, Current PSNR: 41.8216 dB
ISTA Iteration 10/10, Current PSNR: 41.8216 dB
Edge-Enhanced Mask: ZF PSNR=41.39, ISTA PSNR=41.82, ZF SSIM=0.9591, ISTA SSIM=0.9676, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.0461 dB
ISTA Iteration 2/10, Current PSNR: 34.2458 dB
ISTA Iteration 3/10, Current PSNR: 34.3048 dB
ISTA Iteration 4/10, Current PSNR: 34.3234 dB
ISTA Iteration 5/10, Current PSNR: 34.3300 dB
ISTA Iteration 6/10, Current PSNR: 34.3327 dB
ISTA Iteration 7/10, Current PSNR: 34.3338 dB
ISTA Iteration 8/10, Current PSNR: 34.3343 dB
ISTA Iteration 9/10, Current PSNR: 34.3346 dB
ISTA Iteration 10/10, Current PSNR: 34.3347 dB
Cartesian Mask: ZF PSNR=33.30, ISTA PSNR=34.33, ZF SSIM=0.9256, ISTA SSIM=0.9313, Time=0.11s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5271 dB
ISTA Iteration 2/10, Current PSNR: 27.9064 dB
ISTA Iteration 3/10, Current PSNR: 28.0559 dB
ISTA Iteration 4/10, Current PSNR: 28.1192 dB
ISTA Iteration 5/10, Current PSNR: 28.1477 dB
ISTA Iteration 6/10, Current PSNR: 28.1612 dB
ISTA Iteration 7/10, Current PSNR: 28.1678 dB
ISTA Iteration 8/10, Current PSNR: 28.1710 dB
ISTA Iteration 9/10, Current PSNR: 28.1726 dB
ISTA Iteration 10/10, Current PSNR: 28.1734 dB
Random 2D Mask: ZF PSNR=26.01, ISTA PSNR=28.17, ZF SSIM=0.6156, ISTA SSIM=0.6563, Time=0.13s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 38.8036 dB
ISTA Iteration 2/10, Current PSNR: 38.8039 dB
ISTA Iteration 3/10, Current PSNR: 38.8040 dB
ISTA Iteration 4/10, Current PSNR: 38.8040 dB
ISTA Iteration 5/10, Current PSNR: 38.8040 dB
ISTA Iteration 6/10, Current PSNR: 38.8040 dB
ISTA Iteration 7/10, Current PSNR: 38.8040 dB
ISTA Iteration 8/10, Current PSNR: 38.8040 dB
ISTA Iteration 9/10, Current PSNR: 38.8040 dB
ISTA Iteration 10/10, Current PSNR: 38.8040 dB
Variable Density Mask: ZF PSNR=38.71, ISTA PSNR=38.80, ZF SSIM=0.9818, ISTA SSIM=0.9819, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.4671 dB
ISTA Iteration 2/10, Current PSNR: 42.4672 dB
ISTA Iteration 3/10, Current PSNR: 42.4672 dB
ISTA Iteration 4/10, Current PSNR: 42.4672 dB
ISTA Iteration 5/10, Current PSNR: 42.4672 dB
ISTA Iteration 6/10, Current PSNR: 42.4672 dB
ISTA Iteration 7/10, Current PSNR: 42.4672 dB
ISTA Iteration 8/10, Current PSNR: 42.4672 dB
ISTA Iteration 9/10, Current PSNR: 42.4672 dB
ISTA Iteration 10/10, Current PSNR: 42.4672 dB
Edge-Enhanced Mask: ZF PSNR=42.17, ISTA PSNR=42.47, ZF SSIM=0.9662, ISTA SSIM=0.9705, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.2853 dB
ISTA Iteration 2/10, Current PSNR: 37.4847 dB
ISTA Iteration 3/10, Current PSNR: 37.5439 dB
ISTA Iteration 4/10, Current PSNR: 37.5627 dB
ISTA Iteration 5/10, Current PSNR: 37.5693 dB
ISTA Iteration 6/10, Current PSNR: 37.5719 dB
ISTA Iteration 7/10, Current PSNR: 37.5731 dB
ISTA Iteration 8/10, Current PSNR: 37.5736 dB
ISTA Iteration 9/10, Current PSNR: 37.5739 dB
ISTA Iteration 10/10, Current PSNR: 37.5740 dB
Cartesian Mask: ZF PSNR=36.54, ISTA PSNR=37.57, ZF SSIM=0.9482, ISTA SSIM=0.9520, Time=0.12s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.1112 dB
ISTA Iteration 2/10, Current PSNR: 31.5313 dB
ISTA Iteration 3/10, Current PSNR: 31.6975 dB
ISTA Iteration 4/10, Current PSNR: 31.7676 dB
ISTA Iteration 5/10, Current PSNR: 31.7991 dB
ISTA Iteration 6/10, Current PSNR: 31.8141 dB
ISTA Iteration 7/10, Current PSNR: 31.8213 dB
ISTA Iteration 8/10, Current PSNR: 31.8248 dB
ISTA Iteration 9/10, Current PSNR: 31.8266 dB
ISTA Iteration 10/10, Current PSNR: 31.8275 dB
Random 2D Mask: ZF PSNR=29.41, ISTA PSNR=31.83, ZF SSIM=0.6939, ISTA SSIM=0.7580, Time=0.13s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.1748 dB
ISTA Iteration 2/10, Current PSNR: 43.1749 dB
ISTA Iteration 3/10, Current PSNR: 43.1749 dB
ISTA Iteration 4/10, Current PSNR: 43.1749 dB
ISTA Iteration 5/10, Current PSNR: 43.1748 dB
ISTA Iteration 6/10, Current PSNR: 43.1748 dB
ISTA Iteration 7/10, Current PSNR: 43.1748 dB
ISTA Iteration 8/10, Current PSNR: 43.1748 dB
ISTA Iteration 9/10, Current PSNR: 43.1748 dB
ISTA Iteration 10/10, Current PSNR: 43.1748 dB
Variable Density Mask: ZF PSNR=43.05, ISTA PSNR=43.17, ZF SSIM=0.9893, ISTA SSIM=0.9893, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.9888 dB
ISTA Iteration 2/10, Current PSNR: 46.9888 dB
ISTA Iteration 3/10, Current PSNR: 46.9888 dB
ISTA Iteration 4/10, Current PSNR: 46.9888 dB
ISTA Iteration 5/10, Current PSNR: 46.9888 dB
ISTA Iteration 6/10, Current PSNR: 46.9888 dB
ISTA Iteration 7/10, Current PSNR: 46.9888 dB
ISTA Iteration 8/10, Current PSNR: 46.9888 dB
ISTA Iteration 9/10, Current PSNR: 46.9888 dB
ISTA Iteration 10/10, Current PSNR: 46.9888 dB
Edge-Enhanced Mask: ZF PSNR=46.89, ISTA PSNR=46.99, ZF SSIM=0.9879, ISTA SSIM=0.9886, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.8070 dB
ISTA Iteration 2/10, Current PSNR: 36.9904 dB
ISTA Iteration 3/10, Current PSNR: 37.0457 dB
ISTA Iteration 4/10, Current PSNR: 37.0638 dB
ISTA Iteration 5/10, Current PSNR: 37.0704 dB
ISTA Iteration 6/10, Current PSNR: 37.0731 dB
ISTA Iteration 7/10, Current PSNR: 37.0743 dB
ISTA Iteration 8/10, Current PSNR: 37.0749 dB
ISTA Iteration 9/10, Current PSNR: 37.0752 dB
ISTA Iteration 10/10, Current PSNR: 37.0753 dB
Cartesian Mask: ZF PSNR=36.10, ISTA PSNR=37.08, ZF SSIM=0.9501, ISTA SSIM=0.9525, Time=0.12s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.0703 dB
ISTA Iteration 2/10, Current PSNR: 30.4690 dB
ISTA Iteration 3/10, Current PSNR: 30.6274 dB
ISTA Iteration 4/10, Current PSNR: 30.6947 dB
ISTA Iteration 5/10, Current PSNR: 30.7251 dB
ISTA Iteration 6/10, Current PSNR: 30.7395 dB
ISTA Iteration 7/10, Current PSNR: 30.7465 dB
ISTA Iteration 8/10, Current PSNR: 30.7500 dB
ISTA Iteration 9/10, Current PSNR: 30.7517 dB
ISTA Iteration 10/10, Current PSNR: 30.7525 dB
Random 2D Mask: ZF PSNR=28.41, ISTA PSNR=30.75, ZF SSIM=0.6761, ISTA SSIM=0.7337, Time=0.13s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.8921 dB
ISTA Iteration 2/10, Current PSNR: 43.8922 dB
ISTA Iteration 3/10, Current PSNR: 43.8923 dB
ISTA Iteration 4/10, Current PSNR: 43.8923 dB
ISTA Iteration 5/10, Current PSNR: 43.8923 dB
ISTA Iteration 6/10, Current PSNR: 43.8923 dB
ISTA Iteration 7/10, Current PSNR: 43.8923 dB
ISTA Iteration 8/10, Current PSNR: 43.8923 dB
ISTA Iteration 9/10, Current PSNR: 43.8923 dB
ISTA Iteration 10/10, Current PSNR: 43.8923 dB
Variable Density Mask: ZF PSNR=43.80, ISTA PSNR=43.89, ZF SSIM=0.9901, ISTA SSIM=0.9903, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.1599 dB
ISTA Iteration 2/10, Current PSNR: 47.1599 dB
ISTA Iteration 3/10, Current PSNR: 47.1599 dB
ISTA Iteration 4/10, Current PSNR: 47.1599 dB
ISTA Iteration 5/10, Current PSNR: 47.1599 dB
ISTA Iteration 6/10, Current PSNR: 47.1599 dB
ISTA Iteration 7/10, Current PSNR: 47.1599 dB
ISTA Iteration 8/10, Current PSNR: 47.1599 dB
ISTA Iteration 9/10, Current PSNR: 47.1599 dB
ISTA Iteration 10/10, Current PSNR: 47.1599 dB
Edge-Enhanced Mask: ZF PSNR=47.10, ISTA PSNR=47.16, ZF SSIM=0.9894, ISTA SSIM=0.9898, Time=0.13s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 35.3732 dB
ISTA Iteration 2/10, Current PSNR: 35.5815 dB
ISTA Iteration 3/10, Current PSNR: 35.6499 dB
ISTA Iteration 4/10, Current PSNR: 35.6745 dB
ISTA Iteration 5/10, Current PSNR: 35.6844 dB
ISTA Iteration 6/10, Current PSNR: 35.6887 dB
ISTA Iteration 7/10, Current PSNR: 35.6908 dB
ISTA Iteration 8/10, Current PSNR: 35.6917 dB
ISTA Iteration 9/10, Current PSNR: 35.6922 dB
ISTA Iteration 10/10, Current PSNR: 35.6924 dB
Cartesian Mask: ZF PSNR=34.56, ISTA PSNR=35.69, ZF SSIM=0.9413, ISTA SSIM=0.9424, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.6751 dB
ISTA Iteration 2/10, Current PSNR: 29.0764 dB
ISTA Iteration 3/10, Current PSNR: 29.2388 dB
ISTA Iteration 4/10, Current PSNR: 29.3084 dB
ISTA Iteration 5/10, Current PSNR: 29.3402 dB
ISTA Iteration 6/10, Current PSNR: 29.3553 dB
ISTA Iteration 7/10, Current PSNR: 29.3626 dB
ISTA Iteration 8/10, Current PSNR: 29.3662 dB
ISTA Iteration 9/10, Current PSNR: 29.3680 dB
ISTA Iteration 10/10, Current PSNR: 29.3689 dB
Random 2D Mask: ZF PSNR=26.95, ISTA PSNR=29.37, ZF SSIM=0.6456, ISTA SSIM=0.7021, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.2222 dB
ISTA Iteration 2/10, Current PSNR: 45.2224 dB
ISTA Iteration 3/10, Current PSNR: 45.2224 dB
ISTA Iteration 4/10, Current PSNR: 45.2224 dB
ISTA Iteration 5/10, Current PSNR: 45.2224 dB
ISTA Iteration 6/10, Current PSNR: 45.2224 dB
ISTA Iteration 7/10, Current PSNR: 45.2224 dB
ISTA Iteration 8/10, Current PSNR: 45.2224 dB
ISTA Iteration 9/10, Current PSNR: 45.2224 dB
ISTA Iteration 10/10, Current PSNR: 45.2224 dB
Variable Density Mask: ZF PSNR=45.15, ISTA PSNR=45.22, ZF SSIM=0.9913, ISTA SSIM=0.9914, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.5484 dB
ISTA Iteration 2/10, Current PSNR: 47.5485 dB
ISTA Iteration 3/10, Current PSNR: 47.5485 dB
ISTA Iteration 4/10, Current PSNR: 47.5485 dB
ISTA Iteration 5/10, Current PSNR: 47.5485 dB
ISTA Iteration 6/10, Current PSNR: 47.5485 dB
ISTA Iteration 7/10, Current PSNR: 47.5485 dB
ISTA Iteration 8/10, Current PSNR: 47.5485 dB
ISTA Iteration 9/10, Current PSNR: 47.5485 dB
ISTA Iteration 10/10, Current PSNR: 47.5485 dB
Edge-Enhanced Mask: ZF PSNR=47.52, ISTA PSNR=47.55, ZF SSIM=0.9905, ISTA SSIM=0.9906, Time=0.12s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_209_6001390.h5
  k-space shape: (16, 12, 768, 396), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.1323 dB
ISTA Iteration 2/10, Current PSNR: 33.3487 dB
ISTA Iteration 3/10, Current PSNR: 33.4266 dB
ISTA Iteration 4/10, Current PSNR: 33.4573 dB
ISTA Iteration 5/10, Current PSNR: 33.4706 dB
ISTA Iteration 6/10, Current PSNR: 33.4767 dB
ISTA Iteration 7/10, Current PSNR: 33.4796 dB
ISTA Iteration 8/10, Current PSNR: 33.4811 dB
ISTA Iteration 9/10, Current PSNR: 33.4818 dB
ISTA Iteration 10/10, Current PSNR: 33.4821 dB
Cartesian Mask: ZF PSNR=32.39, ISTA PSNR=33.48, ZF SSIM=0.9244, ISTA SSIM=0.9176, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.9513 dB
ISTA Iteration 2/10, Current PSNR: 29.3070 dB
ISTA Iteration 3/10, Current PSNR: 29.4503 dB
ISTA Iteration 4/10, Current PSNR: 29.5121 dB
ISTA Iteration 5/10, Current PSNR: 29.5404 dB
ISTA Iteration 6/10, Current PSNR: 29.5539 dB
ISTA Iteration 7/10, Current PSNR: 29.5605 dB
ISTA Iteration 8/10, Current PSNR: 29.5637 dB
ISTA Iteration 9/10, Current PSNR: 29.5653 dB
ISTA Iteration 10/10, Current PSNR: 29.5661 dB
Random 2D Mask: ZF PSNR=27.65, ISTA PSNR=29.57, ZF SSIM=0.6965, ISTA SSIM=0.7126, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.7992 dB
ISTA Iteration 2/10, Current PSNR: 42.7993 dB
ISTA Iteration 3/10, Current PSNR: 42.7993 dB
ISTA Iteration 4/10, Current PSNR: 42.7993 dB
ISTA Iteration 5/10, Current PSNR: 42.7993 dB
ISTA Iteration 6/10, Current PSNR: 42.7993 dB
ISTA Iteration 7/10, Current PSNR: 42.7993 dB
ISTA Iteration 8/10, Current PSNR: 42.7993 dB
ISTA Iteration 9/10, Current PSNR: 42.7993 dB
ISTA Iteration 10/10, Current PSNR: 42.7993 dB
Variable Density Mask: ZF PSNR=42.80, ISTA PSNR=42.80, ZF SSIM=0.9905, ISTA SSIM=0.9905, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.6365 dB
ISTA Iteration 2/10, Current PSNR: 45.6365 dB
ISTA Iteration 3/10, Current PSNR: 45.6365 dB
ISTA Iteration 4/10, Current PSNR: 45.6365 dB
ISTA Iteration 5/10, Current PSNR: 45.6365 dB
ISTA Iteration 6/10, Current PSNR: 45.6365 dB
ISTA Iteration 7/10, Current PSNR: 45.6365 dB
ISTA Iteration 8/10, Current PSNR: 45.6365 dB
ISTA Iteration 9/10, Current PSNR: 45.6365 dB
ISTA Iteration 10/10, Current PSNR: 45.6365 dB
Edge-Enhanced Mask: ZF PSNR=45.59, ISTA PSNR=45.64, ZF SSIM=0.9866, ISTA SSIM=0.9871, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.1017 dB
ISTA Iteration 2/10, Current PSNR: 34.3135 dB
ISTA Iteration 3/10, Current PSNR: 34.3905 dB
ISTA Iteration 4/10, Current PSNR: 34.4214 dB
ISTA Iteration 5/10, Current PSNR: 34.4349 dB
ISTA Iteration 6/10, Current PSNR: 34.4411 dB
ISTA Iteration 7/10, Current PSNR: 34.4441 dB
ISTA Iteration 8/10, Current PSNR: 34.4455 dB
ISTA Iteration 9/10, Current PSNR: 34.4463 dB
ISTA Iteration 10/10, Current PSNR: 34.4466 dB
Cartesian Mask: ZF PSNR=33.38, ISTA PSNR=34.45, ZF SSIM=0.9302, ISTA SSIM=0.9254, Time=0.11s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.4509 dB
ISTA Iteration 2/10, Current PSNR: 29.8010 dB
ISTA Iteration 3/10, Current PSNR: 29.9429 dB
ISTA Iteration 4/10, Current PSNR: 30.0044 dB
ISTA Iteration 5/10, Current PSNR: 30.0327 dB
ISTA Iteration 6/10, Current PSNR: 30.0462 dB
ISTA Iteration 7/10, Current PSNR: 30.0528 dB
ISTA Iteration 8/10, Current PSNR: 30.0560 dB
ISTA Iteration 9/10, Current PSNR: 30.0576 dB
ISTA Iteration 10/10, Current PSNR: 30.0584 dB
Random 2D Mask: ZF PSNR=28.16, ISTA PSNR=30.06, ZF SSIM=0.7087, ISTA SSIM=0.7172, Time=0.13s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.4521 dB
ISTA Iteration 2/10, Current PSNR: 42.4522 dB
ISTA Iteration 3/10, Current PSNR: 42.4522 dB
ISTA Iteration 4/10, Current PSNR: 42.4522 dB
ISTA Iteration 5/10, Current PSNR: 42.4522 dB
ISTA Iteration 6/10, Current PSNR: 42.4522 dB
ISTA Iteration 7/10, Current PSNR: 42.4522 dB
ISTA Iteration 8/10, Current PSNR: 42.4522 dB
ISTA Iteration 9/10, Current PSNR: 42.4522 dB
ISTA Iteration 10/10, Current PSNR: 42.4522 dB
Variable Density Mask: ZF PSNR=42.45, ISTA PSNR=42.45, ZF SSIM=0.9913, ISTA SSIM=0.9913, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.9619 dB
ISTA Iteration 2/10, Current PSNR: 45.9621 dB
ISTA Iteration 3/10, Current PSNR: 45.9622 dB
ISTA Iteration 4/10, Current PSNR: 45.9622 dB
ISTA Iteration 5/10, Current PSNR: 45.9622 dB
ISTA Iteration 6/10, Current PSNR: 45.9622 dB
ISTA Iteration 7/10, Current PSNR: 45.9622 dB
ISTA Iteration 8/10, Current PSNR: 45.9622 dB
ISTA Iteration 9/10, Current PSNR: 45.9622 dB
ISTA Iteration 10/10, Current PSNR: 45.9622 dB
Edge-Enhanced Mask: ZF PSNR=45.93, ISTA PSNR=45.96, ZF SSIM=0.9876, ISTA SSIM=0.9879, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.5034 dB
ISTA Iteration 2/10, Current PSNR: 34.7295 dB
ISTA Iteration 3/10, Current PSNR: 34.8158 dB
ISTA Iteration 4/10, Current PSNR: 34.8515 dB
ISTA Iteration 5/10, Current PSNR: 34.8675 dB
ISTA Iteration 6/10, Current PSNR: 34.8750 dB
ISTA Iteration 7/10, Current PSNR: 34.8787 dB
ISTA Iteration 8/10, Current PSNR: 34.8805 dB
ISTA Iteration 9/10, Current PSNR: 34.8814 dB
ISTA Iteration 10/10, Current PSNR: 34.8818 dB
Cartesian Mask: ZF PSNR=33.68, ISTA PSNR=34.88, ZF SSIM=0.9356, ISTA SSIM=0.9312, Time=0.12s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.6293 dB
ISTA Iteration 2/10, Current PSNR: 30.0085 dB
ISTA Iteration 3/10, Current PSNR: 30.1631 dB
ISTA Iteration 4/10, Current PSNR: 30.2302 dB
ISTA Iteration 5/10, Current PSNR: 30.2610 dB
ISTA Iteration 6/10, Current PSNR: 30.2757 dB
ISTA Iteration 7/10, Current PSNR: 30.2829 dB
ISTA Iteration 8/10, Current PSNR: 30.2864 dB
ISTA Iteration 9/10, Current PSNR: 30.2882 dB
ISTA Iteration 10/10, Current PSNR: 30.2890 dB
Random 2D Mask: ZF PSNR=28.29, ISTA PSNR=30.29, ZF SSIM=0.7103, ISTA SSIM=0.7231, Time=0.13s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.5000 dB
ISTA Iteration 2/10, Current PSNR: 43.5004 dB
ISTA Iteration 3/10, Current PSNR: 43.5005 dB
ISTA Iteration 4/10, Current PSNR: 43.5005 dB
ISTA Iteration 5/10, Current PSNR: 43.5005 dB
ISTA Iteration 6/10, Current PSNR: 43.5005 dB
ISTA Iteration 7/10, Current PSNR: 43.5005 dB
ISTA Iteration 8/10, Current PSNR: 43.5005 dB
ISTA Iteration 9/10, Current PSNR: 43.5005 dB
ISTA Iteration 10/10, Current PSNR: 43.5005 dB
Variable Density Mask: ZF PSNR=43.50, ISTA PSNR=43.50, ZF SSIM=0.9933, ISTA SSIM=0.9933, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.8919 dB
ISTA Iteration 2/10, Current PSNR: 46.8919 dB
ISTA Iteration 3/10, Current PSNR: 46.8919 dB
ISTA Iteration 4/10, Current PSNR: 46.8919 dB
ISTA Iteration 5/10, Current PSNR: 46.8919 dB
ISTA Iteration 6/10, Current PSNR: 46.8919 dB
ISTA Iteration 7/10, Current PSNR: 46.8919 dB
ISTA Iteration 8/10, Current PSNR: 46.8919 dB
ISTA Iteration 9/10, Current PSNR: 46.8919 dB
ISTA Iteration 10/10, Current PSNR: 46.8919 dB
Edge-Enhanced Mask: ZF PSNR=46.87, ISTA PSNR=46.89, ZF SSIM=0.9898, ISTA SSIM=0.9899, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.2637 dB
ISTA Iteration 2/10, Current PSNR: 33.5633 dB
ISTA Iteration 3/10, Current PSNR: 33.6798 dB
ISTA Iteration 4/10, Current PSNR: 33.7289 dB
ISTA Iteration 5/10, Current PSNR: 33.7510 dB
ISTA Iteration 6/10, Current PSNR: 33.7614 dB
ISTA Iteration 7/10, Current PSNR: 33.7665 dB
ISTA Iteration 8/10, Current PSNR: 33.7690 dB
ISTA Iteration 9/10, Current PSNR: 33.7702 dB
ISTA Iteration 10/10, Current PSNR: 33.7709 dB
Cartesian Mask: ZF PSNR=32.26, ISTA PSNR=33.77, ZF SSIM=0.9319, ISTA SSIM=0.9247, Time=0.11s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.1160 dB
ISTA Iteration 2/10, Current PSNR: 29.4697 dB
ISTA Iteration 3/10, Current PSNR: 29.6126 dB
ISTA Iteration 4/10, Current PSNR: 29.6744 dB
ISTA Iteration 5/10, Current PSNR: 29.7028 dB
ISTA Iteration 6/10, Current PSNR: 29.7163 dB
ISTA Iteration 7/10, Current PSNR: 29.7229 dB
ISTA Iteration 8/10, Current PSNR: 29.7262 dB
ISTA Iteration 9/10, Current PSNR: 29.7278 dB
ISTA Iteration 10/10, Current PSNR: 29.7286 dB
Random 2D Mask: ZF PSNR=27.85, ISTA PSNR=29.73, ZF SSIM=0.7167, ISTA SSIM=0.7122, Time=0.14s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.9296 dB
ISTA Iteration 2/10, Current PSNR: 42.9298 dB
ISTA Iteration 3/10, Current PSNR: 42.9298 dB
ISTA Iteration 4/10, Current PSNR: 42.9298 dB
ISTA Iteration 5/10, Current PSNR: 42.9298 dB
ISTA Iteration 6/10, Current PSNR: 42.9298 dB
ISTA Iteration 7/10, Current PSNR: 42.9298 dB
ISTA Iteration 8/10, Current PSNR: 42.9298 dB
ISTA Iteration 9/10, Current PSNR: 42.9298 dB
ISTA Iteration 10/10, Current PSNR: 42.9298 dB
Variable Density Mask: ZF PSNR=42.93, ISTA PSNR=42.93, ZF SSIM=0.9923, ISTA SSIM=0.9923, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.2047 dB
ISTA Iteration 2/10, Current PSNR: 46.2047 dB
ISTA Iteration 3/10, Current PSNR: 46.2047 dB
ISTA Iteration 4/10, Current PSNR: 46.2047 dB
ISTA Iteration 5/10, Current PSNR: 46.2047 dB
ISTA Iteration 6/10, Current PSNR: 46.2047 dB
ISTA Iteration 7/10, Current PSNR: 46.2047 dB
ISTA Iteration 8/10, Current PSNR: 46.2047 dB
ISTA Iteration 9/10, Current PSNR: 46.2047 dB
ISTA Iteration 10/10, Current PSNR: 46.2047 dB
Edge-Enhanced Mask: ZF PSNR=46.18, ISTA PSNR=46.20, ZF SSIM=0.9891, ISTA SSIM=0.9893, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.5800 dB
ISTA Iteration 2/10, Current PSNR: 34.8208 dB
ISTA Iteration 3/10, Current PSNR: 34.9162 dB
ISTA Iteration 4/10, Current PSNR: 34.9572 dB
ISTA Iteration 5/10, Current PSNR: 34.9759 dB
ISTA Iteration 6/10, Current PSNR: 34.9848 dB
ISTA Iteration 7/10, Current PSNR: 34.9892 dB
ISTA Iteration 8/10, Current PSNR: 34.9913 dB
ISTA Iteration 9/10, Current PSNR: 34.9924 dB
ISTA Iteration 10/10, Current PSNR: 34.9929 dB
Cartesian Mask: ZF PSNR=33.75, ISTA PSNR=34.99, ZF SSIM=0.9422, ISTA SSIM=0.9349, Time=0.12s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.3434 dB
ISTA Iteration 2/10, Current PSNR: 30.7425 dB
ISTA Iteration 3/10, Current PSNR: 30.9041 dB
ISTA Iteration 4/10, Current PSNR: 30.9738 dB
ISTA Iteration 5/10, Current PSNR: 31.0058 dB
ISTA Iteration 6/10, Current PSNR: 31.0210 dB
ISTA Iteration 7/10, Current PSNR: 31.0285 dB
ISTA Iteration 8/10, Current PSNR: 31.0321 dB
ISTA Iteration 9/10, Current PSNR: 31.0340 dB
ISTA Iteration 10/10, Current PSNR: 31.0349 dB
Random 2D Mask: ZF PSNR=28.93, ISTA PSNR=31.03, ZF SSIM=0.7389, ISTA SSIM=0.7373, Time=0.14s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.3604 dB
ISTA Iteration 2/10, Current PSNR: 42.3606 dB
ISTA Iteration 3/10, Current PSNR: 42.3606 dB
ISTA Iteration 4/10, Current PSNR: 42.3606 dB
ISTA Iteration 5/10, Current PSNR: 42.3606 dB
ISTA Iteration 6/10, Current PSNR: 42.3606 dB
ISTA Iteration 7/10, Current PSNR: 42.3606 dB
ISTA Iteration 8/10, Current PSNR: 42.3606 dB
ISTA Iteration 9/10, Current PSNR: 42.3606 dB
ISTA Iteration 10/10, Current PSNR: 42.3606 dB
Variable Density Mask: ZF PSNR=42.35, ISTA PSNR=42.36, ZF SSIM=0.9920, ISTA SSIM=0.9920, Time=0.14s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.0913 dB
ISTA Iteration 2/10, Current PSNR: 46.0913 dB
ISTA Iteration 3/10, Current PSNR: 46.0913 dB
ISTA Iteration 4/10, Current PSNR: 46.0913 dB
ISTA Iteration 5/10, Current PSNR: 46.0913 dB
ISTA Iteration 6/10, Current PSNR: 46.0913 dB
ISTA Iteration 7/10, Current PSNR: 46.0913 dB
ISTA Iteration 8/10, Current PSNR: 46.0913 dB
ISTA Iteration 9/10, Current PSNR: 46.0913 dB
ISTA Iteration 10/10, Current PSNR: 46.0913 dB
Edge-Enhanced Mask: ZF PSNR=46.05, ISTA PSNR=46.09, ZF SSIM=0.9890, ISTA SSIM=0.9891, Time=0.13s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_200_6002171.h5
  k-space shape: (16, 20, 768, 396), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.9267 dB
ISTA Iteration 2/10, Current PSNR: 42.0026 dB
ISTA Iteration 3/10, Current PSNR: 42.0217 dB
ISTA Iteration 4/10, Current PSNR: 42.0265 dB
ISTA Iteration 5/10, Current PSNR: 42.0277 dB
ISTA Iteration 6/10, Current PSNR: 42.0280 dB
ISTA Iteration 7/10, Current PSNR: 42.0281 dB
ISTA Iteration 8/10, Current PSNR: 42.0281 dB
ISTA Iteration 9/10, Current PSNR: 42.0281 dB
ISTA Iteration 10/10, Current PSNR: 42.0281 dB
Cartesian Mask: ZF PSNR=41.64, ISTA PSNR=42.03, ZF SSIM=0.9789, ISTA SSIM=0.9788, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.4248 dB
ISTA Iteration 2/10, Current PSNR: 31.7580 dB
ISTA Iteration 3/10, Current PSNR: 31.8855 dB
ISTA Iteration 4/10, Current PSNR: 31.9382 dB
ISTA Iteration 5/10, Current PSNR: 31.9616 dB
ISTA Iteration 6/10, Current PSNR: 31.9726 dB
ISTA Iteration 7/10, Current PSNR: 31.9779 dB
ISTA Iteration 8/10, Current PSNR: 31.9805 dB
ISTA Iteration 9/10, Current PSNR: 31.9818 dB
ISTA Iteration 10/10, Current PSNR: 31.9825 dB
Random 2D Mask: ZF PSNR=30.09, ISTA PSNR=31.98, ZF SSIM=0.7742, ISTA SSIM=0.7829, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.4316 dB
ISTA Iteration 2/10, Current PSNR: 41.4316 dB
ISTA Iteration 3/10, Current PSNR: 41.4316 dB
ISTA Iteration 4/10, Current PSNR: 41.4316 dB
ISTA Iteration 5/10, Current PSNR: 41.4316 dB
ISTA Iteration 6/10, Current PSNR: 41.4316 dB
ISTA Iteration 7/10, Current PSNR: 41.4316 dB
ISTA Iteration 8/10, Current PSNR: 41.4316 dB
ISTA Iteration 9/10, Current PSNR: 41.4316 dB
ISTA Iteration 10/10, Current PSNR: 41.4316 dB
Variable Density Mask: ZF PSNR=41.35, ISTA PSNR=41.43, ZF SSIM=0.9878, ISTA SSIM=0.9879, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.1155 dB
ISTA Iteration 2/10, Current PSNR: 47.1155 dB
ISTA Iteration 3/10, Current PSNR: 47.1155 dB
ISTA Iteration 4/10, Current PSNR: 47.1155 dB
ISTA Iteration 5/10, Current PSNR: 47.1155 dB
ISTA Iteration 6/10, Current PSNR: 47.1155 dB
ISTA Iteration 7/10, Current PSNR: 47.1155 dB
ISTA Iteration 8/10, Current PSNR: 47.1155 dB
ISTA Iteration 9/10, Current PSNR: 47.1155 dB
ISTA Iteration 10/10, Current PSNR: 47.1155 dB
Edge-Enhanced Mask: ZF PSNR=47.09, ISTA PSNR=47.12, ZF SSIM=0.9895, ISTA SSIM=0.9897, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.9584 dB
ISTA Iteration 2/10, Current PSNR: 42.0288 dB
ISTA Iteration 3/10, Current PSNR: 42.0466 dB
ISTA Iteration 4/10, Current PSNR: 42.0510 dB
ISTA Iteration 5/10, Current PSNR: 42.0522 dB
ISTA Iteration 6/10, Current PSNR: 42.0524 dB
ISTA Iteration 7/10, Current PSNR: 42.0525 dB
ISTA Iteration 8/10, Current PSNR: 42.0525 dB
ISTA Iteration 9/10, Current PSNR: 42.0525 dB
ISTA Iteration 10/10, Current PSNR: 42.0525 dB
Cartesian Mask: ZF PSNR=41.69, ISTA PSNR=42.05, ZF SSIM=0.9792, ISTA SSIM=0.9792, Time=0.12s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 32.0036 dB
ISTA Iteration 2/10, Current PSNR: 32.3803 dB
ISTA Iteration 3/10, Current PSNR: 32.5238 dB
ISTA Iteration 4/10, Current PSNR: 32.5831 dB
ISTA Iteration 5/10, Current PSNR: 32.6094 dB
ISTA Iteration 6/10, Current PSNR: 32.6217 dB
ISTA Iteration 7/10, Current PSNR: 32.6276 dB
ISTA Iteration 8/10, Current PSNR: 32.6306 dB
ISTA Iteration 9/10, Current PSNR: 32.6320 dB
ISTA Iteration 10/10, Current PSNR: 32.6327 dB
Random 2D Mask: ZF PSNR=30.54, ISTA PSNR=32.63, ZF SSIM=0.7841, ISTA SSIM=0.7951, Time=0.13s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.1074 dB
ISTA Iteration 2/10, Current PSNR: 43.1074 dB
ISTA Iteration 3/10, Current PSNR: 43.1074 dB
ISTA Iteration 4/10, Current PSNR: 43.1074 dB
ISTA Iteration 5/10, Current PSNR: 43.1074 dB
ISTA Iteration 6/10, Current PSNR: 43.1074 dB
ISTA Iteration 7/10, Current PSNR: 43.1074 dB
ISTA Iteration 8/10, Current PSNR: 43.1074 dB
ISTA Iteration 9/10, Current PSNR: 43.1074 dB
ISTA Iteration 10/10, Current PSNR: 43.1074 dB
Variable Density Mask: ZF PSNR=43.11, ISTA PSNR=43.11, ZF SSIM=0.9900, ISTA SSIM=0.9900, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.5416 dB
ISTA Iteration 2/10, Current PSNR: 47.5416 dB
ISTA Iteration 3/10, Current PSNR: 47.5416 dB
ISTA Iteration 4/10, Current PSNR: 47.5416 dB
ISTA Iteration 5/10, Current PSNR: 47.5416 dB
ISTA Iteration 6/10, Current PSNR: 47.5416 dB
ISTA Iteration 7/10, Current PSNR: 47.5416 dB
ISTA Iteration 8/10, Current PSNR: 47.5416 dB
ISTA Iteration 9/10, Current PSNR: 47.5416 dB
ISTA Iteration 10/10, Current PSNR: 47.5416 dB
Edge-Enhanced Mask: ZF PSNR=47.53, ISTA PSNR=47.54, ZF SSIM=0.9910, ISTA SSIM=0.9911, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.3889 dB
ISTA Iteration 2/10, Current PSNR: 43.4580 dB
ISTA Iteration 3/10, Current PSNR: 43.4754 dB
ISTA Iteration 4/10, Current PSNR: 43.4798 dB
ISTA Iteration 5/10, Current PSNR: 43.4809 dB
ISTA Iteration 6/10, Current PSNR: 43.4812 dB
ISTA Iteration 7/10, Current PSNR: 43.4812 dB
ISTA Iteration 8/10, Current PSNR: 43.4813 dB
ISTA Iteration 9/10, Current PSNR: 43.4813 dB
ISTA Iteration 10/10, Current PSNR: 43.4813 dB
Cartesian Mask: ZF PSNR=43.12, ISTA PSNR=43.48, ZF SSIM=0.9845, ISTA SSIM=0.9843, Time=0.12s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.9923 dB
ISTA Iteration 2/10, Current PSNR: 32.3509 dB
ISTA Iteration 3/10, Current PSNR: 32.4908 dB
ISTA Iteration 4/10, Current PSNR: 32.5499 dB
ISTA Iteration 5/10, Current PSNR: 32.5766 dB
ISTA Iteration 6/10, Current PSNR: 32.5892 dB
ISTA Iteration 7/10, Current PSNR: 32.5954 dB
ISTA Iteration 8/10, Current PSNR: 32.5984 dB
ISTA Iteration 9/10, Current PSNR: 32.5999 dB
ISTA Iteration 10/10, Current PSNR: 32.6006 dB
Random 2D Mask: ZF PSNR=30.65, ISTA PSNR=32.60, ZF SSIM=0.7893, ISTA SSIM=0.7997, Time=0.15s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.4227 dB
ISTA Iteration 2/10, Current PSNR: 42.4227 dB
ISTA Iteration 3/10, Current PSNR: 42.4227 dB
ISTA Iteration 4/10, Current PSNR: 42.4227 dB
ISTA Iteration 5/10, Current PSNR: 42.4227 dB
ISTA Iteration 6/10, Current PSNR: 42.4227 dB
ISTA Iteration 7/10, Current PSNR: 42.4227 dB
ISTA Iteration 8/10, Current PSNR: 42.4227 dB
ISTA Iteration 9/10, Current PSNR: 42.4227 dB
ISTA Iteration 10/10, Current PSNR: 42.4227 dB
Variable Density Mask: ZF PSNR=42.42, ISTA PSNR=42.42, ZF SSIM=0.9913, ISTA SSIM=0.9913, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.9193 dB
ISTA Iteration 2/10, Current PSNR: 47.9193 dB
ISTA Iteration 3/10, Current PSNR: 47.9193 dB
ISTA Iteration 4/10, Current PSNR: 47.9193 dB
ISTA Iteration 5/10, Current PSNR: 47.9193 dB
ISTA Iteration 6/10, Current PSNR: 47.9193 dB
ISTA Iteration 7/10, Current PSNR: 47.9193 dB
ISTA Iteration 8/10, Current PSNR: 47.9193 dB
ISTA Iteration 9/10, Current PSNR: 47.9193 dB
ISTA Iteration 10/10, Current PSNR: 47.9193 dB
Edge-Enhanced Mask: ZF PSNR=47.90, ISTA PSNR=47.92, ZF SSIM=0.9920, ISTA SSIM=0.9920, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.0535 dB
ISTA Iteration 2/10, Current PSNR: 43.1330 dB
ISTA Iteration 3/10, Current PSNR: 43.1532 dB
ISTA Iteration 4/10, Current PSNR: 43.1583 dB
ISTA Iteration 5/10, Current PSNR: 43.1596 dB
ISTA Iteration 6/10, Current PSNR: 43.1600 dB
ISTA Iteration 7/10, Current PSNR: 43.1601 dB
ISTA Iteration 8/10, Current PSNR: 43.1601 dB
ISTA Iteration 9/10, Current PSNR: 43.1601 dB
ISTA Iteration 10/10, Current PSNR: 43.1601 dB
Cartesian Mask: ZF PSNR=42.75, ISTA PSNR=43.16, ZF SSIM=0.9839, ISTA SSIM=0.9837, Time=0.11s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.3094 dB
ISTA Iteration 2/10, Current PSNR: 31.6241 dB
ISTA Iteration 3/10, Current PSNR: 31.7486 dB
ISTA Iteration 4/10, Current PSNR: 31.8017 dB
ISTA Iteration 5/10, Current PSNR: 31.8259 dB
ISTA Iteration 6/10, Current PSNR: 31.8374 dB
ISTA Iteration 7/10, Current PSNR: 31.8430 dB
ISTA Iteration 8/10, Current PSNR: 31.8457 dB
ISTA Iteration 9/10, Current PSNR: 31.8471 dB
ISTA Iteration 10/10, Current PSNR: 31.8478 dB
Random 2D Mask: ZF PSNR=30.18, ISTA PSNR=31.85, ZF SSIM=0.7882, ISTA SSIM=0.7888, Time=0.14s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.8477 dB
ISTA Iteration 2/10, Current PSNR: 41.8477 dB
ISTA Iteration 3/10, Current PSNR: 41.8477 dB
ISTA Iteration 4/10, Current PSNR: 41.8477 dB
ISTA Iteration 5/10, Current PSNR: 41.8477 dB
ISTA Iteration 6/10, Current PSNR: 41.8477 dB
ISTA Iteration 7/10, Current PSNR: 41.8477 dB
ISTA Iteration 8/10, Current PSNR: 41.8477 dB
ISTA Iteration 9/10, Current PSNR: 41.8477 dB
ISTA Iteration 10/10, Current PSNR: 41.8477 dB
Variable Density Mask: ZF PSNR=41.85, ISTA PSNR=41.85, ZF SSIM=0.9904, ISTA SSIM=0.9904, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.4068 dB
ISTA Iteration 2/10, Current PSNR: 47.4068 dB
ISTA Iteration 3/10, Current PSNR: 47.4068 dB
ISTA Iteration 4/10, Current PSNR: 47.4068 dB
ISTA Iteration 5/10, Current PSNR: 47.4068 dB
ISTA Iteration 6/10, Current PSNR: 47.4068 dB
ISTA Iteration 7/10, Current PSNR: 47.4068 dB
ISTA Iteration 8/10, Current PSNR: 47.4068 dB
ISTA Iteration 9/10, Current PSNR: 47.4068 dB
ISTA Iteration 10/10, Current PSNR: 47.4068 dB
Edge-Enhanced Mask: ZF PSNR=47.40, ISTA PSNR=47.41, ZF SSIM=0.9916, ISTA SSIM=0.9916, Time=0.13s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 44.3632 dB
ISTA Iteration 2/10, Current PSNR: 44.4395 dB
ISTA Iteration 3/10, Current PSNR: 44.4588 dB
ISTA Iteration 4/10, Current PSNR: 44.4636 dB
ISTA Iteration 5/10, Current PSNR: 44.4648 dB
ISTA Iteration 6/10, Current PSNR: 44.4651 dB
ISTA Iteration 7/10, Current PSNR: 44.4652 dB
ISTA Iteration 8/10, Current PSNR: 44.4652 dB
ISTA Iteration 9/10, Current PSNR: 44.4652 dB
ISTA Iteration 10/10, Current PSNR: 44.4652 dB
Cartesian Mask: ZF PSNR=44.07, ISTA PSNR=44.47, ZF SSIM=0.9864, ISTA SSIM=0.9864, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.2228 dB
ISTA Iteration 2/10, Current PSNR: 33.5520 dB
ISTA Iteration 3/10, Current PSNR: 33.6807 dB
ISTA Iteration 4/10, Current PSNR: 33.7350 dB
ISTA Iteration 5/10, Current PSNR: 33.7595 dB
ISTA Iteration 6/10, Current PSNR: 33.7711 dB
ISTA Iteration 7/10, Current PSNR: 33.7767 dB
ISTA Iteration 8/10, Current PSNR: 33.7795 dB
ISTA Iteration 9/10, Current PSNR: 33.7808 dB
ISTA Iteration 10/10, Current PSNR: 33.7815 dB
Random 2D Mask: ZF PSNR=32.04, ISTA PSNR=33.78, ZF SSIM=0.8269, ISTA SSIM=0.8288, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.0629 dB
ISTA Iteration 2/10, Current PSNR: 43.0630 dB
ISTA Iteration 3/10, Current PSNR: 43.0630 dB
ISTA Iteration 4/10, Current PSNR: 43.0630 dB
ISTA Iteration 5/10, Current PSNR: 43.0630 dB
ISTA Iteration 6/10, Current PSNR: 43.0630 dB
ISTA Iteration 7/10, Current PSNR: 43.0630 dB
ISTA Iteration 8/10, Current PSNR: 43.0630 dB
ISTA Iteration 9/10, Current PSNR: 43.0630 dB
ISTA Iteration 10/10, Current PSNR: 43.0630 dB
Variable Density Mask: ZF PSNR=43.06, ISTA PSNR=43.06, ZF SSIM=0.9923, ISTA SSIM=0.9923, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.5416 dB
ISTA Iteration 2/10, Current PSNR: 47.5416 dB
ISTA Iteration 3/10, Current PSNR: 47.5416 dB
ISTA Iteration 4/10, Current PSNR: 47.5416 dB
ISTA Iteration 5/10, Current PSNR: 47.5416 dB
ISTA Iteration 6/10, Current PSNR: 47.5416 dB
ISTA Iteration 7/10, Current PSNR: 47.5416 dB
ISTA Iteration 8/10, Current PSNR: 47.5416 dB
ISTA Iteration 9/10, Current PSNR: 47.5416 dB
ISTA Iteration 10/10, Current PSNR: 47.5416 dB
Edge-Enhanced Mask: ZF PSNR=47.53, ISTA PSNR=47.54, ZF SSIM=0.9919, ISTA SSIM=0.9920, Time=0.12s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT1POST_200_6002436.h5
  k-space shape: (16, 16, 640, 320), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 33.3252 dB
ISTA Iteration 2/10, Current PSNR: 33.4619 dB
ISTA Iteration 3/10, Current PSNR: 33.5042 dB
ISTA Iteration 4/10, Current PSNR: 33.5185 dB
ISTA Iteration 5/10, Current PSNR: 33.5238 dB
ISTA Iteration 6/10, Current PSNR: 33.5261 dB
ISTA Iteration 7/10, Current PSNR: 33.5271 dB
ISTA Iteration 8/10, Current PSNR: 33.5276 dB
ISTA Iteration 9/10, Current PSNR: 33.5278 dB
ISTA Iteration 10/10, Current PSNR: 33.5279 dB
Cartesian Mask: ZF PSNR=32.76, ISTA PSNR=33.53, ZF SSIM=0.9212, ISTA SSIM=0.9219, Time=0.12s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.0407 dB
ISTA Iteration 2/10, Current PSNR: 27.4617 dB
ISTA Iteration 3/10, Current PSNR: 27.6278 dB
ISTA Iteration 4/10, Current PSNR: 27.6977 dB
ISTA Iteration 5/10, Current PSNR: 27.7291 dB
ISTA Iteration 6/10, Current PSNR: 27.7440 dB
ISTA Iteration 7/10, Current PSNR: 27.7512 dB
ISTA Iteration 8/10, Current PSNR: 27.7547 dB
ISTA Iteration 9/10, Current PSNR: 27.7564 dB
ISTA Iteration 10/10, Current PSNR: 27.7573 dB
Random 2D Mask: ZF PSNR=25.43, ISTA PSNR=27.76, ZF SSIM=0.6177, ISTA SSIM=0.6386, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.1669 dB
ISTA Iteration 2/10, Current PSNR: 46.1671 dB
ISTA Iteration 3/10, Current PSNR: 46.1671 dB
ISTA Iteration 4/10, Current PSNR: 46.1671 dB
ISTA Iteration 5/10, Current PSNR: 46.1671 dB
ISTA Iteration 6/10, Current PSNR: 46.1671 dB
ISTA Iteration 7/10, Current PSNR: 46.1671 dB
ISTA Iteration 8/10, Current PSNR: 46.1671 dB
ISTA Iteration 9/10, Current PSNR: 46.1672 dB
ISTA Iteration 10/10, Current PSNR: 46.1672 dB
Variable Density Mask: ZF PSNR=46.13, ISTA PSNR=46.17, ZF SSIM=0.9927, ISTA SSIM=0.9927, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.7245 dB
ISTA Iteration 2/10, Current PSNR: 48.7245 dB
ISTA Iteration 3/10, Current PSNR: 48.7245 dB
ISTA Iteration 4/10, Current PSNR: 48.7245 dB
ISTA Iteration 5/10, Current PSNR: 48.7245 dB
ISTA Iteration 6/10, Current PSNR: 48.7245 dB
ISTA Iteration 7/10, Current PSNR: 48.7245 dB
ISTA Iteration 8/10, Current PSNR: 48.7245 dB
ISTA Iteration 9/10, Current PSNR: 48.7245 dB
ISTA Iteration 10/10, Current PSNR: 48.7245 dB
Edge-Enhanced Mask: ZF PSNR=48.71, ISTA PSNR=48.72, ZF SSIM=0.9929, ISTA SSIM=0.9930, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.1033 dB
ISTA Iteration 2/10, Current PSNR: 34.2771 dB
ISTA Iteration 3/10, Current PSNR: 34.3312 dB
ISTA Iteration 4/10, Current PSNR: 34.3496 dB
ISTA Iteration 5/10, Current PSNR: 34.3566 dB
ISTA Iteration 6/10, Current PSNR: 34.3596 dB
ISTA Iteration 7/10, Current PSNR: 34.3610 dB
ISTA Iteration 8/10, Current PSNR: 34.3616 dB
ISTA Iteration 9/10, Current PSNR: 34.3619 dB
ISTA Iteration 10/10, Current PSNR: 34.3621 dB
Cartesian Mask: ZF PSNR=33.39, ISTA PSNR=34.36, ZF SSIM=0.9282, ISTA SSIM=0.9294, Time=0.12s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.2991 dB
ISTA Iteration 2/10, Current PSNR: 27.7537 dB
ISTA Iteration 3/10, Current PSNR: 27.9356 dB
ISTA Iteration 4/10, Current PSNR: 28.0130 dB
ISTA Iteration 5/10, Current PSNR: 28.0481 dB
ISTA Iteration 6/10, Current PSNR: 28.0647 dB
ISTA Iteration 7/10, Current PSNR: 28.0728 dB
ISTA Iteration 8/10, Current PSNR: 28.0768 dB
ISTA Iteration 9/10, Current PSNR: 28.0788 dB
ISTA Iteration 10/10, Current PSNR: 28.0797 dB
Random 2D Mask: ZF PSNR=25.53, ISTA PSNR=28.08, ZF SSIM=0.6295, ISTA SSIM=0.6493, Time=0.13s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.7722 dB
ISTA Iteration 2/10, Current PSNR: 47.7726 dB
ISTA Iteration 3/10, Current PSNR: 47.7727 dB
ISTA Iteration 4/10, Current PSNR: 47.7727 dB
ISTA Iteration 5/10, Current PSNR: 47.7728 dB
ISTA Iteration 6/10, Current PSNR: 47.7728 dB
ISTA Iteration 7/10, Current PSNR: 47.7728 dB
ISTA Iteration 8/10, Current PSNR: 47.7728 dB
ISTA Iteration 9/10, Current PSNR: 47.7728 dB
ISTA Iteration 10/10, Current PSNR: 47.7728 dB
Variable Density Mask: ZF PSNR=47.76, ISTA PSNR=47.77, ZF SSIM=0.9944, ISTA SSIM=0.9944, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.3726 dB
ISTA Iteration 2/10, Current PSNR: 49.3726 dB
ISTA Iteration 3/10, Current PSNR: 49.3726 dB
ISTA Iteration 4/10, Current PSNR: 49.3726 dB
ISTA Iteration 5/10, Current PSNR: 49.3726 dB
ISTA Iteration 6/10, Current PSNR: 49.3726 dB
ISTA Iteration 7/10, Current PSNR: 49.3726 dB
ISTA Iteration 8/10, Current PSNR: 49.3726 dB
ISTA Iteration 9/10, Current PSNR: 49.3726 dB
ISTA Iteration 10/10, Current PSNR: 49.3726 dB
Edge-Enhanced Mask: ZF PSNR=49.36, ISTA PSNR=49.37, ZF SSIM=0.9940, ISTA SSIM=0.9941, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.5068 dB
ISTA Iteration 2/10, Current PSNR: 34.6644 dB
ISTA Iteration 3/10, Current PSNR: 34.7151 dB
ISTA Iteration 4/10, Current PSNR: 34.7331 dB
ISTA Iteration 5/10, Current PSNR: 34.7402 dB
ISTA Iteration 6/10, Current PSNR: 34.7433 dB
ISTA Iteration 7/10, Current PSNR: 34.7447 dB
ISTA Iteration 8/10, Current PSNR: 34.7454 dB
ISTA Iteration 9/10, Current PSNR: 34.7458 dB
ISTA Iteration 10/10, Current PSNR: 34.7459 dB
Cartesian Mask: ZF PSNR=33.84, ISTA PSNR=34.75, ZF SSIM=0.9343, ISTA SSIM=0.9340, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.8240 dB
ISTA Iteration 2/10, Current PSNR: 27.1875 dB
ISTA Iteration 3/10, Current PSNR: 27.3358 dB
ISTA Iteration 4/10, Current PSNR: 27.4002 dB
ISTA Iteration 5/10, Current PSNR: 27.4298 dB
ISTA Iteration 6/10, Current PSNR: 27.4440 dB
ISTA Iteration 7/10, Current PSNR: 27.4509 dB
ISTA Iteration 8/10, Current PSNR: 27.4543 dB
ISTA Iteration 9/10, Current PSNR: 27.4560 dB
ISTA Iteration 10/10, Current PSNR: 27.4569 dB
Random 2D Mask: ZF PSNR=25.33, ISTA PSNR=27.46, ZF SSIM=0.6395, ISTA SSIM=0.6475, Time=0.13s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.4326 dB
ISTA Iteration 2/10, Current PSNR: 48.4330 dB
ISTA Iteration 3/10, Current PSNR: 48.4331 dB
ISTA Iteration 4/10, Current PSNR: 48.4331 dB
ISTA Iteration 5/10, Current PSNR: 48.4332 dB
ISTA Iteration 6/10, Current PSNR: 48.4332 dB
ISTA Iteration 7/10, Current PSNR: 48.4332 dB
ISTA Iteration 8/10, Current PSNR: 48.4332 dB
ISTA Iteration 9/10, Current PSNR: 48.4332 dB
ISTA Iteration 10/10, Current PSNR: 48.4332 dB
Variable Density Mask: ZF PSNR=48.43, ISTA PSNR=48.43, ZF SSIM=0.9949, ISTA SSIM=0.9949, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.8933 dB
ISTA Iteration 2/10, Current PSNR: 49.8933 dB
ISTA Iteration 3/10, Current PSNR: 49.8933 dB
ISTA Iteration 4/10, Current PSNR: 49.8933 dB
ISTA Iteration 5/10, Current PSNR: 49.8933 dB
ISTA Iteration 6/10, Current PSNR: 49.8933 dB
ISTA Iteration 7/10, Current PSNR: 49.8933 dB
ISTA Iteration 8/10, Current PSNR: 49.8933 dB
ISTA Iteration 9/10, Current PSNR: 49.8933 dB
ISTA Iteration 10/10, Current PSNR: 49.8933 dB
Edge-Enhanced Mask: ZF PSNR=49.89, ISTA PSNR=49.89, ZF SSIM=0.9950, ISTA SSIM=0.9950, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 34.8854 dB
ISTA Iteration 2/10, Current PSNR: 35.0292 dB
ISTA Iteration 3/10, Current PSNR: 35.0785 dB
ISTA Iteration 4/10, Current PSNR: 35.0973 dB
ISTA Iteration 5/10, Current PSNR: 35.1051 dB
ISTA Iteration 6/10, Current PSNR: 35.1086 dB
ISTA Iteration 7/10, Current PSNR: 35.1103 dB
ISTA Iteration 8/10, Current PSNR: 35.1111 dB
ISTA Iteration 9/10, Current PSNR: 35.1115 dB
ISTA Iteration 10/10, Current PSNR: 35.1117 dB
Cartesian Mask: ZF PSNR=34.32, ISTA PSNR=35.11, ZF SSIM=0.9401, ISTA SSIM=0.9367, Time=0.13s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.5122 dB
ISTA Iteration 2/10, Current PSNR: 27.9137 dB
ISTA Iteration 3/10, Current PSNR: 28.0750 dB
ISTA Iteration 4/10, Current PSNR: 28.1442 dB
ISTA Iteration 5/10, Current PSNR: 28.1757 dB
ISTA Iteration 6/10, Current PSNR: 28.1906 dB
ISTA Iteration 7/10, Current PSNR: 28.1979 dB
ISTA Iteration 8/10, Current PSNR: 28.2015 dB
ISTA Iteration 9/10, Current PSNR: 28.2032 dB
ISTA Iteration 10/10, Current PSNR: 28.2041 dB
Random 2D Mask: ZF PSNR=25.91, ISTA PSNR=28.20, ZF SSIM=0.6568, ISTA SSIM=0.6530, Time=0.14s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.8791 dB
ISTA Iteration 2/10, Current PSNR: 47.8792 dB
ISTA Iteration 3/10, Current PSNR: 47.8792 dB
ISTA Iteration 4/10, Current PSNR: 47.8792 dB
ISTA Iteration 5/10, Current PSNR: 47.8792 dB
ISTA Iteration 6/10, Current PSNR: 47.8792 dB
ISTA Iteration 7/10, Current PSNR: 47.8792 dB
ISTA Iteration 8/10, Current PSNR: 47.8792 dB
ISTA Iteration 9/10, Current PSNR: 47.8792 dB
ISTA Iteration 10/10, Current PSNR: 47.8792 dB
Variable Density Mask: ZF PSNR=47.88, ISTA PSNR=47.88, ZF SSIM=0.9946, ISTA SSIM=0.9946, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.4574 dB
ISTA Iteration 2/10, Current PSNR: 49.4574 dB
ISTA Iteration 3/10, Current PSNR: 49.4574 dB
ISTA Iteration 4/10, Current PSNR: 49.4574 dB
ISTA Iteration 5/10, Current PSNR: 49.4574 dB
ISTA Iteration 6/10, Current PSNR: 49.4574 dB
ISTA Iteration 7/10, Current PSNR: 49.4574 dB
ISTA Iteration 8/10, Current PSNR: 49.4574 dB
ISTA Iteration 9/10, Current PSNR: 49.4574 dB
ISTA Iteration 10/10, Current PSNR: 49.4574 dB
Edge-Enhanced Mask: ZF PSNR=49.46, ISTA PSNR=49.46, ZF SSIM=0.9947, ISTA SSIM=0.9947, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.6393 dB
ISTA Iteration 2/10, Current PSNR: 37.8483 dB
ISTA Iteration 3/10, Current PSNR: 37.9156 dB
ISTA Iteration 4/10, Current PSNR: 37.9394 dB
ISTA Iteration 5/10, Current PSNR: 37.9488 dB
ISTA Iteration 6/10, Current PSNR: 37.9528 dB
ISTA Iteration 7/10, Current PSNR: 37.9547 dB
ISTA Iteration 8/10, Current PSNR: 37.9556 dB
ISTA Iteration 9/10, Current PSNR: 37.9560 dB
ISTA Iteration 10/10, Current PSNR: 37.9562 dB
Cartesian Mask: ZF PSNR=36.79, ISTA PSNR=37.96, ZF SSIM=0.9579, ISTA SSIM=0.9554, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.2704 dB
ISTA Iteration 2/10, Current PSNR: 29.7627 dB
ISTA Iteration 3/10, Current PSNR: 29.9564 dB
ISTA Iteration 4/10, Current PSNR: 30.0375 dB
ISTA Iteration 5/10, Current PSNR: 30.0737 dB
ISTA Iteration 6/10, Current PSNR: 30.0908 dB
ISTA Iteration 7/10, Current PSNR: 30.0990 dB
ISTA Iteration 8/10, Current PSNR: 30.1031 dB
ISTA Iteration 9/10, Current PSNR: 30.1051 dB
ISTA Iteration 10/10, Current PSNR: 30.1061 dB
Random 2D Mask: ZF PSNR=27.27, ISTA PSNR=30.11, ZF SSIM=0.6857, ISTA SSIM=0.7012, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.3592 dB
ISTA Iteration 2/10, Current PSNR: 49.3595 dB
ISTA Iteration 3/10, Current PSNR: 49.3595 dB
ISTA Iteration 4/10, Current PSNR: 49.3596 dB
ISTA Iteration 5/10, Current PSNR: 49.3596 dB
ISTA Iteration 6/10, Current PSNR: 49.3596 dB
ISTA Iteration 7/10, Current PSNR: 49.3596 dB
ISTA Iteration 8/10, Current PSNR: 49.3596 dB
ISTA Iteration 9/10, Current PSNR: 49.3596 dB
ISTA Iteration 10/10, Current PSNR: 49.3596 dB
Variable Density Mask: ZF PSNR=49.36, ISTA PSNR=49.36, ZF SSIM=0.9959, ISTA SSIM=0.9959, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 50.7690 dB
ISTA Iteration 2/10, Current PSNR: 50.7690 dB
ISTA Iteration 3/10, Current PSNR: 50.7691 dB
ISTA Iteration 4/10, Current PSNR: 50.7691 dB
ISTA Iteration 5/10, Current PSNR: 50.7691 dB
ISTA Iteration 6/10, Current PSNR: 50.7691 dB
ISTA Iteration 7/10, Current PSNR: 50.7691 dB
ISTA Iteration 8/10, Current PSNR: 50.7691 dB
ISTA Iteration 9/10, Current PSNR: 50.7691 dB
ISTA Iteration 10/10, Current PSNR: 50.7691 dB
Edge-Enhanced Mask: ZF PSNR=50.77, ISTA PSNR=50.77, ZF SSIM=0.9956, ISTA SSIM=0.9956, Time=0.13s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_209_6001439.h5
  k-space shape: (16, 14, 768, 396), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.2645 dB
ISTA Iteration 2/10, Current PSNR: 31.4311 dB
ISTA Iteration 3/10, Current PSNR: 31.4875 dB
ISTA Iteration 4/10, Current PSNR: 31.5086 dB
ISTA Iteration 5/10, Current PSNR: 31.5173 dB
ISTA Iteration 6/10, Current PSNR: 31.5212 dB
ISTA Iteration 7/10, Current PSNR: 31.5231 dB
ISTA Iteration 8/10, Current PSNR: 31.5240 dB
ISTA Iteration 9/10, Current PSNR: 31.5244 dB
ISTA Iteration 10/10, Current PSNR: 31.5246 dB
Cartesian Mask: ZF PSNR=30.58, ISTA PSNR=31.52, ZF SSIM=0.9070, ISTA SSIM=0.9020, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1432 dB
ISTA Iteration 2/10, Current PSNR: 27.5136 dB
ISTA Iteration 3/10, Current PSNR: 27.6580 dB
ISTA Iteration 4/10, Current PSNR: 27.7186 dB
ISTA Iteration 5/10, Current PSNR: 27.7458 dB
ISTA Iteration 6/10, Current PSNR: 27.7586 dB
ISTA Iteration 7/10, Current PSNR: 27.7648 dB
ISTA Iteration 8/10, Current PSNR: 27.7678 dB
ISTA Iteration 9/10, Current PSNR: 27.7693 dB
ISTA Iteration 10/10, Current PSNR: 27.7701 dB
Random 2D Mask: ZF PSNR=25.70, ISTA PSNR=27.77, ZF SSIM=0.6265, ISTA SSIM=0.6532, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.8892 dB
ISTA Iteration 2/10, Current PSNR: 42.8892 dB
ISTA Iteration 3/10, Current PSNR: 42.8892 dB
ISTA Iteration 4/10, Current PSNR: 42.8892 dB
ISTA Iteration 5/10, Current PSNR: 42.8892 dB
ISTA Iteration 6/10, Current PSNR: 42.8892 dB
ISTA Iteration 7/10, Current PSNR: 42.8892 dB
ISTA Iteration 8/10, Current PSNR: 42.8892 dB
ISTA Iteration 9/10, Current PSNR: 42.8892 dB
ISTA Iteration 10/10, Current PSNR: 42.8892 dB
Variable Density Mask: ZF PSNR=42.89, ISTA PSNR=42.89, ZF SSIM=0.9922, ISTA SSIM=0.9922, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.7916 dB
ISTA Iteration 2/10, Current PSNR: 46.7916 dB
ISTA Iteration 3/10, Current PSNR: 46.7916 dB
ISTA Iteration 4/10, Current PSNR: 46.7916 dB
ISTA Iteration 5/10, Current PSNR: 46.7916 dB
ISTA Iteration 6/10, Current PSNR: 46.7916 dB
ISTA Iteration 7/10, Current PSNR: 46.7916 dB
ISTA Iteration 8/10, Current PSNR: 46.7916 dB
ISTA Iteration 9/10, Current PSNR: 46.7916 dB
ISTA Iteration 10/10, Current PSNR: 46.7916 dB
Edge-Enhanced Mask: ZF PSNR=46.76, ISTA PSNR=46.79, ZF SSIM=0.9901, ISTA SSIM=0.9903, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.1828 dB
ISTA Iteration 2/10, Current PSNR: 31.3575 dB
ISTA Iteration 3/10, Current PSNR: 31.4193 dB
ISTA Iteration 4/10, Current PSNR: 31.4436 dB
ISTA Iteration 5/10, Current PSNR: 31.4540 dB
ISTA Iteration 6/10, Current PSNR: 31.4587 dB
ISTA Iteration 7/10, Current PSNR: 31.4610 dB
ISTA Iteration 8/10, Current PSNR: 31.4621 dB
ISTA Iteration 9/10, Current PSNR: 31.4627 dB
ISTA Iteration 10/10, Current PSNR: 31.4629 dB
Cartesian Mask: ZF PSNR=30.50, ISTA PSNR=31.46, ZF SSIM=0.9109, ISTA SSIM=0.9066, Time=0.11s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.1390 dB
ISTA Iteration 2/10, Current PSNR: 27.5040 dB
ISTA Iteration 3/10, Current PSNR: 27.6506 dB
ISTA Iteration 4/10, Current PSNR: 27.7136 dB
ISTA Iteration 5/10, Current PSNR: 27.7423 dB
ISTA Iteration 6/10, Current PSNR: 27.7559 dB
ISTA Iteration 7/10, Current PSNR: 27.7626 dB
ISTA Iteration 8/10, Current PSNR: 27.7659 dB
ISTA Iteration 9/10, Current PSNR: 27.7675 dB
ISTA Iteration 10/10, Current PSNR: 27.7683 dB
Random 2D Mask: ZF PSNR=25.75, ISTA PSNR=27.77, ZF SSIM=0.6396, ISTA SSIM=0.6520, Time=0.14s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.9619 dB
ISTA Iteration 2/10, Current PSNR: 43.9619 dB
ISTA Iteration 3/10, Current PSNR: 43.9619 dB
ISTA Iteration 4/10, Current PSNR: 43.9620 dB
ISTA Iteration 5/10, Current PSNR: 43.9620 dB
ISTA Iteration 6/10, Current PSNR: 43.9620 dB
ISTA Iteration 7/10, Current PSNR: 43.9620 dB
ISTA Iteration 8/10, Current PSNR: 43.9620 dB
ISTA Iteration 9/10, Current PSNR: 43.9620 dB
ISTA Iteration 10/10, Current PSNR: 43.9620 dB
Variable Density Mask: ZF PSNR=43.96, ISTA PSNR=43.96, ZF SSIM=0.9930, ISTA SSIM=0.9930, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.4483 dB
ISTA Iteration 2/10, Current PSNR: 47.4483 dB
ISTA Iteration 3/10, Current PSNR: 47.4484 dB
ISTA Iteration 4/10, Current PSNR: 47.4484 dB
ISTA Iteration 5/10, Current PSNR: 47.4484 dB
ISTA Iteration 6/10, Current PSNR: 47.4484 dB
ISTA Iteration 7/10, Current PSNR: 47.4484 dB
ISTA Iteration 8/10, Current PSNR: 47.4484 dB
ISTA Iteration 9/10, Current PSNR: 47.4484 dB
ISTA Iteration 10/10, Current PSNR: 47.4484 dB
Edge-Enhanced Mask: ZF PSNR=47.44, ISTA PSNR=47.45, ZF SSIM=0.9920, ISTA SSIM=0.9920, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.6746 dB
ISTA Iteration 2/10, Current PSNR: 31.9455 dB
ISTA Iteration 3/10, Current PSNR: 32.0449 dB
ISTA Iteration 4/10, Current PSNR: 32.0846 dB
ISTA Iteration 5/10, Current PSNR: 32.1019 dB
ISTA Iteration 6/10, Current PSNR: 32.1099 dB
ISTA Iteration 7/10, Current PSNR: 32.1137 dB
ISTA Iteration 8/10, Current PSNR: 32.1156 dB
ISTA Iteration 9/10, Current PSNR: 32.1165 dB
ISTA Iteration 10/10, Current PSNR: 32.1169 dB
Cartesian Mask: ZF PSNR=30.59, ISTA PSNR=32.12, ZF SSIM=0.9137, ISTA SSIM=0.9097, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 26.9809 dB
ISTA Iteration 2/10, Current PSNR: 27.3396 dB
ISTA Iteration 3/10, Current PSNR: 27.4855 dB
ISTA Iteration 4/10, Current PSNR: 27.5489 dB
ISTA Iteration 5/10, Current PSNR: 27.5780 dB
ISTA Iteration 6/10, Current PSNR: 27.5919 dB
ISTA Iteration 7/10, Current PSNR: 27.5987 dB
ISTA Iteration 8/10, Current PSNR: 27.6020 dB
ISTA Iteration 9/10, Current PSNR: 27.6037 dB
ISTA Iteration 10/10, Current PSNR: 27.6045 dB
Random 2D Mask: ZF PSNR=25.67, ISTA PSNR=27.60, ZF SSIM=0.6507, ISTA SSIM=0.6546, Time=0.14s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.8904 dB
ISTA Iteration 2/10, Current PSNR: 42.8905 dB
ISTA Iteration 3/10, Current PSNR: 42.8905 dB
ISTA Iteration 4/10, Current PSNR: 42.8905 dB
ISTA Iteration 5/10, Current PSNR: 42.8905 dB
ISTA Iteration 6/10, Current PSNR: 42.8905 dB
ISTA Iteration 7/10, Current PSNR: 42.8905 dB
ISTA Iteration 8/10, Current PSNR: 42.8905 dB
ISTA Iteration 9/10, Current PSNR: 42.8905 dB
ISTA Iteration 10/10, Current PSNR: 42.8905 dB
Variable Density Mask: ZF PSNR=42.89, ISTA PSNR=42.89, ZF SSIM=0.9924, ISTA SSIM=0.9924, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.8525 dB
ISTA Iteration 2/10, Current PSNR: 46.8525 dB
ISTA Iteration 3/10, Current PSNR: 46.8525 dB
ISTA Iteration 4/10, Current PSNR: 46.8525 dB
ISTA Iteration 5/10, Current PSNR: 46.8525 dB
ISTA Iteration 6/10, Current PSNR: 46.8525 dB
ISTA Iteration 7/10, Current PSNR: 46.8525 dB
ISTA Iteration 8/10, Current PSNR: 46.8525 dB
ISTA Iteration 9/10, Current PSNR: 46.8525 dB
ISTA Iteration 10/10, Current PSNR: 46.8525 dB
Edge-Enhanced Mask: ZF PSNR=46.84, ISTA PSNR=46.85, ZF SSIM=0.9908, ISTA SSIM=0.9908, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.2767 dB
ISTA Iteration 2/10, Current PSNR: 31.4929 dB
ISTA Iteration 3/10, Current PSNR: 31.5764 dB
ISTA Iteration 4/10, Current PSNR: 31.6114 dB
ISTA Iteration 5/10, Current PSNR: 31.6273 dB
ISTA Iteration 6/10, Current PSNR: 31.6348 dB
ISTA Iteration 7/10, Current PSNR: 31.6384 dB
ISTA Iteration 8/10, Current PSNR: 31.6402 dB
ISTA Iteration 9/10, Current PSNR: 31.6411 dB
ISTA Iteration 10/10, Current PSNR: 31.6416 dB
Cartesian Mask: ZF PSNR=30.49, ISTA PSNR=31.64, ZF SSIM=0.9182, ISTA SSIM=0.9080, Time=0.11s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.2227 dB
ISTA Iteration 2/10, Current PSNR: 27.5739 dB
ISTA Iteration 3/10, Current PSNR: 27.7162 dB
ISTA Iteration 4/10, Current PSNR: 27.7777 dB
ISTA Iteration 5/10, Current PSNR: 27.8059 dB
ISTA Iteration 6/10, Current PSNR: 27.8193 dB
ISTA Iteration 7/10, Current PSNR: 27.8259 dB
ISTA Iteration 8/10, Current PSNR: 27.8291 dB
ISTA Iteration 9/10, Current PSNR: 27.8307 dB
ISTA Iteration 10/10, Current PSNR: 27.8315 dB
Random 2D Mask: ZF PSNR=25.92, ISTA PSNR=27.83, ZF SSIM=0.6634, ISTA SSIM=0.6537, Time=0.13s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.2565 dB
ISTA Iteration 2/10, Current PSNR: 43.2566 dB
ISTA Iteration 3/10, Current PSNR: 43.2567 dB
ISTA Iteration 4/10, Current PSNR: 43.2567 dB
ISTA Iteration 5/10, Current PSNR: 43.2567 dB
ISTA Iteration 6/10, Current PSNR: 43.2567 dB
ISTA Iteration 7/10, Current PSNR: 43.2567 dB
ISTA Iteration 8/10, Current PSNR: 43.2567 dB
ISTA Iteration 9/10, Current PSNR: 43.2567 dB
ISTA Iteration 10/10, Current PSNR: 43.2567 dB
Variable Density Mask: ZF PSNR=43.26, ISTA PSNR=43.26, ZF SSIM=0.9934, ISTA SSIM=0.9934, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.4759 dB
ISTA Iteration 2/10, Current PSNR: 46.4759 dB
ISTA Iteration 3/10, Current PSNR: 46.4759 dB
ISTA Iteration 4/10, Current PSNR: 46.4759 dB
ISTA Iteration 5/10, Current PSNR: 46.4759 dB
ISTA Iteration 6/10, Current PSNR: 46.4759 dB
ISTA Iteration 7/10, Current PSNR: 46.4759 dB
ISTA Iteration 8/10, Current PSNR: 46.4759 dB
ISTA Iteration 9/10, Current PSNR: 46.4759 dB
ISTA Iteration 10/10, Current PSNR: 46.4759 dB
Edge-Enhanced Mask: ZF PSNR=46.47, ISTA PSNR=46.48, ZF SSIM=0.9916, ISTA SSIM=0.9916, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 32.7139 dB
ISTA Iteration 2/10, Current PSNR: 33.0329 dB
ISTA Iteration 3/10, Current PSNR: 33.1583 dB
ISTA Iteration 4/10, Current PSNR: 33.2115 dB
ISTA Iteration 5/10, Current PSNR: 33.2356 dB
ISTA Iteration 6/10, Current PSNR: 33.2470 dB
ISTA Iteration 7/10, Current PSNR: 33.2526 dB
ISTA Iteration 8/10, Current PSNR: 33.2553 dB
ISTA Iteration 9/10, Current PSNR: 33.2567 dB
ISTA Iteration 10/10, Current PSNR: 33.2573 dB
Cartesian Mask: ZF PSNR=31.65, ISTA PSNR=33.26, ZF SSIM=0.9291, ISTA SSIM=0.9202, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.8705 dB
ISTA Iteration 2/10, Current PSNR: 28.2580 dB
ISTA Iteration 3/10, Current PSNR: 28.4160 dB
ISTA Iteration 4/10, Current PSNR: 28.4846 dB
ISTA Iteration 5/10, Current PSNR: 28.5161 dB
ISTA Iteration 6/10, Current PSNR: 28.5311 dB
ISTA Iteration 7/10, Current PSNR: 28.5384 dB
ISTA Iteration 8/10, Current PSNR: 28.5420 dB
ISTA Iteration 9/10, Current PSNR: 28.5438 dB
ISTA Iteration 10/10, Current PSNR: 28.5447 dB
Random 2D Mask: ZF PSNR=26.50, ISTA PSNR=28.54, ZF SSIM=0.6931, ISTA SSIM=0.6716, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.0967 dB
ISTA Iteration 2/10, Current PSNR: 42.0970 dB
ISTA Iteration 3/10, Current PSNR: 42.0970 dB
ISTA Iteration 4/10, Current PSNR: 42.0970 dB
ISTA Iteration 5/10, Current PSNR: 42.0970 dB
ISTA Iteration 6/10, Current PSNR: 42.0970 dB
ISTA Iteration 7/10, Current PSNR: 42.0970 dB
ISTA Iteration 8/10, Current PSNR: 42.0970 dB
ISTA Iteration 9/10, Current PSNR: 42.0970 dB
ISTA Iteration 10/10, Current PSNR: 42.0970 dB
Variable Density Mask: ZF PSNR=42.09, ISTA PSNR=42.10, ZF SSIM=0.9919, ISTA SSIM=0.9918, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.5102 dB
ISTA Iteration 2/10, Current PSNR: 45.5103 dB
ISTA Iteration 3/10, Current PSNR: 45.5103 dB
ISTA Iteration 4/10, Current PSNR: 45.5104 dB
ISTA Iteration 5/10, Current PSNR: 45.5104 dB
ISTA Iteration 6/10, Current PSNR: 45.5104 dB
ISTA Iteration 7/10, Current PSNR: 45.5104 dB
ISTA Iteration 8/10, Current PSNR: 45.5104 dB
ISTA Iteration 9/10, Current PSNR: 45.5104 dB
ISTA Iteration 10/10, Current PSNR: 45.5104 dB
Edge-Enhanced Mask: ZF PSNR=45.50, ISTA PSNR=45.51, ZF SSIM=0.9896, ISTA SSIM=0.9896, Time=0.12s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT1POST_207_2070572.h5
  k-space shape: (16, 4, 640, 322), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 36.7948 dB
ISTA Iteration 2/10, Current PSNR: 36.9701 dB
ISTA Iteration 3/10, Current PSNR: 37.0265 dB
ISTA Iteration 4/10, Current PSNR: 37.0463 dB
ISTA Iteration 5/10, Current PSNR: 37.0541 dB
ISTA Iteration 6/10, Current PSNR: 37.0574 dB
ISTA Iteration 7/10, Current PSNR: 37.0590 dB
ISTA Iteration 8/10, Current PSNR: 37.0597 dB
ISTA Iteration 9/10, Current PSNR: 37.0601 dB
ISTA Iteration 10/10, Current PSNR: 37.0603 dB
Cartesian Mask: ZF PSNR=36.13, ISTA PSNR=37.06, ZF SSIM=0.9407, ISTA SSIM=0.9429, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.9390 dB
ISTA Iteration 2/10, Current PSNR: 30.3828 dB
ISTA Iteration 3/10, Current PSNR: 30.5581 dB
ISTA Iteration 4/10, Current PSNR: 30.6320 dB
ISTA Iteration 5/10, Current PSNR: 30.6653 dB
ISTA Iteration 6/10, Current PSNR: 30.6810 dB
ISTA Iteration 7/10, Current PSNR: 30.6886 dB
ISTA Iteration 8/10, Current PSNR: 30.6924 dB
ISTA Iteration 9/10, Current PSNR: 30.6942 dB
ISTA Iteration 10/10, Current PSNR: 30.6952 dB
Random 2D Mask: ZF PSNR=28.13, ISTA PSNR=30.70, ZF SSIM=0.6692, ISTA SSIM=0.7269, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.7437 dB
ISTA Iteration 2/10, Current PSNR: 43.7440 dB
ISTA Iteration 3/10, Current PSNR: 43.7441 dB
ISTA Iteration 4/10, Current PSNR: 43.7441 dB
ISTA Iteration 5/10, Current PSNR: 43.7441 dB
ISTA Iteration 6/10, Current PSNR: 43.7441 dB
ISTA Iteration 7/10, Current PSNR: 43.7441 dB
ISTA Iteration 8/10, Current PSNR: 43.7441 dB
ISTA Iteration 9/10, Current PSNR: 43.7441 dB
ISTA Iteration 10/10, Current PSNR: 43.7441 dB
Variable Density Mask: ZF PSNR=43.63, ISTA PSNR=43.74, ZF SSIM=0.9886, ISTA SSIM=0.9888, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.8930 dB
ISTA Iteration 2/10, Current PSNR: 45.8930 dB
ISTA Iteration 3/10, Current PSNR: 45.8931 dB
ISTA Iteration 4/10, Current PSNR: 45.8931 dB
ISTA Iteration 5/10, Current PSNR: 45.8931 dB
ISTA Iteration 6/10, Current PSNR: 45.8931 dB
ISTA Iteration 7/10, Current PSNR: 45.8931 dB
ISTA Iteration 8/10, Current PSNR: 45.8931 dB
ISTA Iteration 9/10, Current PSNR: 45.8931 dB
ISTA Iteration 10/10, Current PSNR: 45.8931 dB
Edge-Enhanced Mask: ZF PSNR=45.75, ISTA PSNR=45.89, ZF SSIM=0.9834, ISTA SSIM=0.9847, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.3066 dB
ISTA Iteration 2/10, Current PSNR: 37.4769 dB
ISTA Iteration 3/10, Current PSNR: 37.5339 dB
ISTA Iteration 4/10, Current PSNR: 37.5549 dB
ISTA Iteration 5/10, Current PSNR: 37.5635 dB
ISTA Iteration 6/10, Current PSNR: 37.5673 dB
ISTA Iteration 7/10, Current PSNR: 37.5691 dB
ISTA Iteration 8/10, Current PSNR: 37.5700 dB
ISTA Iteration 9/10, Current PSNR: 37.5704 dB
ISTA Iteration 10/10, Current PSNR: 37.5706 dB
Cartesian Mask: ZF PSNR=36.65, ISTA PSNR=37.57, ZF SSIM=0.9473, ISTA SSIM=0.9477, Time=0.12s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.9096 dB
ISTA Iteration 2/10, Current PSNR: 30.3128 dB
ISTA Iteration 3/10, Current PSNR: 30.4737 dB
ISTA Iteration 4/10, Current PSNR: 30.5423 dB
ISTA Iteration 5/10, Current PSNR: 30.5733 dB
ISTA Iteration 6/10, Current PSNR: 30.5881 dB
ISTA Iteration 7/10, Current PSNR: 30.5952 dB
ISTA Iteration 8/10, Current PSNR: 30.5988 dB
ISTA Iteration 9/10, Current PSNR: 30.6005 dB
ISTA Iteration 10/10, Current PSNR: 30.6014 dB
Random 2D Mask: ZF PSNR=28.19, ISTA PSNR=30.60, ZF SSIM=0.6759, ISTA SSIM=0.7289, Time=0.14s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.3644 dB
ISTA Iteration 2/10, Current PSNR: 45.3645 dB
ISTA Iteration 3/10, Current PSNR: 45.3645 dB
ISTA Iteration 4/10, Current PSNR: 45.3645 dB
ISTA Iteration 5/10, Current PSNR: 45.3645 dB
ISTA Iteration 6/10, Current PSNR: 45.3645 dB
ISTA Iteration 7/10, Current PSNR: 45.3645 dB
ISTA Iteration 8/10, Current PSNR: 45.3645 dB
ISTA Iteration 9/10, Current PSNR: 45.3645 dB
ISTA Iteration 10/10, Current PSNR: 45.3645 dB
Variable Density Mask: ZF PSNR=45.32, ISTA PSNR=45.36, ZF SSIM=0.9916, ISTA SSIM=0.9916, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.8981 dB
ISTA Iteration 2/10, Current PSNR: 47.8981 dB
ISTA Iteration 3/10, Current PSNR: 47.8981 dB
ISTA Iteration 4/10, Current PSNR: 47.8981 dB
ISTA Iteration 5/10, Current PSNR: 47.8981 dB
ISTA Iteration 6/10, Current PSNR: 47.8981 dB
ISTA Iteration 7/10, Current PSNR: 47.8981 dB
ISTA Iteration 8/10, Current PSNR: 47.8981 dB
ISTA Iteration 9/10, Current PSNR: 47.8981 dB
ISTA Iteration 10/10, Current PSNR: 47.8981 dB
Edge-Enhanced Mask: ZF PSNR=47.87, ISTA PSNR=47.90, ZF SSIM=0.9904, ISTA SSIM=0.9905, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.3536 dB
ISTA Iteration 2/10, Current PSNR: 37.5215 dB
ISTA Iteration 3/10, Current PSNR: 37.5807 dB
ISTA Iteration 4/10, Current PSNR: 37.6038 dB
ISTA Iteration 5/10, Current PSNR: 37.6137 dB
ISTA Iteration 6/10, Current PSNR: 37.6182 dB
ISTA Iteration 7/10, Current PSNR: 37.6204 dB
ISTA Iteration 8/10, Current PSNR: 37.6214 dB
ISTA Iteration 9/10, Current PSNR: 37.6219 dB
ISTA Iteration 10/10, Current PSNR: 37.6222 dB
Cartesian Mask: ZF PSNR=36.77, ISTA PSNR=37.62, ZF SSIM=0.9505, ISTA SSIM=0.9488, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.7279 dB
ISTA Iteration 2/10, Current PSNR: 30.1016 dB
ISTA Iteration 3/10, Current PSNR: 30.2510 dB
ISTA Iteration 4/10, Current PSNR: 30.3148 dB
ISTA Iteration 5/10, Current PSNR: 30.3439 dB
ISTA Iteration 6/10, Current PSNR: 30.3577 dB
ISTA Iteration 7/10, Current PSNR: 30.3644 dB
ISTA Iteration 8/10, Current PSNR: 30.3677 dB
ISTA Iteration 9/10, Current PSNR: 30.3694 dB
ISTA Iteration 10/10, Current PSNR: 30.3702 dB
Random 2D Mask: ZF PSNR=28.06, ISTA PSNR=30.37, ZF SSIM=0.6865, ISTA SSIM=0.7277, Time=0.13s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.2739 dB
ISTA Iteration 2/10, Current PSNR: 46.2745 dB
ISTA Iteration 3/10, Current PSNR: 46.2746 dB
ISTA Iteration 4/10, Current PSNR: 46.2747 dB
ISTA Iteration 5/10, Current PSNR: 46.2747 dB
ISTA Iteration 6/10, Current PSNR: 46.2747 dB
ISTA Iteration 7/10, Current PSNR: 46.2747 dB
ISTA Iteration 8/10, Current PSNR: 46.2747 dB
ISTA Iteration 9/10, Current PSNR: 46.2747 dB
ISTA Iteration 10/10, Current PSNR: 46.2747 dB
Variable Density Mask: ZF PSNR=46.23, ISTA PSNR=46.27, ZF SSIM=0.9924, ISTA SSIM=0.9924, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.2809 dB
ISTA Iteration 2/10, Current PSNR: 48.2809 dB
ISTA Iteration 3/10, Current PSNR: 48.2809 dB
ISTA Iteration 4/10, Current PSNR: 48.2809 dB
ISTA Iteration 5/10, Current PSNR: 48.2809 dB
ISTA Iteration 6/10, Current PSNR: 48.2809 dB
ISTA Iteration 7/10, Current PSNR: 48.2809 dB
ISTA Iteration 8/10, Current PSNR: 48.2809 dB
ISTA Iteration 9/10, Current PSNR: 48.2809 dB
ISTA Iteration 10/10, Current PSNR: 48.2809 dB
Edge-Enhanced Mask: ZF PSNR=48.27, ISTA PSNR=48.28, ZF SSIM=0.9919, ISTA SSIM=0.9920, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 38.4090 dB
ISTA Iteration 2/10, Current PSNR: 38.6021 dB
ISTA Iteration 3/10, Current PSNR: 38.6713 dB
ISTA Iteration 4/10, Current PSNR: 38.6985 dB
ISTA Iteration 5/10, Current PSNR: 38.7102 dB
ISTA Iteration 6/10, Current PSNR: 38.7156 dB
ISTA Iteration 7/10, Current PSNR: 38.7182 dB
ISTA Iteration 8/10, Current PSNR: 38.7194 dB
ISTA Iteration 9/10, Current PSNR: 38.7201 dB
ISTA Iteration 10/10, Current PSNR: 38.7204 dB
Cartesian Mask: ZF PSNR=37.70, ISTA PSNR=38.72, ZF SSIM=0.9564, ISTA SSIM=0.9540, Time=0.12s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 31.0153 dB
ISTA Iteration 2/10, Current PSNR: 31.5118 dB
ISTA Iteration 3/10, Current PSNR: 31.7058 dB
ISTA Iteration 4/10, Current PSNR: 31.7864 dB
ISTA Iteration 5/10, Current PSNR: 31.8224 dB
ISTA Iteration 6/10, Current PSNR: 31.8392 dB
ISTA Iteration 7/10, Current PSNR: 31.8473 dB
ISTA Iteration 8/10, Current PSNR: 31.8513 dB
ISTA Iteration 9/10, Current PSNR: 31.8533 dB
ISTA Iteration 10/10, Current PSNR: 31.8543 dB
Random 2D Mask: ZF PSNR=28.91, ISTA PSNR=31.85, ZF SSIM=0.6889, ISTA SSIM=0.7555, Time=0.13s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.0127 dB
ISTA Iteration 2/10, Current PSNR: 47.0130 dB
ISTA Iteration 3/10, Current PSNR: 47.0131 dB
ISTA Iteration 4/10, Current PSNR: 47.0131 dB
ISTA Iteration 5/10, Current PSNR: 47.0131 dB
ISTA Iteration 6/10, Current PSNR: 47.0131 dB
ISTA Iteration 7/10, Current PSNR: 47.0131 dB
ISTA Iteration 8/10, Current PSNR: 47.0131 dB
ISTA Iteration 9/10, Current PSNR: 47.0131 dB
ISTA Iteration 10/10, Current PSNR: 47.0131 dB
Variable Density Mask: ZF PSNR=47.00, ISTA PSNR=47.01, ZF SSIM=0.9934, ISTA SSIM=0.9934, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.0791 dB
ISTA Iteration 2/10, Current PSNR: 49.0791 dB
ISTA Iteration 3/10, Current PSNR: 49.0791 dB
ISTA Iteration 4/10, Current PSNR: 49.0791 dB
ISTA Iteration 5/10, Current PSNR: 49.0791 dB
ISTA Iteration 6/10, Current PSNR: 49.0791 dB
ISTA Iteration 7/10, Current PSNR: 49.0791 dB
ISTA Iteration 8/10, Current PSNR: 49.0791 dB
ISTA Iteration 9/10, Current PSNR: 49.0791 dB
ISTA Iteration 10/10, Current PSNR: 49.0791 dB
Edge-Enhanced Mask: ZF PSNR=49.08, ISTA PSNR=49.08, ZF SSIM=0.9939, ISTA SSIM=0.9939, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 37.7698 dB
ISTA Iteration 2/10, Current PSNR: 38.0030 dB
ISTA Iteration 3/10, Current PSNR: 38.0932 dB
ISTA Iteration 4/10, Current PSNR: 38.1303 dB
ISTA Iteration 5/10, Current PSNR: 38.1468 dB
ISTA Iteration 6/10, Current PSNR: 38.1546 dB
ISTA Iteration 7/10, Current PSNR: 38.1584 dB
ISTA Iteration 8/10, Current PSNR: 38.1603 dB
ISTA Iteration 9/10, Current PSNR: 38.1612 dB
ISTA Iteration 10/10, Current PSNR: 38.1617 dB
Cartesian Mask: ZF PSNR=36.93, ISTA PSNR=38.16, ZF SSIM=0.9538, ISTA SSIM=0.9494, Time=0.12s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.4972 dB
ISTA Iteration 2/10, Current PSNR: 30.9239 dB
ISTA Iteration 3/10, Current PSNR: 31.0965 dB
ISTA Iteration 4/10, Current PSNR: 31.1708 dB
ISTA Iteration 5/10, Current PSNR: 31.2048 dB
ISTA Iteration 6/10, Current PSNR: 31.2210 dB
ISTA Iteration 7/10, Current PSNR: 31.2288 dB
ISTA Iteration 8/10, Current PSNR: 31.2327 dB
ISTA Iteration 9/10, Current PSNR: 31.2346 dB
ISTA Iteration 10/10, Current PSNR: 31.2356 dB
Random 2D Mask: ZF PSNR=28.76, ISTA PSNR=31.24, ZF SSIM=0.7224, ISTA SSIM=0.7468, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.0729 dB
ISTA Iteration 2/10, Current PSNR: 48.0730 dB
ISTA Iteration 3/10, Current PSNR: 48.0730 dB
ISTA Iteration 4/10, Current PSNR: 48.0731 dB
ISTA Iteration 5/10, Current PSNR: 48.0731 dB
ISTA Iteration 6/10, Current PSNR: 48.0731 dB
ISTA Iteration 7/10, Current PSNR: 48.0731 dB
ISTA Iteration 8/10, Current PSNR: 48.0731 dB
ISTA Iteration 9/10, Current PSNR: 48.0731 dB
ISTA Iteration 10/10, Current PSNR: 48.0731 dB
Variable Density Mask: ZF PSNR=48.07, ISTA PSNR=48.07, ZF SSIM=0.9943, ISTA SSIM=0.9943, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.6608 dB
ISTA Iteration 2/10, Current PSNR: 49.6608 dB
ISTA Iteration 3/10, Current PSNR: 49.6608 dB
ISTA Iteration 4/10, Current PSNR: 49.6608 dB
ISTA Iteration 5/10, Current PSNR: 49.6608 dB
ISTA Iteration 6/10, Current PSNR: 49.6608 dB
ISTA Iteration 7/10, Current PSNR: 49.6608 dB
ISTA Iteration 8/10, Current PSNR: 49.6608 dB
ISTA Iteration 9/10, Current PSNR: 49.6608 dB
ISTA Iteration 10/10, Current PSNR: 49.6608 dB
Edge-Enhanced Mask: ZF PSNR=49.66, ISTA PSNR=49.66, ZF SSIM=0.9947, ISTA SSIM=0.9947, Time=0.13s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT1_202_6000301.h5
  k-space shape: (16, 16, 640, 320), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.5246 dB
ISTA Iteration 2/10, Current PSNR: 45.6537 dB
ISTA Iteration 3/10, Current PSNR: 45.6866 dB
ISTA Iteration 4/10, Current PSNR: 45.6949 dB
ISTA Iteration 5/10, Current PSNR: 45.6969 dB
ISTA Iteration 6/10, Current PSNR: 45.6975 dB
ISTA Iteration 7/10, Current PSNR: 45.6976 dB
ISTA Iteration 8/10, Current PSNR: 45.6976 dB
ISTA Iteration 9/10, Current PSNR: 45.6976 dB
ISTA Iteration 10/10, Current PSNR: 45.6976 dB
Cartesian Mask: ZF PSNR=45.04, ISTA PSNR=45.70, ZF SSIM=0.9845, ISTA SSIM=0.9869, Time=0.13s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 30.2581 dB
ISTA Iteration 2/10, Current PSNR: 30.6589 dB
ISTA Iteration 3/10, Current PSNR: 30.8181 dB
ISTA Iteration 4/10, Current PSNR: 30.8858 dB
ISTA Iteration 5/10, Current PSNR: 30.9165 dB
ISTA Iteration 6/10, Current PSNR: 30.9310 dB
ISTA Iteration 7/10, Current PSNR: 30.9380 dB
ISTA Iteration 8/10, Current PSNR: 30.9415 dB
ISTA Iteration 9/10, Current PSNR: 30.9432 dB
ISTA Iteration 10/10, Current PSNR: 30.9441 dB
Random 2D Mask: ZF PSNR=28.73, ISTA PSNR=30.94, ZF SSIM=0.7262, ISTA SSIM=0.7399, Time=0.14s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.6601 dB
ISTA Iteration 2/10, Current PSNR: 47.6601 dB
ISTA Iteration 3/10, Current PSNR: 47.6602 dB
ISTA Iteration 4/10, Current PSNR: 47.6602 dB
ISTA Iteration 5/10, Current PSNR: 47.6602 dB
ISTA Iteration 6/10, Current PSNR: 47.6602 dB
ISTA Iteration 7/10, Current PSNR: 47.6602 dB
ISTA Iteration 8/10, Current PSNR: 47.6602 dB
ISTA Iteration 9/10, Current PSNR: 47.6602 dB
ISTA Iteration 10/10, Current PSNR: 47.6602 dB
Variable Density Mask: ZF PSNR=47.59, ISTA PSNR=47.66, ZF SSIM=0.9943, ISTA SSIM=0.9944, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 53.1101 dB
ISTA Iteration 2/10, Current PSNR: 53.1101 dB
ISTA Iteration 3/10, Current PSNR: 53.1101 dB
ISTA Iteration 4/10, Current PSNR: 53.1101 dB
ISTA Iteration 5/10, Current PSNR: 53.1101 dB
ISTA Iteration 6/10, Current PSNR: 53.1101 dB
ISTA Iteration 7/10, Current PSNR: 53.1101 dB
ISTA Iteration 8/10, Current PSNR: 53.1101 dB
ISTA Iteration 9/10, Current PSNR: 53.1101 dB
ISTA Iteration 10/10, Current PSNR: 53.1101 dB
Edge-Enhanced Mask: ZF PSNR=53.10, ISTA PSNR=53.11, ZF SSIM=0.9965, ISTA SSIM=0.9966, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.7217 dB
ISTA Iteration 2/10, Current PSNR: 45.8764 dB
ISTA Iteration 3/10, Current PSNR: 45.9160 dB
ISTA Iteration 4/10, Current PSNR: 45.9260 dB
ISTA Iteration 5/10, Current PSNR: 45.9284 dB
ISTA Iteration 6/10, Current PSNR: 45.9291 dB
ISTA Iteration 7/10, Current PSNR: 45.9292 dB
ISTA Iteration 8/10, Current PSNR: 45.9293 dB
ISTA Iteration 9/10, Current PSNR: 45.9293 dB
ISTA Iteration 10/10, Current PSNR: 45.9293 dB
Cartesian Mask: ZF PSNR=45.15, ISTA PSNR=45.93, ZF SSIM=0.9851, ISTA SSIM=0.9876, Time=0.11s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.7227 dB
ISTA Iteration 2/10, Current PSNR: 30.0889 dB
ISTA Iteration 3/10, Current PSNR: 30.2354 dB
ISTA Iteration 4/10, Current PSNR: 30.2982 dB
ISTA Iteration 5/10, Current PSNR: 30.3268 dB
ISTA Iteration 6/10, Current PSNR: 30.3404 dB
ISTA Iteration 7/10, Current PSNR: 30.3470 dB
ISTA Iteration 8/10, Current PSNR: 30.3502 dB
ISTA Iteration 9/10, Current PSNR: 30.3519 dB
ISTA Iteration 10/10, Current PSNR: 30.3527 dB
Random 2D Mask: ZF PSNR=28.29, ISTA PSNR=30.35, ZF SSIM=0.7222, ISTA SSIM=0.7320, Time=0.13s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.9465 dB
ISTA Iteration 2/10, Current PSNR: 49.9465 dB
ISTA Iteration 3/10, Current PSNR: 49.9465 dB
ISTA Iteration 4/10, Current PSNR: 49.9465 dB
ISTA Iteration 5/10, Current PSNR: 49.9465 dB
ISTA Iteration 6/10, Current PSNR: 49.9465 dB
ISTA Iteration 7/10, Current PSNR: 49.9465 dB
ISTA Iteration 8/10, Current PSNR: 49.9465 dB
ISTA Iteration 9/10, Current PSNR: 49.9465 dB
ISTA Iteration 10/10, Current PSNR: 49.9465 dB
Variable Density Mask: ZF PSNR=49.94, ISTA PSNR=49.95, ZF SSIM=0.9960, ISTA SSIM=0.9960, Time=0.13s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 54.6339 dB
ISTA Iteration 2/10, Current PSNR: 54.6339 dB
ISTA Iteration 3/10, Current PSNR: 54.6340 dB
ISTA Iteration 4/10, Current PSNR: 54.6340 dB
ISTA Iteration 5/10, Current PSNR: 54.6340 dB
ISTA Iteration 6/10, Current PSNR: 54.6340 dB
ISTA Iteration 7/10, Current PSNR: 54.6340 dB
ISTA Iteration 8/10, Current PSNR: 54.6340 dB
ISTA Iteration 9/10, Current PSNR: 54.6340 dB
ISTA Iteration 10/10, Current PSNR: 54.6340 dB
Edge-Enhanced Mask: ZF PSNR=54.62, ISTA PSNR=54.63, ZF SSIM=0.9973, ISTA SSIM=0.9974, Time=0.12s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 46.0816 dB
ISTA Iteration 2/10, Current PSNR: 46.2401 dB
ISTA Iteration 3/10, Current PSNR: 46.2807 dB
ISTA Iteration 4/10, Current PSNR: 46.2909 dB
ISTA Iteration 5/10, Current PSNR: 46.2934 dB
ISTA Iteration 6/10, Current PSNR: 46.2941 dB
ISTA Iteration 7/10, Current PSNR: 46.2942 dB
ISTA Iteration 8/10, Current PSNR: 46.2943 dB
ISTA Iteration 9/10, Current PSNR: 46.2943 dB
ISTA Iteration 10/10, Current PSNR: 46.2943 dB
Cartesian Mask: ZF PSNR=45.50, ISTA PSNR=46.29, ZF SSIM=0.9864, ISTA SSIM=0.9890, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.6129 dB
ISTA Iteration 2/10, Current PSNR: 30.0294 dB
ISTA Iteration 3/10, Current PSNR: 30.1959 dB
ISTA Iteration 4/10, Current PSNR: 30.2670 dB
ISTA Iteration 5/10, Current PSNR: 30.2992 dB
ISTA Iteration 6/10, Current PSNR: 30.3145 dB
ISTA Iteration 7/10, Current PSNR: 30.3220 dB
ISTA Iteration 8/10, Current PSNR: 30.3256 dB
ISTA Iteration 9/10, Current PSNR: 30.3275 dB
ISTA Iteration 10/10, Current PSNR: 30.3284 dB
Random 2D Mask: ZF PSNR=28.00, ISTA PSNR=30.33, ZF SSIM=0.7194, ISTA SSIM=0.7288, Time=0.14s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 51.9074 dB
ISTA Iteration 2/10, Current PSNR: 51.9074 dB
ISTA Iteration 3/10, Current PSNR: 51.9074 dB
ISTA Iteration 4/10, Current PSNR: 51.9074 dB
ISTA Iteration 5/10, Current PSNR: 51.9074 dB
ISTA Iteration 6/10, Current PSNR: 51.9074 dB
ISTA Iteration 7/10, Current PSNR: 51.9074 dB
ISTA Iteration 8/10, Current PSNR: 51.9074 dB
ISTA Iteration 9/10, Current PSNR: 51.9074 dB
ISTA Iteration 10/10, Current PSNR: 51.9074 dB
Variable Density Mask: ZF PSNR=51.90, ISTA PSNR=51.91, ZF SSIM=0.9966, ISTA SSIM=0.9966, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 54.9762 dB
ISTA Iteration 2/10, Current PSNR: 54.9762 dB
ISTA Iteration 3/10, Current PSNR: 54.9762 dB
ISTA Iteration 4/10, Current PSNR: 54.9762 dB
ISTA Iteration 5/10, Current PSNR: 54.9762 dB
ISTA Iteration 6/10, Current PSNR: 54.9762 dB
ISTA Iteration 7/10, Current PSNR: 54.9762 dB
ISTA Iteration 8/10, Current PSNR: 54.9762 dB
ISTA Iteration 9/10, Current PSNR: 54.9762 dB
ISTA Iteration 10/10, Current PSNR: 54.9762 dB
Edge-Enhanced Mask: ZF PSNR=54.97, ISTA PSNR=54.98, ZF SSIM=0.9976, ISTA SSIM=0.9976, Time=0.13s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.0129 dB
ISTA Iteration 2/10, Current PSNR: 47.1647 dB
ISTA Iteration 3/10, Current PSNR: 47.2035 dB
ISTA Iteration 4/10, Current PSNR: 47.2132 dB
ISTA Iteration 5/10, Current PSNR: 47.2157 dB
ISTA Iteration 6/10, Current PSNR: 47.2163 dB
ISTA Iteration 7/10, Current PSNR: 47.2164 dB
ISTA Iteration 8/10, Current PSNR: 47.2165 dB
ISTA Iteration 9/10, Current PSNR: 47.2165 dB
ISTA Iteration 10/10, Current PSNR: 47.2165 dB
Cartesian Mask: ZF PSNR=46.45, ISTA PSNR=47.22, ZF SSIM=0.9887, ISTA SSIM=0.9911, Time=0.12s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.8151 dB
ISTA Iteration 2/10, Current PSNR: 30.2633 dB
ISTA Iteration 3/10, Current PSNR: 30.4422 dB
ISTA Iteration 4/10, Current PSNR: 30.5182 dB
ISTA Iteration 5/10, Current PSNR: 30.5526 dB
ISTA Iteration 6/10, Current PSNR: 30.5689 dB
ISTA Iteration 7/10, Current PSNR: 30.5768 dB
ISTA Iteration 8/10, Current PSNR: 30.5807 dB
ISTA Iteration 9/10, Current PSNR: 30.5826 dB
ISTA Iteration 10/10, Current PSNR: 30.5836 dB
Random 2D Mask: ZF PSNR=28.04, ISTA PSNR=30.58, ZF SSIM=0.7048, ISTA SSIM=0.7229, Time=0.13s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 53.3973 dB
ISTA Iteration 2/10, Current PSNR: 53.3973 dB
ISTA Iteration 3/10, Current PSNR: 53.3973 dB
ISTA Iteration 4/10, Current PSNR: 53.3973 dB
ISTA Iteration 5/10, Current PSNR: 53.3973 dB
ISTA Iteration 6/10, Current PSNR: 53.3973 dB
ISTA Iteration 7/10, Current PSNR: 53.3973 dB
ISTA Iteration 8/10, Current PSNR: 53.3973 dB
ISTA Iteration 9/10, Current PSNR: 53.3973 dB
ISTA Iteration 10/10, Current PSNR: 53.3973 dB
Variable Density Mask: ZF PSNR=53.39, ISTA PSNR=53.40, ZF SSIM=0.9974, ISTA SSIM=0.9974, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 55.3905 dB
ISTA Iteration 2/10, Current PSNR: 55.3906 dB
ISTA Iteration 3/10, Current PSNR: 55.3906 dB
ISTA Iteration 4/10, Current PSNR: 55.3906 dB
ISTA Iteration 5/10, Current PSNR: 55.3906 dB
ISTA Iteration 6/10, Current PSNR: 55.3906 dB
ISTA Iteration 7/10, Current PSNR: 55.3906 dB
ISTA Iteration 8/10, Current PSNR: 55.3906 dB
ISTA Iteration 9/10, Current PSNR: 55.3906 dB
ISTA Iteration 10/10, Current PSNR: 55.3906 dB
Edge-Enhanced Mask: ZF PSNR=55.39, ISTA PSNR=55.39, ZF SSIM=0.9978, ISTA SSIM=0.9978, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.2888 dB
ISTA Iteration 2/10, Current PSNR: 47.4129 dB
ISTA Iteration 3/10, Current PSNR: 47.4444 dB
ISTA Iteration 4/10, Current PSNR: 47.4524 dB
ISTA Iteration 5/10, Current PSNR: 47.4543 dB
ISTA Iteration 6/10, Current PSNR: 47.4548 dB
ISTA Iteration 7/10, Current PSNR: 47.4550 dB
ISTA Iteration 8/10, Current PSNR: 47.4550 dB
ISTA Iteration 9/10, Current PSNR: 47.4550 dB
ISTA Iteration 10/10, Current PSNR: 47.4550 dB
Cartesian Mask: ZF PSNR=46.82, ISTA PSNR=47.46, ZF SSIM=0.9893, ISTA SSIM=0.9915, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.7543 dB
ISTA Iteration 2/10, Current PSNR: 30.2066 dB
ISTA Iteration 3/10, Current PSNR: 30.3890 dB
ISTA Iteration 4/10, Current PSNR: 30.4672 dB
ISTA Iteration 5/10, Current PSNR: 30.5029 dB
ISTA Iteration 6/10, Current PSNR: 30.5198 dB
ISTA Iteration 7/10, Current PSNR: 30.5280 dB
ISTA Iteration 8/10, Current PSNR: 30.5321 dB
ISTA Iteration 9/10, Current PSNR: 30.5341 dB
ISTA Iteration 10/10, Current PSNR: 30.5351 dB
Random 2D Mask: ZF PSNR=28.00, ISTA PSNR=30.54, ZF SSIM=0.7186, ISTA SSIM=0.7403, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 53.3697 dB
ISTA Iteration 2/10, Current PSNR: 53.3697 dB
ISTA Iteration 3/10, Current PSNR: 53.3697 dB
ISTA Iteration 4/10, Current PSNR: 53.3697 dB
ISTA Iteration 5/10, Current PSNR: 53.3697 dB
ISTA Iteration 6/10, Current PSNR: 53.3697 dB
ISTA Iteration 7/10, Current PSNR: 53.3697 dB
ISTA Iteration 8/10, Current PSNR: 53.3697 dB
ISTA Iteration 9/10, Current PSNR: 53.3697 dB
ISTA Iteration 10/10, Current PSNR: 53.3697 dB
Variable Density Mask: ZF PSNR=53.37, ISTA PSNR=53.37, ZF SSIM=0.9972, ISTA SSIM=0.9972, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 55.4915 dB
ISTA Iteration 2/10, Current PSNR: 55.4915 dB
ISTA Iteration 3/10, Current PSNR: 55.4915 dB
ISTA Iteration 4/10, Current PSNR: 55.4915 dB
ISTA Iteration 5/10, Current PSNR: 55.4915 dB
ISTA Iteration 6/10, Current PSNR: 55.4915 dB
ISTA Iteration 7/10, Current PSNR: 55.4915 dB
ISTA Iteration 8/10, Current PSNR: 55.4915 dB
ISTA Iteration 9/10, Current PSNR: 55.4915 dB
ISTA Iteration 10/10, Current PSNR: 55.4915 dB
Edge-Enhanced Mask: ZF PSNR=55.49, ISTA PSNR=55.49, ZF SSIM=0.9977, ISTA SSIM=0.9977, Time=0.12s

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_210_2100179.h5
  ERROR loading file '/kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_210_2100179.h5': Unable to synchronously open file (truncated file: eof = 201064448, sblock->base_addr = 0, stored_eof = 778585656)

Processing: /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_207_2070286.h5
  k-space shape: (16, 4, 640, 320), dtype: complex64

Processing slice 6
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.8641 dB
ISTA Iteration 2/10, Current PSNR: 42.0382 dB
ISTA Iteration 3/10, Current PSNR: 42.0828 dB
ISTA Iteration 4/10, Current PSNR: 42.0941 dB
ISTA Iteration 5/10, Current PSNR: 42.0969 dB
ISTA Iteration 6/10, Current PSNR: 42.0976 dB
ISTA Iteration 7/10, Current PSNR: 42.0978 dB
ISTA Iteration 8/10, Current PSNR: 42.0978 dB
ISTA Iteration 9/10, Current PSNR: 42.0978 dB
ISTA Iteration 10/10, Current PSNR: 42.0978 dB
Cartesian Mask: ZF PSNR=41.23, ISTA PSNR=42.10, ZF SSIM=0.9727, ISTA SSIM=0.9779, Time=0.11s

Testing Random 2D Mask (R=4) for slice 6
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.0144 dB
ISTA Iteration 2/10, Current PSNR: 29.3714 dB
ISTA Iteration 3/10, Current PSNR: 29.5115 dB
ISTA Iteration 4/10, Current PSNR: 29.5707 dB
ISTA Iteration 5/10, Current PSNR: 29.5974 dB
ISTA Iteration 6/10, Current PSNR: 29.6101 dB
ISTA Iteration 7/10, Current PSNR: 29.6162 dB
ISTA Iteration 8/10, Current PSNR: 29.6193 dB
ISTA Iteration 9/10, Current PSNR: 29.6208 dB
ISTA Iteration 10/10, Current PSNR: 29.6215 dB
Random 2D Mask: ZF PSNR=27.68, ISTA PSNR=29.62, ZF SSIM=0.6770, ISTA SSIM=0.7285, Time=0.13s

Testing Variable Density Mask (R=4) for slice 6
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 44.3274 dB
ISTA Iteration 2/10, Current PSNR: 44.3274 dB
ISTA Iteration 3/10, Current PSNR: 44.3274 dB
ISTA Iteration 4/10, Current PSNR: 44.3274 dB
ISTA Iteration 5/10, Current PSNR: 44.3274 dB
ISTA Iteration 6/10, Current PSNR: 44.3274 dB
ISTA Iteration 7/10, Current PSNR: 44.3274 dB
ISTA Iteration 8/10, Current PSNR: 44.3274 dB
ISTA Iteration 9/10, Current PSNR: 44.3274 dB
ISTA Iteration 10/10, Current PSNR: 44.3274 dB
Variable Density Mask: ZF PSNR=44.32, ISTA PSNR=44.33, ZF SSIM=0.9899, ISTA SSIM=0.9899, Time=0.11s

Testing Edge-Enhanced Mask (R=4) for slice 6
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.4228 dB
ISTA Iteration 2/10, Current PSNR: 48.4228 dB
ISTA Iteration 3/10, Current PSNR: 48.4228 dB
ISTA Iteration 4/10, Current PSNR: 48.4228 dB
ISTA Iteration 5/10, Current PSNR: 48.4228 dB
ISTA Iteration 6/10, Current PSNR: 48.4228 dB
ISTA Iteration 7/10, Current PSNR: 48.4228 dB
ISTA Iteration 8/10, Current PSNR: 48.4228 dB
ISTA Iteration 9/10, Current PSNR: 48.4228 dB
ISTA Iteration 10/10, Current PSNR: 48.4228 dB
Edge-Enhanced Mask: ZF PSNR=48.41, ISTA PSNR=48.42, ZF SSIM=0.9922, ISTA SSIM=0.9922, Time=0.12s

Processing slice 7
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.4471 dB
ISTA Iteration 2/10, Current PSNR: 42.6411 dB
ISTA Iteration 3/10, Current PSNR: 42.6909 dB
ISTA Iteration 4/10, Current PSNR: 42.7035 dB
ISTA Iteration 5/10, Current PSNR: 42.7066 dB
ISTA Iteration 6/10, Current PSNR: 42.7074 dB
ISTA Iteration 7/10, Current PSNR: 42.7076 dB
ISTA Iteration 8/10, Current PSNR: 42.7077 dB
ISTA Iteration 9/10, Current PSNR: 42.7077 dB
ISTA Iteration 10/10, Current PSNR: 42.7077 dB
Cartesian Mask: ZF PSNR=41.75, ISTA PSNR=42.71, ZF SSIM=0.9738, ISTA SSIM=0.9791, Time=0.12s

Testing Random 2D Mask (R=4) for slice 7
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.6588 dB
ISTA Iteration 2/10, Current PSNR: 28.9714 dB
ISTA Iteration 3/10, Current PSNR: 29.0942 dB
ISTA Iteration 4/10, Current PSNR: 29.1463 dB
ISTA Iteration 5/10, Current PSNR: 29.1699 dB
ISTA Iteration 6/10, Current PSNR: 29.1811 dB
ISTA Iteration 7/10, Current PSNR: 29.1866 dB
ISTA Iteration 8/10, Current PSNR: 29.1893 dB
ISTA Iteration 9/10, Current PSNR: 29.1906 dB
ISTA Iteration 10/10, Current PSNR: 29.1913 dB
Random 2D Mask: ZF PSNR=27.41, ISTA PSNR=29.19, ZF SSIM=0.6640, ISTA SSIM=0.7197, Time=0.14s

Testing Variable Density Mask (R=4) for slice 7
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 44.7404 dB
ISTA Iteration 2/10, Current PSNR: 44.7404 dB
ISTA Iteration 3/10, Current PSNR: 44.7404 dB
ISTA Iteration 4/10, Current PSNR: 44.7404 dB
ISTA Iteration 5/10, Current PSNR: 44.7404 dB
ISTA Iteration 6/10, Current PSNR: 44.7404 dB
ISTA Iteration 7/10, Current PSNR: 44.7404 dB
ISTA Iteration 8/10, Current PSNR: 44.7404 dB
ISTA Iteration 9/10, Current PSNR: 44.7404 dB
ISTA Iteration 10/10, Current PSNR: 44.7404 dB
Variable Density Mask: ZF PSNR=44.74, ISTA PSNR=44.74, ZF SSIM=0.9910, ISTA SSIM=0.9910, Time=0.14s

Testing Edge-Enhanced Mask (R=4) for slice 7
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 48.5499 dB
ISTA Iteration 2/10, Current PSNR: 48.5499 dB
ISTA Iteration 3/10, Current PSNR: 48.5499 dB
ISTA Iteration 4/10, Current PSNR: 48.5499 dB
ISTA Iteration 5/10, Current PSNR: 48.5499 dB
ISTA Iteration 6/10, Current PSNR: 48.5499 dB
ISTA Iteration 7/10, Current PSNR: 48.5499 dB
ISTA Iteration 8/10, Current PSNR: 48.5499 dB
ISTA Iteration 9/10, Current PSNR: 48.5499 dB
ISTA Iteration 10/10, Current PSNR: 48.5499 dB
Edge-Enhanced Mask: ZF PSNR=48.54, ISTA PSNR=48.55, ZF SSIM=0.9929, ISTA SSIM=0.9929, Time=0.14s

Processing slice 8
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.6830 dB
ISTA Iteration 2/10, Current PSNR: 42.8399 dB
ISTA Iteration 3/10, Current PSNR: 42.8800 dB
ISTA Iteration 4/10, Current PSNR: 42.8901 dB
ISTA Iteration 5/10, Current PSNR: 42.8926 dB
ISTA Iteration 6/10, Current PSNR: 42.8933 dB
ISTA Iteration 7/10, Current PSNR: 42.8934 dB
ISTA Iteration 8/10, Current PSNR: 42.8935 dB
ISTA Iteration 9/10, Current PSNR: 42.8935 dB
ISTA Iteration 10/10, Current PSNR: 42.8935 dB
Cartesian Mask: ZF PSNR=42.10, ISTA PSNR=42.89, ZF SSIM=0.9754, ISTA SSIM=0.9801, Time=0.11s

Testing Random 2D Mask (R=4) for slice 8
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 29.3511 dB
ISTA Iteration 2/10, Current PSNR: 29.7826 dB
ISTA Iteration 3/10, Current PSNR: 29.9508 dB
ISTA Iteration 4/10, Current PSNR: 30.0211 dB
ISTA Iteration 5/10, Current PSNR: 30.0527 dB
ISTA Iteration 6/10, Current PSNR: 30.0675 dB
ISTA Iteration 7/10, Current PSNR: 30.0747 dB
ISTA Iteration 8/10, Current PSNR: 30.0782 dB
ISTA Iteration 9/10, Current PSNR: 30.0799 dB
ISTA Iteration 10/10, Current PSNR: 30.0808 dB
Random 2D Mask: ZF PSNR=27.69, ISTA PSNR=30.08, ZF SSIM=0.6499, ISTA SSIM=0.7229, Time=0.14s

Testing Variable Density Mask (R=4) for slice 8
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 45.5111 dB
ISTA Iteration 2/10, Current PSNR: 45.5111 dB
ISTA Iteration 3/10, Current PSNR: 45.5111 dB
ISTA Iteration 4/10, Current PSNR: 45.5111 dB
ISTA Iteration 5/10, Current PSNR: 45.5111 dB
ISTA Iteration 6/10, Current PSNR: 45.5111 dB
ISTA Iteration 7/10, Current PSNR: 45.5111 dB
ISTA Iteration 8/10, Current PSNR: 45.5111 dB
ISTA Iteration 9/10, Current PSNR: 45.5111 dB
ISTA Iteration 10/10, Current PSNR: 45.5111 dB
Variable Density Mask: ZF PSNR=45.51, ISTA PSNR=45.51, ZF SSIM=0.9927, ISTA SSIM=0.9927, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 8
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 49.3283 dB
ISTA Iteration 2/10, Current PSNR: 49.3283 dB
ISTA Iteration 3/10, Current PSNR: 49.3283 dB
ISTA Iteration 4/10, Current PSNR: 49.3283 dB
ISTA Iteration 5/10, Current PSNR: 49.3283 dB
ISTA Iteration 6/10, Current PSNR: 49.3283 dB
ISTA Iteration 7/10, Current PSNR: 49.3283 dB
ISTA Iteration 8/10, Current PSNR: 49.3283 dB
ISTA Iteration 9/10, Current PSNR: 49.3283 dB
ISTA Iteration 10/10, Current PSNR: 49.3283 dB
Edge-Enhanced Mask: ZF PSNR=49.32, ISTA PSNR=49.33, ZF SSIM=0.9939, ISTA SSIM=0.9939, Time=0.12s

Processing slice 9
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.1496 dB
ISTA Iteration 2/10, Current PSNR: 42.3107 dB
ISTA Iteration 3/10, Current PSNR: 42.3520 dB
ISTA Iteration 4/10, Current PSNR: 42.3623 dB
ISTA Iteration 5/10, Current PSNR: 42.3649 dB
ISTA Iteration 6/10, Current PSNR: 42.3656 dB
ISTA Iteration 7/10, Current PSNR: 42.3657 dB
ISTA Iteration 8/10, Current PSNR: 42.3658 dB
ISTA Iteration 9/10, Current PSNR: 42.3658 dB
ISTA Iteration 10/10, Current PSNR: 42.3658 dB
Cartesian Mask: ZF PSNR=41.56, ISTA PSNR=42.37, ZF SSIM=0.9738, ISTA SSIM=0.9783, Time=0.12s

Testing Random 2D Mask (R=4) for slice 9
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 28.9706 dB
ISTA Iteration 2/10, Current PSNR: 29.4074 dB
ISTA Iteration 3/10, Current PSNR: 29.5806 dB
ISTA Iteration 4/10, Current PSNR: 29.6538 dB
ISTA Iteration 5/10, Current PSNR: 29.6869 dB
ISTA Iteration 6/10, Current PSNR: 29.7025 dB
ISTA Iteration 7/10, Current PSNR: 29.7101 dB
ISTA Iteration 8/10, Current PSNR: 29.7138 dB
ISTA Iteration 9/10, Current PSNR: 29.7156 dB
ISTA Iteration 10/10, Current PSNR: 29.7166 dB
Random 2D Mask: ZF PSNR=27.21, ISTA PSNR=29.72, ZF SSIM=0.6352, ISTA SSIM=0.7112, Time=0.13s

Testing Variable Density Mask (R=4) for slice 9
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 43.5192 dB
ISTA Iteration 2/10, Current PSNR: 43.5192 dB
ISTA Iteration 3/10, Current PSNR: 43.5192 dB
ISTA Iteration 4/10, Current PSNR: 43.5192 dB
ISTA Iteration 5/10, Current PSNR: 43.5192 dB
ISTA Iteration 6/10, Current PSNR: 43.5192 dB
ISTA Iteration 7/10, Current PSNR: 43.5192 dB
ISTA Iteration 8/10, Current PSNR: 43.5192 dB
ISTA Iteration 9/10, Current PSNR: 43.5192 dB
ISTA Iteration 10/10, Current PSNR: 43.5192 dB
Variable Density Mask: ZF PSNR=43.52, ISTA PSNR=43.52, ZF SSIM=0.9913, ISTA SSIM=0.9913, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 9
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.8320 dB
ISTA Iteration 2/10, Current PSNR: 47.8320 dB
ISTA Iteration 3/10, Current PSNR: 47.8320 dB
ISTA Iteration 4/10, Current PSNR: 47.8320 dB
ISTA Iteration 5/10, Current PSNR: 47.8320 dB
ISTA Iteration 6/10, Current PSNR: 47.8320 dB
ISTA Iteration 7/10, Current PSNR: 47.8320 dB
ISTA Iteration 8/10, Current PSNR: 47.8320 dB
ISTA Iteration 9/10, Current PSNR: 47.8320 dB
ISTA Iteration 10/10, Current PSNR: 47.8320 dB
Edge-Enhanced Mask: ZF PSNR=47.83, ISTA PSNR=47.83, ZF SSIM=0.9927, ISTA SSIM=0.9927, Time=0.12s

Processing slice 10
Selected 2D slice (shape (256, 256), range [0.00, 1.00])


Testing Cartesian Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 41.2292 dB
ISTA Iteration 2/10, Current PSNR: 41.3775 dB
ISTA Iteration 3/10, Current PSNR: 41.4153 dB
ISTA Iteration 4/10, Current PSNR: 41.4249 dB
ISTA Iteration 5/10, Current PSNR: 41.4272 dB
ISTA Iteration 6/10, Current PSNR: 41.4278 dB
ISTA Iteration 7/10, Current PSNR: 41.4280 dB
ISTA Iteration 8/10, Current PSNR: 41.4280 dB
ISTA Iteration 9/10, Current PSNR: 41.4280 dB
ISTA Iteration 10/10, Current PSNR: 41.4280 dB
Cartesian Mask: ZF PSNR=40.68, ISTA PSNR=41.43, ZF SSIM=0.9719, ISTA SSIM=0.9767, Time=0.11s

Testing Random 2D Mask (R=4) for slice 10
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 27.9098 dB
ISTA Iteration 2/10, Current PSNR: 28.3199 dB
ISTA Iteration 3/10, Current PSNR: 28.4829 dB
ISTA Iteration 4/10, Current PSNR: 28.5523 dB
ISTA Iteration 5/10, Current PSNR: 28.5838 dB
ISTA Iteration 6/10, Current PSNR: 28.5987 dB
ISTA Iteration 7/10, Current PSNR: 28.6059 dB
ISTA Iteration 8/10, Current PSNR: 28.6095 dB
ISTA Iteration 9/10, Current PSNR: 28.6113 dB
ISTA Iteration 10/10, Current PSNR: 28.6121 dB
Random 2D Mask: ZF PSNR=26.27, ISTA PSNR=28.61, ZF SSIM=0.6336, ISTA SSIM=0.6998, Time=0.13s

Testing Variable Density Mask (R=4) for slice 10
  Variable Density Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 42.8002 dB
ISTA Iteration 2/10, Current PSNR: 42.8002 dB
ISTA Iteration 3/10, Current PSNR: 42.8002 dB
ISTA Iteration 4/10, Current PSNR: 42.8002 dB
ISTA Iteration 5/10, Current PSNR: 42.8002 dB
ISTA Iteration 6/10, Current PSNR: 42.8002 dB
ISTA Iteration 7/10, Current PSNR: 42.8002 dB
ISTA Iteration 8/10, Current PSNR: 42.8002 dB
ISTA Iteration 9/10, Current PSNR: 42.8002 dB
ISTA Iteration 10/10, Current PSNR: 42.8002 dB
Variable Density Mask: ZF PSNR=42.80, ISTA PSNR=42.80, ZF SSIM=0.9920, ISTA SSIM=0.9920, Time=0.12s

Testing Edge-Enhanced Mask (R=4) for slice 10
  Edge-Enhanced Mask: Target R=4, Actual R=4.00
Starting ISTA: iterations=10, lambda=0.0001, wavelet=db4, level=3
ISTA Iteration 1/10, Current PSNR: 47.7847 dB
ISTA Iteration 2/10, Current PSNR: 47.7847 dB
ISTA Iteration 3/10, Current PSNR: 47.7847 dB
ISTA Iteration 4/10, Current PSNR: 47.7847 dB
ISTA Iteration 5/10, Current PSNR: 47.7847 dB
ISTA Iteration 6/10, Current PSNR: 47.7847 dB
ISTA Iteration 7/10, Current PSNR: 47.7847 dB
ISTA Iteration 8/10, Current PSNR: 47.7847 dB
ISTA Iteration 9/10, Current PSNR: 47.7847 dB
ISTA Iteration 10/10, Current PSNR: 47.7847 dB
Edge-Enhanced Mask: ZF PSNR=47.78, ISTA PSNR=47.78, ZF SSIM=0.9928, ISTA SSIM=0.9928, Time=0.12s

--- Summary of Results (R=4) ---
Subject                        | Slice      | Mask            | ZF PSNR    | ISTA PSNR  | ZF SSIM    | ISTA SSIM  | Time (s)  
----------------------------------------------------------------------------------------------------
file_brain_AXFLAIR_200_600244  | 6          | Cartesian       | 42.31      | 43.49      | 0.9861     | 0.9890     | 0.12      
file_brain_AXFLAIR_200_600244  | 6          | Random 2D       | 28.87      | 30.44      | 0.7747     | 0.7622     | 0.13      
file_brain_AXFLAIR_200_600244  | 6          | Variable Density | 42.74      | 42.74      | 0.9865     | 0.9865     | 0.12      
file_brain_AXFLAIR_200_600244  | 6          | Edge-Enhanced   | 45.90      | 45.91      | 0.9889     | 0.9889     | 0.12      
file_brain_AXFLAIR_200_600244  | 7          | Cartesian       | 42.33      | 42.96      | 0.9832     | 0.9842     | 0.12      
file_brain_AXFLAIR_200_600244  | 7          | Random 2D       | 27.47      | 28.93      | 0.7705     | 0.7173     | 0.14      
file_brain_AXFLAIR_200_600244  | 7          | Variable Density | 42.50      | 42.50      | 0.9874     | 0.9874     | 0.12      
file_brain_AXFLAIR_200_600244  | 7          | Edge-Enhanced   | 46.65      | 46.65      | 0.9895     | 0.9895     | 0.14      
file_brain_AXFLAIR_200_600244  | 8          | Cartesian       | 42.79      | 43.50      | 0.9862     | 0.9878     | 0.11      
file_brain_AXFLAIR_200_600244  | 8          | Random 2D       | 29.80      | 31.39      | 0.7948     | 0.7725     | 0.13      
file_brain_AXFLAIR_200_600244  | 8          | Variable Density | 43.68      | 43.68      | 0.9884     | 0.9884     | 0.12      
file_brain_AXFLAIR_200_600244  | 8          | Edge-Enhanced   | 46.27      | 46.27      | 0.9897     | 0.9897     | 0.12      
file_brain_AXFLAIR_200_600244  | 9          | Cartesian       | 43.48      | 44.00      | 0.9852     | 0.9864     | 0.11      
file_brain_AXFLAIR_200_600244  | 9          | Random 2D       | 29.18      | 30.63      | 0.8045     | 0.7617     | 0.15      
file_brain_AXFLAIR_200_600244  | 9          | Variable Density | 44.87      | 44.87      | 0.9900     | 0.9900     | 0.12      
file_brain_AXFLAIR_200_600244  | 9          | Edge-Enhanced   | 47.56      | 47.56      | 0.9913     | 0.9913     | 0.13      
file_brain_AXFLAIR_200_600244  | 10         | Cartesian       | 44.15      | 44.85      | 0.9878     | 0.9893     | 0.12      
file_brain_AXFLAIR_200_600244  | 10         | Random 2D       | 32.50      | 33.77      | 0.8597     | 0.8322     | 0.13      
file_brain_AXFLAIR_200_600244  | 10         | Variable Density | 47.00      | 47.00      | 0.9923     | 0.9923     | 0.11      
file_brain_AXFLAIR_200_600244  | 10         | Edge-Enhanced   | 48.17      | 48.17      | 0.9924     | 0.9924     | 0.12      
file_brain_AXT1POST_207_20705  | 6          | Cartesian       | 33.36      | 34.38      | 0.9242     | 0.9296     | 0.11      
file_brain_AXT1POST_207_20705  | 6          | Random 2D       | 26.29      | 28.54      | 0.6081     | 0.6691     | 0.13      
file_brain_AXT1POST_207_20705  | 6          | Variable Density | 37.71      | 37.86      | 0.9787     | 0.9791     | 0.12      
file_brain_AXT1POST_207_20705  | 6          | Edge-Enhanced   | 41.39      | 41.82      | 0.9591     | 0.9676     | 0.12      
file_brain_AXT1POST_207_20705  | 7          | Cartesian       | 33.30      | 34.33      | 0.9256     | 0.9313     | 0.11      
file_brain_AXT1POST_207_20705  | 7          | Random 2D       | 26.01      | 28.17      | 0.6156     | 0.6563     | 0.13      
file_brain_AXT1POST_207_20705  | 7          | Variable Density | 38.71      | 38.80      | 0.9818     | 0.9819     | 0.11      
file_brain_AXT1POST_207_20705  | 7          | Edge-Enhanced   | 42.17      | 42.47      | 0.9662     | 0.9705     | 0.12      
file_brain_AXT1POST_207_20705  | 8          | Cartesian       | 36.54      | 37.57      | 0.9482     | 0.9520     | 0.12      
file_brain_AXT1POST_207_20705  | 8          | Random 2D       | 29.41      | 31.83      | 0.6939     | 0.7580     | 0.13      
file_brain_AXT1POST_207_20705  | 8          | Variable Density | 43.05      | 43.17      | 0.9893     | 0.9893     | 0.12      
file_brain_AXT1POST_207_20705  | 8          | Edge-Enhanced   | 46.89      | 46.99      | 0.9879     | 0.9886     | 0.12      
file_brain_AXT1POST_207_20705  | 9          | Cartesian       | 36.10      | 37.08      | 0.9501     | 0.9525     | 0.12      
file_brain_AXT1POST_207_20705  | 9          | Random 2D       | 28.41      | 30.75      | 0.6761     | 0.7337     | 0.13      
file_brain_AXT1POST_207_20705  | 9          | Variable Density | 43.80      | 43.89      | 0.9901     | 0.9903     | 0.13      
file_brain_AXT1POST_207_20705  | 9          | Edge-Enhanced   | 47.10      | 47.16      | 0.9894     | 0.9898     | 0.13      
file_brain_AXT1POST_207_20705  | 10         | Cartesian       | 34.56      | 35.69      | 0.9413     | 0.9424     | 0.11      
file_brain_AXT1POST_207_20705  | 10         | Random 2D       | 26.95      | 29.37      | 0.6456     | 0.7021     | 0.13      
file_brain_AXT1POST_207_20705  | 10         | Variable Density | 45.15      | 45.22      | 0.9913     | 0.9914     | 0.11      
file_brain_AXT1POST_207_20705  | 10         | Edge-Enhanced   | 47.52      | 47.55      | 0.9905     | 0.9906     | 0.12      
file_brain_AXT2_209_6001390.h  | 6          | Cartesian       | 32.39      | 33.48      | 0.9244     | 0.9176     | 0.11      
file_brain_AXT2_209_6001390.h  | 6          | Random 2D       | 27.65      | 29.57      | 0.6965     | 0.7126     | 0.13      
file_brain_AXT2_209_6001390.h  | 6          | Variable Density | 42.80      | 42.80      | 0.9905     | 0.9905     | 0.11      
file_brain_AXT2_209_6001390.h  | 6          | Edge-Enhanced   | 45.59      | 45.64      | 0.9866     | 0.9871     | 0.12      
file_brain_AXT2_209_6001390.h  | 7          | Cartesian       | 33.38      | 34.45      | 0.9302     | 0.9254     | 0.11      
file_brain_AXT2_209_6001390.h  | 7          | Random 2D       | 28.16      | 30.06      | 0.7087     | 0.7172     | 0.13      
file_brain_AXT2_209_6001390.h  | 7          | Variable Density | 42.45      | 42.45      | 0.9913     | 0.9913     | 0.12      
file_brain_AXT2_209_6001390.h  | 7          | Edge-Enhanced   | 45.93      | 45.96      | 0.9876     | 0.9879     | 0.12      
file_brain_AXT2_209_6001390.h  | 8          | Cartesian       | 33.68      | 34.88      | 0.9356     | 0.9312     | 0.12      
file_brain_AXT2_209_6001390.h  | 8          | Random 2D       | 28.29      | 30.29      | 0.7103     | 0.7231     | 0.13      
file_brain_AXT2_209_6001390.h  | 8          | Variable Density | 43.50      | 43.50      | 0.9933     | 0.9933     | 0.11      
file_brain_AXT2_209_6001390.h  | 8          | Edge-Enhanced   | 46.87      | 46.89      | 0.9898     | 0.9899     | 0.12      
file_brain_AXT2_209_6001390.h  | 9          | Cartesian       | 32.26      | 33.77      | 0.9319     | 0.9247     | 0.11      
file_brain_AXT2_209_6001390.h  | 9          | Random 2D       | 27.85      | 29.73      | 0.7167     | 0.7122     | 0.14      
file_brain_AXT2_209_6001390.h  | 9          | Variable Density | 42.93      | 42.93      | 0.9923     | 0.9923     | 0.13      
file_brain_AXT2_209_6001390.h  | 9          | Edge-Enhanced   | 46.18      | 46.20      | 0.9891     | 0.9893     | 0.12      
file_brain_AXT2_209_6001390.h  | 10         | Cartesian       | 33.75      | 34.99      | 0.9422     | 0.9349     | 0.12      
file_brain_AXT2_209_6001390.h  | 10         | Random 2D       | 28.93      | 31.03      | 0.7389     | 0.7373     | 0.14      
file_brain_AXT2_209_6001390.h  | 10         | Variable Density | 42.35      | 42.36      | 0.9920     | 0.9920     | 0.14      
file_brain_AXT2_209_6001390.h  | 10         | Edge-Enhanced   | 46.05      | 46.09      | 0.9890     | 0.9891     | 0.13      
file_brain_AXT2_200_6002171.h  | 6          | Cartesian       | 41.64      | 42.03      | 0.9789     | 0.9788     | 0.11      
file_brain_AXT2_200_6002171.h  | 6          | Random 2D       | 30.09      | 31.98      | 0.7742     | 0.7829     | 0.13      
file_brain_AXT2_200_6002171.h  | 6          | Variable Density | 41.35      | 41.43      | 0.9878     | 0.9879     | 0.11      
file_brain_AXT2_200_6002171.h  | 6          | Edge-Enhanced   | 47.09      | 47.12      | 0.9895     | 0.9897     | 0.12      
file_brain_AXT2_200_6002171.h  | 7          | Cartesian       | 41.69      | 42.05      | 0.9792     | 0.9792     | 0.12      
file_brain_AXT2_200_6002171.h  | 7          | Random 2D       | 30.54      | 32.63      | 0.7841     | 0.7951     | 0.13      
file_brain_AXT2_200_6002171.h  | 7          | Variable Density | 43.11      | 43.11      | 0.9900     | 0.9900     | 0.11      
file_brain_AXT2_200_6002171.h  | 7          | Edge-Enhanced   | 47.53      | 47.54      | 0.9910     | 0.9911     | 0.12      
file_brain_AXT2_200_6002171.h  | 8          | Cartesian       | 43.12      | 43.48      | 0.9845     | 0.9843     | 0.12      
file_brain_AXT2_200_6002171.h  | 8          | Random 2D       | 30.65      | 32.60      | 0.7893     | 0.7997     | 0.15      
file_brain_AXT2_200_6002171.h  | 8          | Variable Density | 42.42      | 42.42      | 0.9913     | 0.9913     | 0.12      
file_brain_AXT2_200_6002171.h  | 8          | Edge-Enhanced   | 47.90      | 47.92      | 0.9920     | 0.9920     | 0.12      
file_brain_AXT2_200_6002171.h  | 9          | Cartesian       | 42.75      | 43.16      | 0.9839     | 0.9837     | 0.11      
file_brain_AXT2_200_6002171.h  | 9          | Random 2D       | 30.18      | 31.85      | 0.7882     | 0.7888     | 0.14      
file_brain_AXT2_200_6002171.h  | 9          | Variable Density | 41.85      | 41.85      | 0.9904     | 0.9904     | 0.12      
file_brain_AXT2_200_6002171.h  | 9          | Edge-Enhanced   | 47.40      | 47.41      | 0.9916     | 0.9916     | 0.13      
file_brain_AXT2_200_6002171.h  | 10         | Cartesian       | 44.07      | 44.47      | 0.9864     | 0.9864     | 0.11      
file_brain_AXT2_200_6002171.h  | 10         | Random 2D       | 32.04      | 33.78      | 0.8269     | 0.8288     | 0.13      
file_brain_AXT2_200_6002171.h  | 10         | Variable Density | 43.06      | 43.06      | 0.9923     | 0.9923     | 0.11      
file_brain_AXT2_200_6002171.h  | 10         | Edge-Enhanced   | 47.53      | 47.54      | 0.9919     | 0.9920     | 0.12      
file_brain_AXT1POST_200_60024  | 6          | Cartesian       | 32.76      | 33.53      | 0.9212     | 0.9219     | 0.12      
file_brain_AXT1POST_200_60024  | 6          | Random 2D       | 25.43      | 27.76      | 0.6177     | 0.6386     | 0.13      
file_brain_AXT1POST_200_60024  | 6          | Variable Density | 46.13      | 46.17      | 0.9927     | 0.9927     | 0.11      
file_brain_AXT1POST_200_60024  | 6          | Edge-Enhanced   | 48.71      | 48.72      | 0.9929     | 0.9930     | 0.12      
file_brain_AXT1POST_200_60024  | 7          | Cartesian       | 33.39      | 34.36      | 0.9282     | 0.9294     | 0.12      
file_brain_AXT1POST_200_60024  | 7          | Random 2D       | 25.53      | 28.08      | 0.6295     | 0.6493     | 0.13      
file_brain_AXT1POST_200_60024  | 7          | Variable Density | 47.76      | 47.77      | 0.9944     | 0.9944     | 0.12      
file_brain_AXT1POST_200_60024  | 7          | Edge-Enhanced   | 49.36      | 49.37      | 0.9940     | 0.9941     | 0.12      
file_brain_AXT1POST_200_60024  | 8          | Cartesian       | 33.84      | 34.75      | 0.9343     | 0.9340     | 0.11      
file_brain_AXT1POST_200_60024  | 8          | Random 2D       | 25.33      | 27.46      | 0.6395     | 0.6475     | 0.13      
file_brain_AXT1POST_200_60024  | 8          | Variable Density | 48.43      | 48.43      | 0.9949     | 0.9949     | 0.12      
file_brain_AXT1POST_200_60024  | 8          | Edge-Enhanced   | 49.89      | 49.89      | 0.9950     | 0.9950     | 0.12      
file_brain_AXT1POST_200_60024  | 9          | Cartesian       | 34.32      | 35.11      | 0.9401     | 0.9367     | 0.13      
file_brain_AXT1POST_200_60024  | 9          | Random 2D       | 25.91      | 28.20      | 0.6568     | 0.6530     | 0.14      
file_brain_AXT1POST_200_60024  | 9          | Variable Density | 47.88      | 47.88      | 0.9946     | 0.9946     | 0.11      
file_brain_AXT1POST_200_60024  | 9          | Edge-Enhanced   | 49.46      | 49.46      | 0.9947     | 0.9947     | 0.12      
file_brain_AXT1POST_200_60024  | 10         | Cartesian       | 36.79      | 37.96      | 0.9579     | 0.9554     | 0.11      
file_brain_AXT1POST_200_60024  | 10         | Random 2D       | 27.27      | 30.11      | 0.6857     | 0.7012     | 0.13      
file_brain_AXT1POST_200_60024  | 10         | Variable Density | 49.36      | 49.36      | 0.9959     | 0.9959     | 0.12      
file_brain_AXT1POST_200_60024  | 10         | Edge-Enhanced   | 50.77      | 50.77      | 0.9956     | 0.9956     | 0.13      
file_brain_AXT2_209_6001439.h  | 6          | Cartesian       | 30.58      | 31.52      | 0.9070     | 0.9020     | 0.11      
file_brain_AXT2_209_6001439.h  | 6          | Random 2D       | 25.70      | 27.77      | 0.6265     | 0.6532     | 0.13      
file_brain_AXT2_209_6001439.h  | 6          | Variable Density | 42.89      | 42.89      | 0.9922     | 0.9922     | 0.12      
file_brain_AXT2_209_6001439.h  | 6          | Edge-Enhanced   | 46.76      | 46.79      | 0.9901     | 0.9903     | 0.12      
file_brain_AXT2_209_6001439.h  | 7          | Cartesian       | 30.50      | 31.46      | 0.9109     | 0.9066     | 0.11      
file_brain_AXT2_209_6001439.h  | 7          | Random 2D       | 25.75      | 27.77      | 0.6396     | 0.6520     | 0.14      
file_brain_AXT2_209_6001439.h  | 7          | Variable Density | 43.96      | 43.96      | 0.9930     | 0.9930     | 0.12      
file_brain_AXT2_209_6001439.h  | 7          | Edge-Enhanced   | 47.44      | 47.45      | 0.9920     | 0.9920     | 0.12      
file_brain_AXT2_209_6001439.h  | 8          | Cartesian       | 30.59      | 32.12      | 0.9137     | 0.9097     | 0.11      
file_brain_AXT2_209_6001439.h  | 8          | Random 2D       | 25.67      | 27.60      | 0.6507     | 0.6546     | 0.14      
file_brain_AXT2_209_6001439.h  | 8          | Variable Density | 42.89      | 42.89      | 0.9924     | 0.9924     | 0.12      
file_brain_AXT2_209_6001439.h  | 8          | Edge-Enhanced   | 46.84      | 46.85      | 0.9908     | 0.9908     | 0.12      
file_brain_AXT2_209_6001439.h  | 9          | Cartesian       | 30.49      | 31.64      | 0.9182     | 0.9080     | 0.11      
file_brain_AXT2_209_6001439.h  | 9          | Random 2D       | 25.92      | 27.83      | 0.6634     | 0.6537     | 0.13      
file_brain_AXT2_209_6001439.h  | 9          | Variable Density | 43.26      | 43.26      | 0.9934     | 0.9934     | 0.11      
file_brain_AXT2_209_6001439.h  | 9          | Edge-Enhanced   | 46.47      | 46.48      | 0.9916     | 0.9916     | 0.12      
file_brain_AXT2_209_6001439.h  | 10         | Cartesian       | 31.65      | 33.26      | 0.9291     | 0.9202     | 0.11      
file_brain_AXT2_209_6001439.h  | 10         | Random 2D       | 26.50      | 28.54      | 0.6931     | 0.6716     | 0.13      
file_brain_AXT2_209_6001439.h  | 10         | Variable Density | 42.09      | 42.10      | 0.9919     | 0.9918     | 0.11      
file_brain_AXT2_209_6001439.h  | 10         | Edge-Enhanced   | 45.50      | 45.51      | 0.9896     | 0.9896     | 0.12      
file_brain_AXT1POST_207_20705  | 6          | Cartesian       | 36.13      | 37.06      | 0.9407     | 0.9429     | 0.11      
file_brain_AXT1POST_207_20705  | 6          | Random 2D       | 28.13      | 30.70      | 0.6692     | 0.7269     | 0.13      
file_brain_AXT1POST_207_20705  | 6          | Variable Density | 43.63      | 43.74      | 0.9886     | 0.9888     | 0.12      
file_brain_AXT1POST_207_20705  | 6          | Edge-Enhanced   | 45.75      | 45.89      | 0.9834     | 0.9847     | 0.12      
file_brain_AXT1POST_207_20705  | 7          | Cartesian       | 36.65      | 37.57      | 0.9473     | 0.9477     | 0.12      
file_brain_AXT1POST_207_20705  | 7          | Random 2D       | 28.19      | 30.60      | 0.6759     | 0.7289     | 0.14      
file_brain_AXT1POST_207_20705  | 7          | Variable Density | 45.32      | 45.36      | 0.9916     | 0.9916     | 0.11      
file_brain_AXT1POST_207_20705  | 7          | Edge-Enhanced   | 47.87      | 47.90      | 0.9904     | 0.9905     | 0.12      
file_brain_AXT1POST_207_20705  | 8          | Cartesian       | 36.77      | 37.62      | 0.9505     | 0.9488     | 0.11      
file_brain_AXT1POST_207_20705  | 8          | Random 2D       | 28.06      | 30.37      | 0.6865     | 0.7277     | 0.13      
file_brain_AXT1POST_207_20705  | 8          | Variable Density | 46.23      | 46.27      | 0.9924     | 0.9924     | 0.11      
file_brain_AXT1POST_207_20705  | 8          | Edge-Enhanced   | 48.27      | 48.28      | 0.9919     | 0.9920     | 0.12      
file_brain_AXT1POST_207_20705  | 9          | Cartesian       | 37.70      | 38.72      | 0.9564     | 0.9540     | 0.12      
file_brain_AXT1POST_207_20705  | 9          | Random 2D       | 28.91      | 31.85      | 0.6889     | 0.7555     | 0.13      
file_brain_AXT1POST_207_20705  | 9          | Variable Density | 47.00      | 47.01      | 0.9934     | 0.9934     | 0.11      
file_brain_AXT1POST_207_20705  | 9          | Edge-Enhanced   | 49.08      | 49.08      | 0.9939     | 0.9939     | 0.12      
file_brain_AXT1POST_207_20705  | 10         | Cartesian       | 36.93      | 38.16      | 0.9538     | 0.9494     | 0.12      
file_brain_AXT1POST_207_20705  | 10         | Random 2D       | 28.76      | 31.24      | 0.7224     | 0.7468     | 0.13      
file_brain_AXT1POST_207_20705  | 10         | Variable Density | 48.07      | 48.07      | 0.9943     | 0.9943     | 0.12      
file_brain_AXT1POST_207_20705  | 10         | Edge-Enhanced   | 49.66      | 49.66      | 0.9947     | 0.9947     | 0.13      
file_brain_AXT1_202_6000301.h  | 6          | Cartesian       | 45.04      | 45.70      | 0.9845     | 0.9869     | 0.13      
file_brain_AXT1_202_6000301.h  | 6          | Random 2D       | 28.73      | 30.94      | 0.7262     | 0.7399     | 0.14      
file_brain_AXT1_202_6000301.h  | 6          | Variable Density | 47.59      | 47.66      | 0.9943     | 0.9944     | 0.12      
file_brain_AXT1_202_6000301.h  | 6          | Edge-Enhanced   | 53.10      | 53.11      | 0.9965     | 0.9966     | 0.12      
file_brain_AXT1_202_6000301.h  | 7          | Cartesian       | 45.15      | 45.93      | 0.9851     | 0.9876     | 0.11      
file_brain_AXT1_202_6000301.h  | 7          | Random 2D       | 28.29      | 30.35      | 0.7222     | 0.7320     | 0.13      
file_brain_AXT1_202_6000301.h  | 7          | Variable Density | 49.94      | 49.95      | 0.9960     | 0.9960     | 0.13      
file_brain_AXT1_202_6000301.h  | 7          | Edge-Enhanced   | 54.62      | 54.63      | 0.9973     | 0.9974     | 0.12      
file_brain_AXT1_202_6000301.h  | 8          | Cartesian       | 45.50      | 46.29      | 0.9864     | 0.9890     | 0.11      
file_brain_AXT1_202_6000301.h  | 8          | Random 2D       | 28.00      | 30.33      | 0.7194     | 0.7288     | 0.14      
file_brain_AXT1_202_6000301.h  | 8          | Variable Density | 51.90      | 51.91      | 0.9966     | 0.9966     | 0.12      
file_brain_AXT1_202_6000301.h  | 8          | Edge-Enhanced   | 54.97      | 54.98      | 0.9976     | 0.9976     | 0.13      
file_brain_AXT1_202_6000301.h  | 9          | Cartesian       | 46.45      | 47.22      | 0.9887     | 0.9911     | 0.12      
file_brain_AXT1_202_6000301.h  | 9          | Random 2D       | 28.04      | 30.58      | 0.7048     | 0.7229     | 0.13      
file_brain_AXT1_202_6000301.h  | 9          | Variable Density | 53.39      | 53.40      | 0.9974     | 0.9974     | 0.11      
file_brain_AXT1_202_6000301.h  | 9          | Edge-Enhanced   | 55.39      | 55.39      | 0.9978     | 0.9978     | 0.12      
file_brain_AXT1_202_6000301.h  | 10         | Cartesian       | 46.82      | 47.46      | 0.9893     | 0.9915     | 0.11      
file_brain_AXT1_202_6000301.h  | 10         | Random 2D       | 28.00      | 30.54      | 0.7186     | 0.7403     | 0.13      
file_brain_AXT1_202_6000301.h  | 10         | Variable Density | 53.37      | 53.37      | 0.9972     | 0.9972     | 0.12      
file_brain_AXT1_202_6000301.h  | 10         | Edge-Enhanced   | 55.49      | 55.49      | 0.9977     | 0.9977     | 0.12      
file_brain_AXT2_207_2070286.h  | 6          | Cartesian       | 41.23      | 42.10      | 0.9727     | 0.9779     | 0.11      
file_brain_AXT2_207_2070286.h  | 6          | Random 2D       | 27.68      | 29.62      | 0.6770     | 0.7285     | 0.13      
file_brain_AXT2_207_2070286.h  | 6          | Variable Density | 44.32      | 44.33      | 0.9899     | 0.9899     | 0.11      
file_brain_AXT2_207_2070286.h  | 6          | Edge-Enhanced   | 48.41      | 48.42      | 0.9922     | 0.9922     | 0.12      
file_brain_AXT2_207_2070286.h  | 7          | Cartesian       | 41.75      | 42.71      | 0.9738     | 0.9791     | 0.12      
file_brain_AXT2_207_2070286.h  | 7          | Random 2D       | 27.41      | 29.19      | 0.6640     | 0.7197     | 0.14      
file_brain_AXT2_207_2070286.h  | 7          | Variable Density | 44.74      | 44.74      | 0.9910     | 0.9910     | 0.14      
file_brain_AXT2_207_2070286.h  | 7          | Edge-Enhanced   | 48.54      | 48.55      | 0.9929     | 0.9929     | 0.14      
file_brain_AXT2_207_2070286.h  | 8          | Cartesian       | 42.10      | 42.89      | 0.9754     | 0.9801     | 0.11      
file_brain_AXT2_207_2070286.h  | 8          | Random 2D       | 27.69      | 30.08      | 0.6499     | 0.7229     | 0.14      
file_brain_AXT2_207_2070286.h  | 8          | Variable Density | 45.51      | 45.51      | 0.9927     | 0.9927     | 0.12      
file_brain_AXT2_207_2070286.h  | 8          | Edge-Enhanced   | 49.32      | 49.33      | 0.9939     | 0.9939     | 0.12      
file_brain_AXT2_207_2070286.h  | 9          | Cartesian       | 41.56      | 42.37      | 0.9738     | 0.9783     | 0.12      
file_brain_AXT2_207_2070286.h  | 9          | Random 2D       | 27.21      | 29.72      | 0.6352     | 0.7112     | 0.13      
file_brain_AXT2_207_2070286.h  | 9          | Variable Density | 43.52      | 43.52      | 0.9913     | 0.9913     | 0.12      
file_brain_AXT2_207_2070286.h  | 9          | Edge-Enhanced   | 47.83      | 47.83      | 0.9927     | 0.9927     | 0.12      
file_brain_AXT2_207_2070286.h  | 10         | Cartesian       | 40.68      | 41.43      | 0.9719     | 0.9767     | 0.11      
file_brain_AXT2_207_2070286.h  | 10         | Random 2D       | 26.27      | 28.61      | 0.6336     | 0.6998     | 0.13      
file_brain_AXT2_207_2070286.h  | 10         | Variable Density | 42.80      | 42.80      | 0.9920     | 0.9920     | 0.12      
file_brain_AXT2_207_2070286.h  | 10         | Edge-Enhanced   | 47.78      | 47.78      | 0.9928     | 0.9928     | 0.12      

--- Mean/Std Metrics (R=4) ---
psnr_zf: Mean=39.7368, Std=8.4455
psnr_ista: Mean=40.5068, Std=7.6380
ssim_zf: Mean=0.9099, Std=0.1256
ssim_ista: Mean=0.9149, Std=0.1161

--- Experiments Complete ---


EXPERIMENT 9
CS_MRI_UCB_case1_CNN
pip install numpy torch torchvision scikit-image
pip install PyWavelets
pip install numpy torch torchvision scikit-image pywavelets matplotlib pydicom
import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
import pydicom
import re
import time

# Set random seed
np.random.seed(42)
torch.manual_seed(42)

# --- Paths ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')

# --- Lightweight CNN (Mini U-Net) ---
class MiniUNet(nn.Module):
    def __init__(self, img_size=512):
        super(MiniUNet, self).__init__()
        self.enc1 = nn.Conv2d(2, 32, 3, padding=1)  # Input: real+imag
        self.enc2 = nn.Conv2d(32, 64, 3, padding=1)
        self.bottleneck = nn.Conv2d(64, 128, 3, padding=1)
        self.dec2 = nn.Conv2d(192, 64, 3, padding=1)
        self.dec1 = nn.Conv2d(96, 32, 3, padding=1)
        self.out = nn.Conv2d(32, 1, 3, padding=1)  # Output: real image
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)

    def forward(self, x):
        e1 = self.relu(self.enc1(x))
        e2 = self.relu(self.enc2(self.pool(e1)))
        b = self.relu(self.bottleneck(self.pool(e2)))
        d2 = self.relu(self.dec2(torch.cat([self.upsample(b), e2], dim=1)))
        d1 = self.relu(self.dec1(torch.cat([self.upsample(d2), e1], dim=1)))
        out = self.out(d1)
        return out

# --- Load DICOM ---
def load_dicom(dicom_path):
    if not os.path.exists(dicom_path):
        raise FileNotFoundError(f"DICOM file not found: {dicom_path}")
    dicom_data = pydicom.dcmread(dicom_path)
    img = dicom_data.pixel_array.astype(np.float32)
    if img.shape != (512, 512):
        from skimage.transform import resize
        img = resize(img, (512, 512), anti_aliasing=True)
    img = (img - img.min()) / (img.max() - img.min() + 1e-8)  # Normalize [0, 1]
    return img

# --- Read params.txt ---
def read_params_dims(params_path):
    if not os.path.exists(params_path):
        return 320, 320, 8, 256
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            rows, cols, coils, slices = None, None, 8, None
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            if rows and cols and slices:
                return rows, cols, coils, slices
        return 320, 320, 8, 256
    except Exception as e:
        print(f"Error reading params.txt: {e}")
        return 320, 320, 8, 256

# --- Read k-space .cfl ---
def read_cfl_data(cfl_path, dims):
    if not os.path.exists(cfl_path):
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)
        if data.size != expected_size:
            raise ValueError(f"CFL size mismatch. Expected {expected_size}, got {data.size}")
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"Error reading .cfl: {e}")
        return None

# --- Zero-pad k-space ---
def zero_pad_kspace(kspace, target_shape=(512, 512)):
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows_top = (target_rows - rows) // 2
    pad_rows_bottom = target_rows - rows - pad_rows_top
    pad_cols_left = (target_cols - cols) // 2
    pad_cols_right = target_cols - cols - pad_cols_left
    kspace_padded = np.pad(kspace, ((pad_rows_top, pad_rows_bottom), (pad_cols_left, pad_cols_right)),
                           mode='constant', constant_values=0)
    return kspace_padded

# --- Variable Density Mask ---
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=0):
    np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# --- ISTA (from your code) ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iter {i+1}/{n_iters}, PSNR={current_psnr:.3f}")
    return np.clip(np.real(x_recon), 0, 1)

# --- Prepare CNN input ---
def prepare_cnn_input(undersampled_kspace, mask):
    zf_img = np.abs(ifft2(ifftshift(undersampled_kspace)))
    zf_img = (zf_img - zf_img.min()) / (zf_img.max() - zf_img.min() + 1e-8)
    zf_kspace = fftshift(fft2(zf_img))
    zf_real = np.real(zf_kspace)
    zf_imag = np.imag(zf_kspace)
    input_tensor = torch.tensor(np.stack([zf_real, zf_imag], axis=0), dtype=torch.float32)
    return input_tensor.unsqueeze(0), zf_img

# --- Train CNN ---
def train_cnn(model, image, mask, epochs=500, lr=0.0001):
    model = model.to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    k_space_undersampled = fftshift(fft2(image)) * mask
    input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
    input_tensor = input_tensor.to(device)
    target_img = torch.tensor(image[None, None], dtype=torch.float32).to(device)
    for epoch in range(epochs):
        optimizer.zero_grad()
        output = model(input_tensor)
        loss = criterion(output, target_img)
        loss.backward()
        optimizer.step()
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item():.4f}')
    return model

# --- Evaluate ---
def evaluate_reconstruction(img_recon, img_ref):
    img_recon = np.clip(img_recon, 0, 1)
    img_ref = np.clip(img_ref, 0, 1)
    psnr_val = psnr(img_ref, img_recon, data_range=1.0)
    ssim_val = ssim(img_ref, img_recon, data_range=1.0)
    return psnr_val, ssim_val

# --- Main ---
def main():
    # Load DICOM
    dicom_path = os.path.join(dicom_dir, 'Sec_128.mag')
    ground_truth = load_dicom(dicom_path)

    # Load k-space
    rows, cols, coils, slices = read_params_dims(params_path)
    dims = (rows, cols, coils, slices)
    kspace_data = read_cfl_data(kspace_cfl_path, dims)
    slice_idx = 128
    use_dicom_kspace = False
    if kspace_data is None or slice_idx >= dims[3]:
        print("Using DICOM-based k-space")
        k_space_full = fftshift(fft2(ground_truth))
        use_dicom_kspace = True
    else:
        kspace_slice = kspace_data[:, :, :, slice_idx]
        image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))
        image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))
        k_space_full = zero_pad_kspace(fftshift(fft2(image_rss)))
        k_space_recon = np.abs(ifft2(ifftshift(k_space_full)))
        k_space_recon = (k_space_recon - k_space_recon.min()) / (k_space_recon.max() - k_space_recon.min() + 1e-8)
        test_psnr = psnr(ground_truth, k_space_recon, data_range=1.0)
        if test_psnr < 20:
            print(f"K-space PSNR too low ({test_psnr:.2f}). Using DICOM k-space.")
            k_space_full = fftshift(fft2(ground_truth))
            use_dicom_kspace = True

    # Variable Density Mask (R=4)
    mask = create_variable_density_mask(k_space_full.shape, acceleration_factor=4)

    # Zero-Filled
    start_time = time.time()
    k_space_undersampled = k_space_full * mask
    img_zf = np.abs(ifft2(ifftshift(k_space_undersampled)))
    zf_time = time.time() - start_time
    zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, ground_truth)
    print(f'Zero-Filled: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    plt.imsave('img_zf.png', img_zf, cmap='gray')

    # ISTA
    start_time = time.time()
    img_ista = ista_wavelet_cs(k_space_undersampled, mask, img_zf.copy(),
                               n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=ground_truth)
    ista_time = time.time() - start_time
    ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, ground_truth)
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    plt.imsave('img_ista.png', img_ista, cmap='gray')

    # CNN
    model = MiniUNet(img_size=512)
    start_time = time.time()
    trained_model = train_cnn(model, ground_truth, mask, epochs=500, lr=0.0001)
    input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
    with torch.no_grad():
        output = trained_model(input_tensor.to(device))
        img_cnn = output.squeeze().cpu().numpy()
    cnn_time = time.time() - start_time
    cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, ground_truth)
    print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')
    plt.imsave('img_cnn.png', img_cnn, cmap='gray')

    # Compare
    print('\nComparison with Your ISTA Results (Variable Density, Sec_128.mag):')
    print(f'Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s')
    print(f'Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)')
    print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(ground_truth, cmap='gray')
    plt.title('Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(img_zf, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}, SSIM={zf_ssim:.4f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}, SSIM={ista_ssim:.4f}')
    plt.axis('off')
    plt.subplot(1, 4, 4)
    plt.imshow(img_cnn, cmap='gray')
    plt.title(f'CNN\nPSNR={cnn_psnr:.2f}, SSIM={cnn_ssim:.4f}')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    main()
K-space PSNR too low (15.67). Using DICOM k-space.
Variable Density Mask: Target R=4, Actual R=4.00
Zero-Filled: PSNR=40.915, SSIM=0.9613, Time=0.01s
ISTA Iter 1/10, PSNR=40.927
ISTA Iter 2/10, PSNR=40.928
ISTA Iter 3/10, PSNR=40.928
ISTA Iter 4/10, PSNR=40.928
ISTA Iter 5/10, PSNR=40.928
ISTA Iter 6/10, PSNR=40.928
ISTA Iter 7/10, PSNR=40.928
ISTA Iter 8/10, PSNR=40.928
ISTA Iter 9/10, PSNR=40.928
ISTA Iter 10/10, PSNR=40.928
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.42s
Epoch 0, Loss: 11.2495
Epoch 100, Loss: 0.0415
Epoch 200, Loss: 0.0258
Epoch 300, Loss: 0.0194
Epoch 400, Loss: 0.0158
CNN: PSNR=18.353, SSIM=0.4369, Time=174.78s

Comparison with Your ISTA Results (Variable Density, Sec_128.mag):
Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s
Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)
CNN: PSNR=18.353, SSIM=0.4369, Time=174.78s
import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
import pydicom
import re
import time

# Set random seed
np.random.seed(42)
torch.manual_seed(42)

# --- Paths ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')

# --- Lightweight CNN (Mini U-Net) ---
class MiniUNet(nn.Module):
    def __init__(self, img_size=512):
        super(MiniUNet, self).__init__()
        self.enc1 = nn.Conv2d(2, 32, 3, padding=1)  # Increased channels
        self.enc2 = nn.Conv2d(32, 64, 3, padding=1)
        self.enc3 = nn.Conv2d(64, 128, 3, padding=1)
        self.bottleneck = nn.Conv2d(128, 256, 3, padding=1)
        self.dec3 = nn.Conv2d(384, 128, 3, padding=1)
        self.dec2 = nn.Conv2d(192, 64, 3, padding=1)
        self.dec1 = nn.Conv2d(96, 32, 3, padding=1)
        self.out = nn.Conv2d(32, 1, 3, padding=1)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)

    def forward(self, x):
        e1 = self.relu(self.enc1(x))
        e2 = self.relu(self.enc2(self.pool(e1)))
        e3 = self.relu(self.enc3(self.pool(e2)))
        b = self.relu(self.bottleneck(self.pool(e3)))
        d3 = self.relu(self.dec3(torch.cat([self.upsample(b), e3], dim=1)))
        d2 = self.relu(self.dec2(torch.cat([self.upsample(d3), e2], dim=1)))
        d1 = self.relu(self.dec1(torch.cat([self.upsample(d2), e1], dim=1)))
        out = self.out(d1)
        return out

# --- Load DICOM ---
def load_dicom(dicom_path):
    if not os.path.exists(dicom_path):
        raise FileNotFoundError(f"DICOM file not found: {dicom_path}")
    dicom_data = pydicom.dcmread(dicom_path)
    img = dicom_data.pixel_array.astype(np.float32)
    if img.shape != (512, 512):
        from skimage.transform import resize
        img = resize(img, (512, 512), anti_aliasing=True)
    img = (img - img.min()) / (img.max() - img.min() + 1e-8)
    return img

# --- Read params.txt ---
def read_params_dims(params_path):
    if not os.path.exists(params_path):
        print("params.txt not found. Using defaults: 320x320, 8 coils, 256 slices")
        return 320, 320, 8, 256
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            rows, cols, coils, slices = None, None, 8, None
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            if rows and cols and slices:
                return rows, cols, coils, slices
        print("No valid dimensions in params.txt. Using defaults.")
        return 320, 320, 8, 256
    except Exception as e:
        print(f"Error reading params.txt: {e}")
        return 320, 320, 8, 256

# --- Read k-space .cfl ---
def read_cfl_data(cfl_path, dims):
    if not os.path.exists(cfl_path):
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)
        if data.size != expected_size:
            print(f"CFL size mismatch. Expected {expected_size}, got {data.size}. Adjusting dims.")
            return None
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"Error reading .cfl: {e}")
        return None

# --- Zero-pad k-space ---
def zero_pad_kspace(kspace, target_shape=(512, 512)):
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows_top = (target_rows - rows) // 2
    pad_rows_bottom = target_rows - rows - pad_rows_top
    pad_cols_left = (target_cols - cols) // 2
    pad_cols_right = target_cols - cols - pad_cols_left
    kspace_padded = np.pad(kspace, ((pad_rows_top, pad_rows_bottom), (pad_cols_left, pad_cols_right)),
                           mode='constant', constant_values=0)
    return kspace_padded

# --- Variable Density Mask ---
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=0):
    np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# --- ISTA ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iter {i+1}/{n_iters}, PSNR={current_psnr:.3f}")
    return np.clip(np.real(x_recon), 0, 1)

# --- Prepare CNN input ---
def prepare_cnn_input(undersampled_kspace, mask):
    zf_img = ifft2(ifftshift(undersampled_kspace))
    zf_real = np.real(zf_img)
    zf_imag = np.imag(zf_img)
    zf_real = (zf_real - zf_real.min()) / (zf_real.max() - zf_real.min() + 1e-8)
    zf_imag = (zf_imag - zf_imag.min()) / (zf_imag.max() - zf_imag.min() + 1e-8)
    input_tensor = torch.tensor(np.stack([zf_real, zf_imag], axis=0), dtype=torch.float32)
    return input_tensor.unsqueeze(0), np.abs(zf_img)

# --- Train CNN ---
def train_cnn(model, image, mask, epochs=500, lr=0.00005):
    model = model.to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    k_space_undersampled = fftshift(fft2(image)) * mask
    input_tensor, zf_img = prepare_cnn_input(k_space_undersampled, mask)
    input_tensor = input_tensor.to(device)
    target_img = torch.tensor(image[None, None], dtype=torch.float32).to(device)
    for epoch in range(epochs):
        optimizer.zero_grad()
        output = model(input_tensor)
        loss = criterion(output, target_img)
        loss.backward()
        optimizer.step()
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item():.4f}')
            torch.cuda.empty_cache()
    return model

# --- Evaluate ---
def evaluate_reconstruction(img_recon, img_ref):
    img_recon = np.clip(img_recon, 0, 1)
    img_ref = np.clip(img_ref, 0, 1)
    psnr_val = psnr(img_ref, img_recon, data_range=1.0)
    ssim_val = ssim(img_ref, img_recon, data_range=1.0)
    return psnr_val, ssim_val

# --- Main ---
def main():
    # Load DICOM
    dicom_path = os.path.join(dicom_dir, 'Sec_128.mag')
    ground_truth = load_dicom(dicom_path)
    plt.imsave('original.png', ground_truth, cmap='gray')

    # Load k-space
    rows, cols, coils, slices = read_params_dims(params_path)
    dims = (rows, cols, coils, slices)
    kspace_data = read_cfl_data(kspace_cfl_path, dims)
    slice_idx = 128
    if kspace_data is None or slice_idx >= dims[3]:
        print("Using DICOM-based k-space")
        k_space_full = fftshift(fft2(ground_truth))
    else:
        best_psnr = -np.inf
        best_kspace_2d = None
        for offset in range(-10, 11):
            test_idx = slice_idx + offset
            if 0 <= test_idx < dims[3]:
                kspace_slice = kspace_data[:, :, :, test_idx]
                image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))
                image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))
                kspace_test = zero_pad_kspace(fftshift(fft2(image_rss)))
                kspace_recon = np.abs(ifft2(ifftshift(kspace_test)))
                kspace_recon = (kspace_recon - kspace_recon.min()) / (kspace_recon.max() - kspace_recon.min() + 1e-8)
                test_psnr = psnr(ground_truth, kspace_recon, data_range=1.0)
                print(f"Slice {test_idx} (offset {offset}): PSNR={test_psnr:.2f}")
                if test_psnr > best_psnr:
                    best_psnr = test_psnr
                    best_kspace_2d = kspace_test
        if best_psnr > 30:
            k_space_full = best_kspace_2d
            print(f"Selected k-space slice {slice_idx} (PSNR={best_psnr:.2f})")
        else:
            print(f"Best k-space PSNR too low ({best_psnr:.2f}). Using DICOM k-space.")
            k_space_full = fftshift(fft2(ground_truth))

    # Variable Density Mask
    mask = create_variable_density_mask(k_space_full.shape, acceleration_factor=4)
    plt.imsave('mask.png', mask, cmap='gray')

    # Zero-Filled
    start_time = time.time()
    k_space_undersampled = k_space_full * mask
    img_zf = np.abs(ifft2(ifftshift(k_space_undersampled)))
    zf_time = time.time() - start_time
    zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, ground_truth)
    print(f'Zero-Filled: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    plt.imsave('img_zf.png', img_zf, cmap='gray')

    # ISTA
    start_time = time.time()
    img_ista = ista_wavelet_cs(k_space_undersampled, mask, img_zf.copy(),
                               n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=ground_truth)
    ista_time = time.time() - start_time
    ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, ground_truth)
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    plt.imsave('img_ista.png', img_ista, cmap='gray')

    # CNN
    model = MiniUNet(img_size=512)
    start_time = time.time()
    try:
        trained_model = train_cnn(model, ground_truth, mask, epochs=500, lr=0.00005)
        input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()
        cnn_time = time.time() - start_time
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, ground_truth)
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')
        plt.imsave('img_cnn.png', img_cnn, cmap='gray')
    except RuntimeError as e:
        print(f"CNN training failed: {e}. Try reducing epochs or using CPU.")
        cnn_psnr, cnn_ssim, cnn_time = -1, -1, -1

    # Compare
    print('\nComparison:')
    print(f'Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s')
    print(f'Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)')
    print(f'ZF: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    if cnn_psnr != -1:
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(ground_truth, cmap='gray')
    plt.title('Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(img_zf, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}')
    plt.axis('off')
    if cnn_psnr != -1:
        plt.subplot(1, 4, 4)
        plt.imshow(img_cnn, cmap='gray')
        plt.title(f'CNN\nPSNR={cnn_psnr:.2f}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    main()
Slice 118 (offset -10): PSNR=14.36
Slice 119 (offset -9): PSNR=13.59
Slice 120 (offset -8): PSNR=12.23
Slice 121 (offset -7): PSNR=12.94
Slice 122 (offset -6): PSNR=12.27
Slice 123 (offset -5): PSNR=12.10
Slice 124 (offset -4): PSNR=12.41
Slice 125 (offset -3): PSNR=11.26
Slice 126 (offset -2): PSNR=11.82
Slice 127 (offset -1): PSNR=12.14
Slice 128 (offset 0): PSNR=15.67
Slice 129 (offset 1): PSNR=16.38
Slice 130 (offset 2): PSNR=15.96
Slice 131 (offset 3): PSNR=16.02
Slice 132 (offset 4): PSNR=16.45
Slice 133 (offset 5): PSNR=16.27
Slice 134 (offset 6): PSNR=16.08
Slice 135 (offset 7): PSNR=16.00
Slice 136 (offset 8): PSNR=16.59
Slice 137 (offset 9): PSNR=16.33
Slice 138 (offset 10): PSNR=16.37
Best k-space PSNR too low (16.59). Using DICOM k-space.
Variable Density Mask: Target R=4, Actual R=4.00
Zero-Filled: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA Iter 1/10, PSNR=40.927
ISTA Iter 2/10, PSNR=40.928
ISTA Iter 3/10, PSNR=40.928
ISTA Iter 4/10, PSNR=40.928
ISTA Iter 5/10, PSNR=40.928
ISTA Iter 6/10, PSNR=40.928
ISTA Iter 7/10, PSNR=40.928
ISTA Iter 8/10, PSNR=40.928
ISTA Iter 9/10, PSNR=40.928
ISTA Iter 10/10, PSNR=40.928
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.44s
Epoch 0, Loss: 0.0237
Epoch 100, Loss: 0.0009
Epoch 200, Loss: 0.0005
Epoch 300, Loss: 0.0004
Epoch 400, Loss: 0.0003
CNN: PSNR=36.263, SSIM=0.9055, Time=174.52s

Comparison:
Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s
Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)
ZF: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.44s
CNN: PSNR=36.263, SSIM=0.9055, Time=174.52s
import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
import pydicom
import re
import time

# Set random seed
np.random.seed(42)
torch.manual_seed(42)

# --- Paths ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')

# --- CNN with Residual Connections ---
class ResMiniUNet(nn.Module):
    def __init__(self, img_size=512):
        super(ResMiniUNet, self).__init__()
        self.enc1 = nn.Conv2d(2, 32, 3, padding=1)
        self.enc2 = nn.Conv2d(32, 64, 3, padding=1)
        self.enc3 = nn.Conv2d(64, 128, 3, padding=1)
        self.bottleneck = nn.Conv2d(128, 256, 3, padding=1)
        self.dec3 = nn.Conv2d(384, 128, 3, padding=1)
        self.dec2 = nn.Conv2d(192, 64, 3, padding=1)
        self.dec1 = nn.Conv2d(96, 32, 3, padding=1)
        self.out = nn.Conv2d(32, 1, 3, padding=1)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.res_conv = nn.Conv2d(2, 1, 1)  # Residual input projection

    def forward(self, x):
        residual = self.res_conv(x)  # Project input to output channels
        e1 = self.relu(self.enc1(x))
        e2 = self.relu(self.enc2(self.pool(e1)))
        e3 = self.relu(self.enc3(self.pool(e2)))
        b = self.relu(self.bottleneck(self.pool(e3)))
        d3 = self.relu(self.dec3(torch.cat([self.upsample(b), e3], dim=1)))
        d2 = self.relu(self.dec2(torch.cat([self.upsample(d3), e2], dim=1)))
        d1 = self.relu(self.dec1(torch.cat([self.upsample(d2), e1], dim=1)))
        out = self.out(d1) + residual  # Residual connection
        return out

# --- Load DICOM ---
def load_dicom(dicom_path):
    if not os.path.exists(dicom_path):
        raise FileNotFoundError(f"DICOM file not found: {dicom_path}")
    dicom_data = pydicom.dcmread(dicom_path)
    img = dicom_data.pixel_array.astype(np.float32)
    if img.shape != (512, 512):
        from skimage.transform import resize
        img = resize(img, (512, 512), anti_aliasing=True)
    img = (img - img.min()) / (img.max() - img.min() + 1e-8)
    return img

# --- Read params.txt ---
def read_params_dims(params_path):
    if not os.path.exists(params_path):
        print("params.txt not found. Using defaults: 320x320, 8 coils, 256 slices")
        return 320, 320, 8, 256
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            rows, cols, coils, slices = None, None, 8, None
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            if rows and cols and slices:
                return rows, cols, coils, slices
        print("No valid dimensions in params.txt. Using defaults.")
        return 320, 320, 8, 256
    except Exception as e:
        print(f"Error reading params.txt: {e}")
        return 320, 320, 8, 256

# --- Read k-space .cfl ---
def read_cfl_data(cfl_path, dims):
    if not os.path.exists(cfl_path):
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)
        if data.size != expected_size:
            print(f"CFL size mismatch. Expected {expected_size}, got {data.size}.")
            return None
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"Error reading .cfl: {e}")
        return None

# --- Zero-pad k-space ---
def zero_pad_kspace(kspace, target_shape=(512, 512)):
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows_top = (target_rows - rows) // 2
    pad_rows_bottom = target_rows - rows - pad_rows_top
    pad_cols_left = (target_cols - cols) // 2
    pad_cols_right = target_cols - cols - pad_cols_left
    kspace_padded = np.pad(kspace, ((pad_rows_top, pad_rows_bottom), (pad_cols_left, pad_cols_right)),
                           mode='constant', constant_values=0)
    return kspace_padded

# --- Variable Density Mask ---
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=0):
    np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# --- ISTA ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iter {i+1}/{n_iters}, PSNR={current_psnr:.3f}")
    return np.clip(np.real(x_recon), 0, 1)

# --- Prepare CNN input ---
def prepare_cnn_input(undersampled_kspace, mask):
    zf_img = ifft2(ifftshift(undersampled_kspace))
    zf_real = np.real(zf_img)
    zf_imag = np.imag(zf_img)
    zf_real = (zf_real - zf_real.min()) / (zf_real.max() - zf_real.min() + 1e-8)
    zf_imag = (zf_imag - zf_imag.min()) / (zf_imag.max() - zf_imag.min() + 1e-8)
    input_tensor = torch.tensor(np.stack([zf_real, zf_imag], axis=0), dtype=torch.float32)
    return input_tensor.unsqueeze(0), np.abs(zf_img)

# --- Train CNN ---
def train_cnn(model, image, mask, epochs=500, lr=0.00005):
    model = model.to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    k_space_undersampled = fftshift(fft2(image)) * mask
    input_tensor, zf_img = prepare_cnn_input(k_space_undersampled, mask)
    input_tensor = input_tensor.to(device)
    target_img = torch.tensor(image[None, None], dtype=torch.float32).to(device)
    for epoch in range(epochs):
        optimizer.zero_grad()
        output = model(input_tensor)
        mse_loss = criterion(output, target_img)
        l1_loss = 0.001 * torch.abs(output).mean()
        loss = mse_loss + l1_loss
        loss.backward()
        optimizer.step()
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item():.4f}, MSE: {mse_loss.item():.4f}, L1: {l1_loss.item():.4f}')
            torch.cuda.empty_cache()
    return model

# --- Evaluate ---
def evaluate_reconstruction(img_recon, img_ref):
    img_recon = np.clip(img_recon, 0, 1)
    img_ref = np.clip(img_ref, 0, 1)
    psnr_val = psnr(img_ref, img_recon, data_range=1.0)
    ssim_val = ssim(img_ref, img_recon, data_range=1.0)
    return psnr_val, ssim_val

# --- Main (Sec_128.mag) ---
def main_sec_128():
    # Load DICOM
    dicom_path = os.path.join(dicom_dir, 'Sec_128.mag')
    ground_truth = load_dicom(dicom_path)
    plt.imsave('original.png', ground_truth, cmap='gray')

    # Load k-space
    rows, cols, coils, slices = read_params_dims(params_path)
    dims = (rows, cols, coils, slices)
    kspace_data = read_cfl_data(kspace_cfl_path, dims)
    slice_idx = 128
    if kspace_data is None or slice_idx >= dims[3]:
        print("Using DICOM-based k-space")
        k_space_full = fftshift(fft2(ground_truth))
    else:
        best_psnr = -np.inf
        best_kspace_2d = None
        for offset in range(-20, 21):
            test_idx = slice_idx + offset
            if 0 <= test_idx < dims[3]:
                kspace_slice = kspace_data[:, :, :, test_idx]
                image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))
                image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))
                kspace_test = zero_pad_kspace(fftshift(fft2(image_rss)))
                kspace_recon = np.abs(ifft2(ifftshift(kspace_test)))
                kspace_recon = (kspace_recon - kspace_recon.min()) / (kspace_recon.max() - kspace_recon.min() + 1e-8)
                test_psnr = psnr(ground_truth, kspace_recon, data_range=1.0)
                print(f"Slice {test_idx} (offset {offset}): PSNR={test_psnr:.2f}")
                if test_psnr > best_psnr:
                    best_psnr = test_psnr
                    best_kspace_2d = kspace_test
        if best_psnr > 30:
            k_space_full = best_kspace_2d
            print(f"Selected k-space slice {slice_idx} (PSNR={best_psnr:.2f})")
        else:
            print(f"Best k-space PSNR too low ({best_psnr:.2f}). Using DICOM k-space.")
            k_space_full = fftshift(fft2(ground_truth))

    # Variable Density Mask
    mask = create_variable_density_mask(k_space_full.shape, acceleration_factor=4)
    plt.imsave('mask.png', mask, cmap='gray')

    # Zero-Filled
    start_time = time.time()
    k_space_undersampled = k_space_full * mask
    img_zf = np.abs(ifft2(ifftshift(k_space_undersampled)))
    zf_time = time.time() - start_time
    zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, ground_truth)
    print(f'Zero-Filled: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    plt.imsave('img_zf.png', img_zf, cmap='gray')

    # ISTA
    start_time = time.time()
    img_ista = ista_wavelet_cs(k_space_undersampled, mask, img_zf.copy(),
                               n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=ground_truth)
    ista_time = time.time() - start_time
    ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, ground_truth)
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    plt.imsave('img_ista.png', img_ista, cmap='gray')

    # CNN
    model = ResMiniUNet(img_size=512)
    start_time = time.time()
    try:
        trained_model = train_cnn(model, ground_truth, mask, epochs=500, lr=0.00005)
        input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()
        cnn_time = time.time() - start_time
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, ground_truth)
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')
        plt.imsave('img_cnn.png', img_cnn, cmap='gray')
    except RuntimeError as e:
        print(f"CNN training failed: {e}. Try reducing epochs or using CPU.")
        cnn_psnr, cnn_ssim, cnn_time = -1, -1, -1

    # Compare
    print('\nComparison:')
    print(f'Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s')
    print(f'Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)')
    print(f'ZF: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    if cnn_psnr != -1:
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(ground_truth, cmap='gray')
    plt.title('Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(img_zf, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}')
    plt.axis('off')
    if cnn_psnr != -1:
        plt.subplot(1, 4, 4)
        plt.imshow(img_cnn, cmap='gray')
        plt.title(f'CNN\nPSNR={cnn_psnr:.2f}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# --- OASIS Pipeline ---
def main_oasis(oasis_path, slice_idx=81, img_size=256):
    import nibabel as nib
    # Load OASIS
    try:
        nii = nib.load(oasis_path)
        img = nii.get_fdata()[:, :, slice_idx].astype(np.float32)
        if img.shape != (img_size, img_size):
            from skimage.transform import resize
            img = resize(img, (img_size, img_size), anti_aliasing=True)
        img = (img - img.min()) / (img.max() - img.min() + 1e-8)
    except Exception as e:
        print(f"Error loading OASIS: {e}")
        return

    # K-space (simulated)
    k_space_full = fftshift(fft2(img))
    
    # Variable Density Mask
    mask = create_variable_density_mask((img_size, img_size), acceleration_factor=4)

    # Zero-Filled
    start_time = time.time()
    k_space_undersampled = k_space_full * mask
    img_zf = np.abs(ifft2(ifftshift(k_space_undersampled)))
    zf_time = time.time() - start_time
    zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, img)
    print(f'OASIS ZF: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    plt.imsave('oasis_img_zf.png', img_zf, cmap='gray')

    # ISTA
    start_time = time.time()
    img_ista = ista_wavelet_cs(k_space_undersampled, mask, img_zf.copy(),
                               n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=img)
    ista_time = time.time() - start_time
    ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, img)
    print(f'OASIS ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    plt.imsave('oasis_img_ista.png', img_ista, cmap='gray')

    # CNN
    model = ResMiniUNet(img_size=img_size)
    start_time = time.time()
    try:
        trained_model = train_cnn(model, img, mask, epochs=500, lr=0.00005)
        input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()
        cnn_time = time.time() - start_time
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, img)
        print(f'OASIS CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')
        plt.imsave('oasis_img_cnn.png', img_cnn, cmap='gray')
    except RuntimeError as e:
        print(f"OASIS CNN training failed: {e}")
        cnn_psnr, cnn_ssim, cnn_time = -1, -1, -1

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(img, cmap='gray')
    plt.title('OASIS Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(img_zf, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}')
    plt.axis('off')
    if cnn_psnr != -1:
        plt.subplot(1, 4, 4)
        plt.imshow(img_cnn, cmap='gray')
        plt.title(f'CNN\nPSNR={cnn_psnr:.2f}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    main_sec_128()
    # Example OASIS run (uncomment with correct path)
    # main_oasis('/path/to/OAS1_0208.nii', slice_idx=81, img_size=256)
Slice 108 (offset -20): PSNR=12.99
Slice 109 (offset -19): PSNR=13.22
Slice 110 (offset -18): PSNR=13.76
Slice 111 (offset -17): PSNR=11.88
Slice 112 (offset -16): PSNR=11.03
Slice 113 (offset -15): PSNR=13.46
Slice 114 (offset -14): PSNR=14.77
Slice 115 (offset -13): PSNR=14.29
Slice 116 (offset -12): PSNR=13.28
Slice 117 (offset -11): PSNR=14.22
Slice 118 (offset -10): PSNR=14.36
Slice 119 (offset -9): PSNR=13.59
Slice 120 (offset -8): PSNR=12.23
Slice 121 (offset -7): PSNR=12.94
Slice 122 (offset -6): PSNR=12.27
Slice 123 (offset -5): PSNR=12.10
Slice 124 (offset -4): PSNR=12.41
Slice 125 (offset -3): PSNR=11.26
Slice 126 (offset -2): PSNR=11.82
Slice 127 (offset -1): PSNR=12.14
Slice 128 (offset 0): PSNR=15.67
Slice 129 (offset 1): PSNR=16.38
Slice 130 (offset 2): PSNR=15.96
Slice 131 (offset 3): PSNR=16.02
Slice 132 (offset 4): PSNR=16.45
Slice 133 (offset 5): PSNR=16.27
Slice 134 (offset 6): PSNR=16.08
Slice 135 (offset 7): PSNR=16.00
Slice 136 (offset 8): PSNR=16.59
Slice 137 (offset 9): PSNR=16.33
Slice 138 (offset 10): PSNR=16.37
Slice 139 (offset 11): PSNR=16.37
Slice 140 (offset 12): PSNR=15.65
Slice 141 (offset 13): PSNR=15.22
Slice 142 (offset 14): PSNR=14.83
Slice 143 (offset 15): PSNR=11.13
Slice 144 (offset 16): PSNR=11.48
Slice 145 (offset 17): PSNR=14.25
Slice 146 (offset 18): PSNR=14.92
Slice 147 (offset 19): PSNR=15.54
Slice 148 (offset 20): PSNR=16.17
Best k-space PSNR too low (16.59). Using DICOM k-space.
Variable Density Mask: Target R=4, Actual R=4.00
Zero-Filled: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA Iter 1/10, PSNR=40.927
ISTA Iter 2/10, PSNR=40.928
ISTA Iter 3/10, PSNR=40.928
ISTA Iter 4/10, PSNR=40.928
ISTA Iter 5/10, PSNR=40.928
ISTA Iter 6/10, PSNR=40.928
ISTA Iter 7/10, PSNR=40.928
ISTA Iter 8/10, PSNR=40.928
ISTA Iter 9/10, PSNR=40.928
ISTA Iter 10/10, PSNR=40.928
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.46s
Epoch 0, Loss: 0.1725, MSE: 0.1723, L1: 0.0002
Epoch 100, Loss: 0.0055, MSE: 0.0053, L1: 0.0002
Epoch 200, Loss: 0.0025, MSE: 0.0023, L1: 0.0002
Epoch 300, Loss: 0.0019, MSE: 0.0017, L1: 0.0002
Epoch 400, Loss: 0.0014, MSE: 0.0013, L1: 0.0002
CNN: PSNR=30.068, SSIM=0.6876, Time=171.29s

Comparison:
Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s
Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)
ZF: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.46s
CNN: PSNR=30.068, SSIM=0.6876, Time=171.29s
import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
import pydicom
import re
import time

# Set random seed
np.random.seed(42)
torch.manual_seed(42)

# --- Paths ---
base_kaggle_input_path = '/kaggle/input/'
dataset_name = 'uc-berkeley-mri-dataset-case1'
dicom_dir = os.path.join(base_kaggle_input_path, dataset_name, 'P1_dcm/P1_dcm/')
kspace_cfl_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/kspace.cfl')
params_path = os.path.join(base_kaggle_input_path, dataset_name, 'P1/p1/e1/s1/params.txt')

# --- Lightweight CNN (Mini U-Net) ---
class MiniUNet(nn.Module):
    def __init__(self, img_size=512):
        super(MiniUNet, self).__init__()
        self.enc1 = nn.Conv2d(2, 32, 3, padding=1)
        self.enc2 = nn.Conv2d(32, 64, 3, padding=1)
        self.enc3 = nn.Conv2d(64, 128, 3, padding=1)
        self.bottleneck = nn.Conv2d(128, 256, 3, padding=1)
        self.dec3 = nn.Conv2d(384, 128, 3, padding=1)
        self.dec2 = nn.Conv2d(192, 64, 3, padding=1)
        self.dec1 = nn.Conv2d(96, 32, 3, padding=1)
        self.out = nn.Conv2d(32, 1, 3, padding=1)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.dropout = nn.Dropout(0.3)  # Added dropout

    def forward(self, x):
        e1 = self.relu(self.enc1(x))
        e2 = self.relu(self.enc2(self.pool(e1)))
        e3 = self.relu(self.enc3(self.pool(e2)))
        b = self.relu(self.bottleneck(self.pool(e3)))
        d3 = self.relu(self.dec3(torch.cat([self.upsample(b), e3], dim=1)))
        d2 = self.relu(self.dec2(torch.cat([self.upsample(d3), e2], dim=1)))
        d1 = self.relu(self.dec1(torch.cat([self.upsample(d2), e1], dim=1)))
        out = self.out(self.dropout(d1))
        return out

# --- Load DICOM ---
def load_dicom(dicom_path):
    if not os.path.exists(dicom_path):
        raise FileNotFoundError(f"DICOM file not found: {dicom_path}")
    dicom_data = pydicom.dcmread(dicom_path)
    img = dicom_data.pixel_array.astype(np.float32)
    if img.shape != (512, 512):
        from skimage.transform import resize
        img = resize(img, (512, 512), anti_aliasing=True)
    img = (img - img.min()) / (img.max() - img.min() + 1e-8)
    return img

# --- Read params.txt ---
def read_params_dims(params_path):
    if not os.path.exists(params_path):
        print("params.txt not found. Using defaults: 320x320, 8 coils, 256 slices")
        return 320, 320, 8, 256
    try:
        with open(params_path, 'r') as f:
            lines = f.readlines()
            rows, cols, coils, slices = 320, 320, 8, 256  # Defaults from params.txt
            for line in lines:
                line = line.strip().lower()
                if 'rhnframes yres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        rows = nums[0]
                if 'rhfrsize xres' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        cols = nums[0]
                if 'rhnslices' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        slices = nums[0]
                if 'coils' in line or 'channels' in line:
                    nums = [int(x) for x in re.findall(r'\d+', line)]
                    if nums:
                        coils = nums[0]
            return rows, cols, coils, slices
    except Exception as e:
        print(f"Error reading params.txt: {e}")
        return 320, 320, 8, 256

# --- Read k-space .cfl ---
def read_cfl_data(cfl_path, dims):
    if not os.path.exists(cfl_path):
        return None
    try:
        data = np.fromfile(cfl_path, dtype=np.float32)
        expected_size = 2 * np.prod(dims)
        if data.size != expected_size:
            print(f"CFL size mismatch. Expected {expected_size}, got {data.size}. Expected size (MB): {expected_size*4/1024**2:.2f}, Actual: {data.size*4/1024**2:.2f}")
            return None
        complex_data = data[::2] + 1j * data[1::2]
        kspace_data = complex_data.reshape(dims, order='F')
        return kspace_data
    except Exception as e:
        print(f"Error reading .cfl: {e}")
        return None

# --- Zero-pad k-space ---
def zero_pad_kspace(kspace, target_shape=(512, 512)):
    rows, cols = kspace.shape[:2]
    target_rows, target_cols = target_shape
    pad_rows_top = (target_rows - rows) // 2
    pad_rows_bottom = target_rows - rows - pad_rows_top
    pad_cols_left = (target_cols - cols) // 2
    pad_cols_right = target_cols - cols - pad_cols_left
    kspace_padded = np.pad(kspace, ((pad_rows_top, pad_rows_bottom), (pad_cols_left, pad_cols_right)),
                           mode='constant', constant_values=0)
    return kspace_padded

# --- Variable Density Mask ---
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=0):
    np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask

# --- ISTA ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val,
                    ground_truth_for_psnr, wavelet='db4', level=3):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet=wavelet, level=level)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet=wavelet, level=level)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet=wavelet)
        x_recon = x_reconstructed_real.astype(np.complex128)
        if (i + 1) % (n_iters // 10 or 1) == 0 or i == n_iters - 1:
            current_psnr = psnr(ground_truth_for_psnr, np.clip(np.real(x_recon), 0, 1), data_range=1.0)
            print(f"ISTA Iter {i+1}/{n_iters}, PSNR={current_psnr:.3f}")
    return np.clip(np.real(x_recon), 0, 1)

# --- Prepare CNN input ---
def prepare_cnn_input(undersampled_kspace, mask):
    zf_img = ifft2(ifftshift(undersampled_kspace))
    zf_real = np.real(zf_img)
    zf_imag = np.imag(zf_img)
    zf_real = (zf_real - zf_real.min()) / (zf_real.max() - zf_real.min() + 1e-8)
    zf_imag = (zf_imag - zf_imag.min()) / (zf_imag.max() - zf_imag.min() + 1e-8)
    input_tensor = torch.tensor(np.stack([zf_real, zf_imag], axis=0), dtype=torch.float32)
    return input_tensor.unsqueeze(0), np.abs(zf_img)

# --- Train CNN ---
def train_cnn(model, image, mask, epochs=500, lr=0.00005):
    model = model.to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    k_space_undersampled = fftshift(fft2(image)) * mask
    input_tensor, zf_img = prepare_cnn_input(k_space_undersampled, mask)
    input_tensor = input_tensor.to(device)
    target_img = torch.tensor(image[None, None], dtype=torch.float32).to(device)
    for epoch in range(epochs):
        optimizer.zero_grad()
        output = model(input_tensor)
        mse_loss = criterion(output, target_img)
        l1_loss = 0.0001 * torch.abs(output).mean()  # Reduced L1 weight
        loss = mse_loss + l1_loss
        loss.backward()
        optimizer.step()
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss: {loss.item():.4f}, MSE: {mse_loss.item():.4f}, L1: {l1_loss.item():.4f}')
            torch.cuda.empty_cache()
    return model

# --- Evaluate ---
def evaluate_reconstruction(img_recon, img_ref):
    img_recon = np.clip(img_recon, 0, 1)
    img_ref = np.clip(img_ref, 0, 1)
    psnr_val = psnr(img_ref, img_recon, data_range=1.0)
    ssim_val = ssim(img_ref, img_recon, data_range=1.0)
    return psnr_val, ssim_val

# --- Main (Sec_128.mag) ---
def main_sec_128():
    # Load DICOM
    dicom_path = os.path.join(dicom_dir, 'Sec_128.mag')
    ground_truth = load_dicom(dicom_path)
    plt.imsave('original.png', ground_truth, cmap='gray')

    # Load k-space
    rows, cols, coils, slices = read_params_dims(params_path)
    dims = (rows, cols, coils, slices)
    kspace_data = read_cfl_data(kspace_cfl_path, dims)
    slice_idx = 128
    if kspace_data is None or slice_idx >= dims[3]:
        print("Using DICOM-based k-space")
        k_space_full = fftshift(fft2(ground_truth))
    else:
        # Map slice based on physical position (0.6mm thickness, 256 slices)
        slice_thickness = 0.6  # mm
        total_thickness = slice_thickness * slices
        target_position = (slice_idx / 256) * total_thickness
        best_psnr = -np.inf
        best_kspace_2d = None
        best_slice = slice_idx
        for offset in range(-20, 21):
            test_idx = slice_idx + offset
            if 0 <= test_idx < dims[3]:
                test_position = (test_idx / 256) * total_thickness
                position_diff = abs(test_position - target_position)
                kspace_slice = kspace_data[:, :, :, test_idx]
                image_slice = ifft2(ifftshift(kspace_slice, axes=(0, 1)), axes=(0, 1))
                image_rss = np.sqrt(np.sum(np.abs(image_slice)**2, axis=2))
                kspace_test = zero_pad_kspace(fftshift(fft2(image_rss)))
                kspace_recon = np.abs(ifft2(ifftshift(kspace_test)))
                kspace_recon = (kspace_recon - kspace_recon.min()) / (kspace_recon.max() - kspace_recon.min() + 1e-8)
                test_psnr = psnr(ground_truth, kspace_recon, data_range=1.0)
                print(f"Slice {test_idx} (offset {offset}, pos {test_position:.2f}mm): PSNR={test_psnr:.2f}")
                if test_psnr > best_psnr:
                    best_psnr = test_psnr
                    best_kspace_2d = kspace_test
                    best_slice = test_idx
        if best_psnr > 30:
            k_space_full = best_kspace_2d
            print(f"Selected k-space slice {best_slice} (PSNR={best_psnr:.2f})")
        else:
            print(f"Best k-space PSNR too low ({best_psnr:.2f}, slice {best_slice}). Using DICOM k-space.")
            k_space_full = fftshift(fft2(ground_truth))

    # Variable Density Mask
    mask = create_variable_density_mask(k_space_full.shape, acceleration_factor=4)
    plt.imsave('mask.png', mask, cmap='gray')

    # Zero-Filled
    start_time = time.time()
    k_space_undersampled = k_space_full * mask
    img_zf = np.abs(ifft2(ifftshift(k_space_undersampled)))
    zf_time = time.time() - start_time
    zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, ground_truth)
    print(f'Zero-Filled: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    plt.imsave('img_zf.png', img_zf, cmap='gray')

    # ISTA
    start_time = time.time()
    img_ista = ista_wavelet_cs(k_space_undersampled, mask, img_zf.copy(),
                               n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=ground_truth)
    ista_time = time.time() - start_time
    ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, ground_truth)
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    plt.imsave('img_ista.png', img_ista, cmap='gray')

    # CNN
    model = MiniUNet(img_size=512)
    start_time = time.time()
    try:
        trained_model = train_cnn(model, ground_truth, mask, epochs=500, lr=0.00005)
        input_tensor, _ = prepare_cnn_input(k_space_undersampled, mask)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()
        cnn_time = time.time() - start_time
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, ground_truth)
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')
        plt.imsave('img_cnn.png', img_cnn, cmap='gray')
    except RuntimeError as e:
        print(f"CNN training failed: {e}. Try reducing epochs or using CPU.")
        cnn_psnr, cnn_ssim, cnn_time = -1, -1, -1

    # Compare
    print('\nComparison:')
    print(f'Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s')
    print(f'Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)')
    print(f'ZF: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')
    print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')
    if cnn_psnr != -1:
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Time={cnn_time:.2f}s')

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(ground_truth, cmap='gray')
    plt.title('Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(img_zf, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}')
    plt.axis('off')
    if cnn_psnr != -1:
        plt.subplot(1, 4, 4)
        plt.imshow(img_cnn, cmap='gray')
        plt.title(f'CNN\nPSNR={cnn_psnr:.2f}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# --- OASIS Pipeline ---
def main_oasis(oasis_paths, slice_indices, img_size=256):
    import nibabel as nib
    images = []
    for path, slice_idx in zip(oasis_paths, slice_indices):
        try:
            nii = nib.load(path)
            img = nii.get_fdata()[:, :, slice_idx].astype(np.float32)
            if img.shape != (img_size, img_size):
                from skimage.transform import resize
                img = resize(img, (img_size, img_size), anti_aliasing=True)
            img = (img - img.min()) / (img.max() - img.min() + 1e-8)
            images.append(img)
        except Exception as e:
            print(f"Error loading OASIS {path}: {e}")
            continue

    if not images:
        print("No OASIS images loaded.")
        return

    # Train CNN on multiple slices
    model = MiniUNet(img_size=img_size)
    mask = create_variable_density_mask((img_size, img_size), acceleration_factor=4)
    start_time = time.time()
    try:
        for img in images:
            trained_model = train_cnn(model, img, mask, epochs=100, lr=0.00005)
            model = trained_model  # Update model
        cnn_train_time = time.time() - start_time

        # Evaluate on first slice
        img = images[0]
        k_space_undersampled = fftshift(fft2(img)) * mask
        input_tensor, zf_img = prepare_cnn_input(k_space_undersampled, mask)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, img)
        print(f'OASIS CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Train Time={cnn_train_time:.2f}s')
        plt.imsave('oasis_img_cnn.png', img_cnn, cmap='gray')

        # ZF and ISTA for comparison
        zf_psnr, zf_ssim = evaluate_reconstruction(zf_img, img)
        img_ista = ista_wavelet_cs(k_space_undersampled, mask, zf_img.copy(),
                                   n_iters=10, lambda_val=0.0001, ground_truth_for_psnr=img)
        ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, img)
        print(f'OASIS ZF: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}')
        print(f'OASIS ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}')
        plt.imsave('oasis_img_zf.png', zf_img, cmap='gray')
        plt.imsave('oasis_img_ista.png', img_ista, cmap='gray')
    except RuntimeError as e:
        print(f"OASIS CNN training failed: {e}")
        return

    # Visualize
    plt.figure(figsize=(15, 5))
    plt.subplot(1, 4, 1)
    plt.imshow(img, cmap='gray')
    plt.title('OASIS Ground Truth')
    plt.axis('off')
    plt.subplot(1, 4, 2)
    plt.imshow(zf_img, cmap='gray')
    plt.title(f'ZF\nPSNR={zf_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 3)
    plt.imshow(img_ista, cmap='gray')
    plt.title(f'ISTA\nPSNR={ista_psnr:.2f}')
    plt.axis('off')
    plt.subplot(1, 4, 4)
    plt.imshow(img_cnn, cmap='gray')
    plt.title(f'CNN\nPSNR={cnn_psnr:.2f}')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    main_sec_128()
    # Example OASIS run (uncomment with paths)
    # oasis_paths = ['/path/to/OAS1_0208.nii', '/path/to/OAS1_0209.nii']
    # slice_indices = [81, 81]
    # main_oasis(oasis_paths, slice_indices, img_size=256)
Slice 108 (offset -20, pos 64.80mm): PSNR=12.99
Slice 109 (offset -19, pos 65.40mm): PSNR=13.22
Slice 110 (offset -18, pos 66.00mm): PSNR=13.76
Slice 111 (offset -17, pos 66.60mm): PSNR=11.88
Slice 112 (offset -16, pos 67.20mm): PSNR=11.03
Slice 113 (offset -15, pos 67.80mm): PSNR=13.46
Slice 114 (offset -14, pos 68.40mm): PSNR=14.77
Slice 115 (offset -13, pos 69.00mm): PSNR=14.29
Slice 116 (offset -12, pos 69.60mm): PSNR=13.28
Slice 117 (offset -11, pos 70.20mm): PSNR=14.22
Slice 118 (offset -10, pos 70.80mm): PSNR=14.36
Slice 119 (offset -9, pos 71.40mm): PSNR=13.59
Slice 120 (offset -8, pos 72.00mm): PSNR=12.23
Slice 121 (offset -7, pos 72.60mm): PSNR=12.94
Slice 122 (offset -6, pos 73.20mm): PSNR=12.27
Slice 123 (offset -5, pos 73.80mm): PSNR=12.10
Slice 124 (offset -4, pos 74.40mm): PSNR=12.41
Slice 125 (offset -3, pos 75.00mm): PSNR=11.26
Slice 126 (offset -2, pos 75.60mm): PSNR=11.82
Slice 127 (offset -1, pos 76.20mm): PSNR=12.14
Slice 128 (offset 0, pos 76.80mm): PSNR=15.67
Slice 129 (offset 1, pos 77.40mm): PSNR=16.38
Slice 130 (offset 2, pos 78.00mm): PSNR=15.96
Slice 131 (offset 3, pos 78.60mm): PSNR=16.02
Slice 132 (offset 4, pos 79.20mm): PSNR=16.45
Slice 133 (offset 5, pos 79.80mm): PSNR=16.27
Slice 134 (offset 6, pos 80.40mm): PSNR=16.08
Slice 135 (offset 7, pos 81.00mm): PSNR=16.00
Slice 136 (offset 8, pos 81.60mm): PSNR=16.59
Slice 137 (offset 9, pos 82.20mm): PSNR=16.33
Slice 138 (offset 10, pos 82.80mm): PSNR=16.37
Slice 139 (offset 11, pos 83.40mm): PSNR=16.37
Slice 140 (offset 12, pos 84.00mm): PSNR=15.65
Slice 141 (offset 13, pos 84.60mm): PSNR=15.22
Slice 142 (offset 14, pos 85.20mm): PSNR=14.83
Slice 143 (offset 15, pos 85.80mm): PSNR=11.13
Slice 144 (offset 16, pos 86.40mm): PSNR=11.48
Slice 145 (offset 17, pos 87.00mm): PSNR=14.25
Slice 146 (offset 18, pos 87.60mm): PSNR=14.92
Slice 147 (offset 19, pos 88.20mm): PSNR=15.54
Slice 148 (offset 20, pos 88.80mm): PSNR=16.17
Best k-space PSNR too low (16.59, slice 136). Using DICOM k-space.
Variable Density Mask: Target R=4, Actual R=4.00
Zero-Filled: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA Iter 1/10, PSNR=40.927
ISTA Iter 2/10, PSNR=40.928
ISTA Iter 3/10, PSNR=40.928
ISTA Iter 4/10, PSNR=40.928
ISTA Iter 5/10, PSNR=40.928
ISTA Iter 6/10, PSNR=40.928
ISTA Iter 7/10, PSNR=40.928
ISTA Iter 8/10, PSNR=40.928
ISTA Iter 9/10, PSNR=40.928
ISTA Iter 10/10, PSNR=40.928
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.43s
Epoch 0, Loss: 0.0239, MSE: 0.0239, L1: 0.0000
Epoch 100, Loss: 0.0017, MSE: 0.0017, L1: 0.0000
Epoch 200, Loss: 0.0011, MSE: 0.0011, L1: 0.0000
Epoch 300, Loss: 0.0009, MSE: 0.0009, L1: 0.0000
Epoch 400, Loss: 0.0008, MSE: 0.0007, L1: 0.0000
CNN: PSNR=31.861, SSIM=0.8056, Time=185.01s

Comparison:
Your ISTA: PSNR=40.929, SSIM=0.9614, Time=0.47s
Paper Edge-Enhanced (R=4): PSNR=33.52, SSIM=0.4206 (TV)
ZF: PSNR=40.915, SSIM=0.9613, Time=0.00s
ISTA: PSNR=40.928, SSIM=0.9614, Time=0.43s
CNN: PSNR=31.861, SSIM=0.8056, Time=185.01s

EXPERIMENT 10

FastMRI_CNN
pip install numpy torch scikit-image h5py pywt matplotlib
import os
import glob
import h5py
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from skimage.metrics import peak_signal_noise_ratio as psnr
from skimage.metrics import structural_similarity as ssim
import matplotlib.pyplot as plt
import pywt
from numpy.fft import fft2, ifft2, fftshift, ifftshift
from skimage.transform import resize
import time
import gc

# Set random seed for reproducibility
np.random.seed(42)
torch.manual_seed(42)

# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"Using device: {device}")

# --- Mini U-Net CNN Architecture ---
class MiniUNet(nn.Module):
    def __init__(self, img_size=256):
        super(MiniUNet, self).__init__()
        # Encoder
        self.enc1 = nn.Conv2d(2, 32, 3, padding=1)  # Input: real+imag
        self.enc2 = nn.Conv2d(32, 64, 3, padding=1)
        # Bottleneck
        self.bottleneck = nn.Conv2d(64, 128, 3, padding=1)
        # Decoder
        self.dec2 = nn.Conv2d(192, 64, 3, padding=1)  # Skip connection
        self.dec1 = nn.Conv2d(96, 32, 3, padding=1)
        self.out = nn.Conv2d(32, 1, 3, padding=1)  # Output: real image
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.upsample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)

    def forward(self, x):
        # Encoder
        e1 = self.relu(self.enc1(x))  # [B, 32, img_size, img_size]
        e2 = self.relu(self.enc2(self.pool(e1)))  # [B, 64, img_size/2, img_size/2]
        # Bottleneck
        b = self.relu(self.bottleneck(self.pool(e2)))  # [B, 128, img_size/4, img_size/4]
        # Decoder with skip connections
        d2 = self.relu(self.dec2(torch.cat([self.upsample(b), e2], dim=1)))  # [B, 64, img_size/2]
        d1 = self.relu(self.dec1(torch.cat([self.upsample(d2), e1], dim=1)))  # [B, 32, img_size]
        out = self.out(d1)  # [B, 1, img_size, img_size]
        return out

# --- Dataset Loading ---
def load_fastmri_slices(base_path, num_subjects=10, slices_per_subject=5):
    h5_files = glob.glob(os.path.join(base_path, '*.h5'))
    if not h5_files:
        print(f"ERROR: No .h5 files found in {base_path}")
        return [], []

    num_subjects = min(num_subjects, len(h5_files))
    h5_files = h5_files[:num_subjects]
    images = []
    subjects_slices = []

    for h5_path in h5_files:
        try:
            with h5py.File(h5_path, 'r') as f:
                kspace = f['kspace'][()]  # Shape: (slices, coils, height, width)
                num_slices = kspace.shape[0]
                central_idx = num_slices // 2
                slice_indices = range(central_idx - slices_per_subject//2, central_idx + slices_per_subject//2 + 1)
                subject_id = os.path.basename(h5_path).split('.')[0]

                for slice_idx in slice_indices:
                    if slice_idx < 0 or slice_idx >= num_slices:
                        continue
                    kspace_slice = kspace[slice_idx]  # Shape: (coils, height, width)
                    img_coils = ifft2(ifftshift(kspace_slice, axes=(1, 2)), axes=(1, 2))
                    img_rss = np.sqrt(np.sum(np.abs(img_coils)**2, axis=0))
                    img_rss = resize(img_rss, (256, 256), anti_aliasing=True).astype(np.float32)
                    if np.max(img_rss) > np.min(img_rss):
                        img_rss = (img_rss - np.min(img_rss)) / (np.max(img_rss) - np.min(img_rss))
                    else:
                        img_rss = np.zeros_like(img_rss)
                    images.append(img_rss)
                    subjects_slices.append((subject_id, slice_idx))
        except Exception as e:
            print(f"ERROR loading {h5_path}: {e}")
            continue

    return np.array(images), subjects_slices

# --- Mask and Reconstruction Functions ---
def create_variable_density_mask(shape, acceleration_factor, center_fraction=0.08, poly_degree=2, seed=None):
    if seed is not None:
        np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    x_coords = np.abs(np.arange(cols) - center_x)
    y_coords = np.abs(np.arange(rows) - center_y)
    dist_x, dist_y = np.meshgrid(x_coords, y_coords)
    norm_dist_x = dist_x / (np.max(dist_x) if np.max(dist_x) > 0 else 1)
    norm_dist_y = dist_y / (np.max(dist_y) if np.max(dist_y) > 0 else 1)
    pdf = (1 - norm_dist_x**poly_degree) * (1 - norm_dist_y**poly_degree)
    pdf = np.clip(pdf, 0, 1)
    target_samples = int(np.prod(shape) / acceleration_factor)
    flat_pdf = pdf.flatten()
    sorted_indices = np.argsort(-flat_pdf)
    mask = np.zeros(shape, dtype=bool).flatten()
    mask[sorted_indices[:target_samples]] = True
    mask = mask.reshape(shape)
    center_rows_abs = int(shape[0] * center_fraction)
    center_cols_abs = int(shape[1] * center_fraction)
    r_start, r_end = shape[0]//2 - center_rows_abs//2, shape[0]//2 + center_rows_abs//2
    c_start, c_end = shape[1]//2 - center_cols_abs//2, shape[1]//2 + center_cols_abs//2
    mask[r_start:r_end, c_start:c_end] = True
    actual_accel = np.prod(shape) / np.sum(mask)
    print(f"Variable Density Mask: Target R={acceleration_factor}, Actual R={actual_accel:.2f}")
    return mask.astype(np.float32)

def apply_mask(img, mask):
    kspace = fftshift(fft2(img))
    undersampled_kspace = kspace * mask
    return undersampled_kspace, kspace

def zero_filled_reconstruction(undersampled_kspace):
    img_zf = np.abs(ifft2(ifftshift(undersampled_kspace)))
    return np.clip(img_zf, 0, 1)

def prepare_cnn_input(undersampled_kspace):
    zf_img = ifft2(ifftshift(undersampled_kspace))
    zf_real = np.real(zf_img)
    zf_imag = np.imag(zf_img)
    input_tensor = np.stack([zf_real, zf_imag], axis=0)  # [2, 256, 256]
    return torch.tensor(input_tensor, dtype=torch.float32).unsqueeze(0)  # [1, 2, 256, 256]

# --- ISTA Functions (from provided script) ---
def soft_threshold(x, threshold):
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def wavelet_forward(image, wavelet='db4', level=3):
    coeffs = pywt.wavedec2(image, wavelet=wavelet, level=level)
    arr, coeff_slices = pywt.coeffs_to_array(coeffs)
    return arr, coeff_slices

def wavelet_inverse(arr, coeff_slices, wavelet='db4'):
    coeffs_from_arr = pywt.array_to_coeffs(arr, coeff_slices, output_format='wavedec2')
    return pywt.waverec2(coeffs_from_arr, wavelet=wavelet)

def ista_wavelet_cs(k_space_undersampled, mask, initial_image, n_iters, lambda_val, ground_truth_for_psnr):
    x_recon = initial_image.copy().astype(np.complex128)
    k_space_undersampled = k_space_undersampled.astype(np.complex128)
    step_size = 1.0
    for i in range(n_iters):
        current_k_space = fftshift(fft2(x_recon))
        k_space_error = (current_k_space * mask) - k_space_undersampled
        grad_data_term = ifft2(ifftshift(k_space_error * mask))
        x_intermediate = x_recon - step_size * grad_data_term
        x_intermediate_real = np.real(x_intermediate)
        coeffs_arr, coeff_slices = wavelet_forward(x_intermediate_real, wavelet='db4', level=3)
        threshold = lambda_val * step_size
        coeffs_list_form = pywt.wavedec2(x_intermediate_real, wavelet='db4', level=3)
        approx_coeffs_size = coeffs_list_form[0].size
        coeffs_arr_thresh = coeffs_arr.copy()
        coeffs_arr_thresh[approx_coeffs_size:] = soft_threshold(coeffs_arr[approx_coeffs_size:], threshold)
        x_reconstructed_real = wavelet_inverse(coeffs_arr_thresh, coeff_slices, wavelet='db4')
        x_recon = x_reconstructed_real.astype(np.complex128)
    return np.clip(np.real(x_recon), 0, 1)

# --- Dataset Class ---
class FastMRIDataset(torch.utils.data.Dataset):
    def __init__(self, images, mask):
        self.images = images  # [num_images, 256, 256]
        self.mask = mask  # [256, 256]
    
    def __len__(self):
        return len(self.images)
    
    def __getitem__(self, idx):
        img = self.images[idx]
        undersampled_kspace, _ = apply_mask(img, self.mask)
        input_tensor = prepare_cnn_input(undersampled_kspace)
        target = torch.tensor(img[None], dtype=torch.float32)  # [1, 256, 256]
        return input_tensor.squeeze(0), target  # [2, 256, 256], [1, 256, 256]

# --- Training Function ---
def train_cnn(model, dataset, epochs=50, batch_size=4, lr=0.001):
    model = model.to(device)
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)
    dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)
    
    for epoch in range(epochs):
        model.train()
        total_loss = 0
        for inputs, targets in dataloader:
            inputs, targets = inputs.to(device), targets.to(device)  # [B, 2, 256, 256], [B, 1, 256, 256]
            optimizer.zero_grad()
            outputs = model(inputs)  # [B, 1, 256, 256]
            loss = criterion(outputs, targets)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        if epoch % 10 == 0:
            print(f'Epoch {epoch}, Loss: {total_loss / len(dataloader):.4f}')
    return model

# --- Evaluation Function ---
def evaluate_reconstruction(img_recon, img_ref):
    img_recon = np.clip(img_recon, 0, 1)
    img_ref = np.clip(img_ref, 0, 1)
    psnr_val = psnr(img_ref, img_recon, data_range=1.0)
    ssim_val = ssim(img_ref, img_recon, data_range=1.0, channel_axis=None)
    return psnr_val, ssim_val

# --- Main Function ---
def main():
    # Define parameters
    base_path = '/kaggle/input/fastmri-brain-multicoil'  # Replace with local path if not on Kaggle
    acceleration_factor = 4
    optimal_lambda = 0.0001
    optimal_iters = 10

    # Load dataset
    images, subjects_slices = load_fastmri_slices(base_path, num_subjects=10, slices_per_subject=5)
    if len(images) == 0:
        raise RuntimeError("No valid images loaded. Check dataset path.")

    # Create mask
    mask = create_variable_density_mask((256, 256), acceleration_factor, seed=0)

    # Split dataset (8 subjects for training, 2 for testing)
    train_images = images[:40]  # 8 subjects * 5 slices
    test_images = images[40:]   # 2 subjects * 5 slices
    test_subjects_slices = subjects_slices[40:]

    # Create training dataset
    train_dataset = FastMRIDataset(train_images, mask)

    # Initialize and train CNN
    model = MiniUNet(img_size=256)
    start_time = time.time()
    trained_model = train_cnn(model, train_dataset, epochs=50, batch_size=4)
    cnn_train_time = time.time() - start_time

    # Evaluate on test slices
    results = {'ZF': [], 'ISTA': [], 'CNN': []}
    for idx, (test_img, (subject_id, slice_idx)) in enumerate(zip(test_images, test_subjects_slices)):
        print(f'\nEvaluating {subject_id}, Slice {slice_idx}')
        undersampled_kspace, _ = apply_mask(test_img, mask)

        # Zero-Filled
        start_time = time.time()
        img_zf = zero_filled_reconstruction(undersampled_kspace)
        zf_time = time.time() - start_time
        zf_psnr, zf_ssim = evaluate_reconstruction(img_zf, test_img)
        results['ZF'].append((zf_psnr, zf_ssim, zf_time))
        print(f'Zero-Filled: PSNR={zf_psnr:.3f}, SSIM={zf_ssim:.4f}, Time={zf_time:.2f}s')

        # ISTA
        start_time = time.time()
        img_ista = ista_wavelet_cs(undersampled_kspace, mask, img_zf.copy(), optimal_iters, optimal_lambda, test_img)
        ista_time = time.time() - start_time
        ista_psnr, ista_ssim = evaluate_reconstruction(img_ista, test_img)
        results['ISTA'].append((ista_psnr, ista_ssim, ista_time))
        print(f'ISTA: PSNR={ista_psnr:.3f}, SSIM={ista_ssim:.4f}, Time={ista_time:.2f}s')

        # CNN
        start_time = time.time()
        input_tensor = prepare_cnn_input(undersampled_kspace)
        with torch.no_grad():
            output = trained_model(input_tensor.to(device))
            img_cnn = output.squeeze().cpu().numpy()  # [256, 256]
        cnn_inf_time = time.time() - start_time
        cnn_psnr, cnn_ssim = evaluate_reconstruction(img_cnn, test_img)
        results['CNN'].append((cnn_psnr, cnn_ssim, cnn_inf_time))
        print(f'CNN: PSNR={cnn_psnr:.3f}, SSIM={cnn_ssim:.4f}, Inference Time={cnn_inf_time:.2f}s')

        # Visualize
        plt.figure(figsize=(12, 4))
        plt.subplot(1, 4, 1)
        plt.imshow(test_img, cmap='gray')
        plt.title('Ground Truth')
        plt.axis('off')
        plt.subplot(1, 4, 2)
        plt.imshow(img_zf, cmap='gray')
        plt.title(f'ZF\nPSNR: {zf_psnr:.2f}\nSSIM: {zf_ssim:.4f}')
        plt.axis('off')
        plt.subplot(1, 4, 3)
        plt.imshow(img_ista, cmap='gray')
        plt.title(f'ISTA\nPSNR: {ista_psnr:.2f}\nSSIM: {ista_ssim:.4f}')
        plt.axis('off')
        plt.subplot(1, 4, 4)
        plt.imshow(img_cnn, cmap='gray')
        plt.title(f'CNN\nPSNR: {cnn_psnr:.2f}\nSSIM: {cnn_ssim:.4f}')
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(f'result_{subject_id}_slice_{slice_idx}.png', dpi=300)
        plt.close()
        gc.collect()

    # Summarize results
    print("\n--- Summary of Results (R=4) ---")
    print(f"{'Method':<10} | {'Mean PSNR':<12} | {'Mean SSIM':<12} | {'Mean Time (s)':<15}")
    print("-" * 50)
    for method in results:
        psnr_vals, ssim_vals, times = zip(*results[method])
        mean_psnr = np.mean(psnr_vals)
        mean_ssim = np.mean(ssim_vals)
        mean_time = np.mean(times)
        print(f"{method:<10} | {mean_psnr:.2f} | {mean_ssim:.4f} | {mean_time:.2f}")
    print(f'\nCNN Total Time (Train+Inf): ~{cnn_train_time + np.mean([r[2] for r in results["CNN"]]):.2f}s')

if __name__ == '__main__':
    main()
Using device: cpu
ERROR loading /kaggle/input/fastmri-brain-multicoil/file_brain_AXT2_210_2100179.h5: Unable to synchronously open file (truncated file: eof = 201064448, sblock->base_addr = 0, stored_eof = 778585656)
Variable Density Mask: Target R=4, Actual R=4.00
Epoch 0, Loss: 0.0131
Epoch 10, Loss: 0.0001
Epoch 20, Loss: 0.0001
Epoch 30, Loss: 0.0000
Epoch 40, Loss: 0.0000

Evaluating file_brain_AXT2_207_2070286, Slice 6
Zero-Filled: PSNR=44.318, SSIM=0.9899, Time=0.00s
ISTA: PSNR=44.327, SSIM=0.9899, Time=0.13s
CNN: PSNR=43.906, SSIM=0.9892, Inference Time=0.18s

Evaluating file_brain_AXT2_207_2070286, Slice 7
Zero-Filled: PSNR=44.738, SSIM=0.9910, Time=0.00s
ISTA: PSNR=44.740, SSIM=0.9910, Time=0.10s
CNN: PSNR=44.214, SSIM=0.9902, Inference Time=0.12s

Evaluating file_brain_AXT2_207_2070286, Slice 8
Zero-Filled: PSNR=45.511, SSIM=0.9927, Time=0.00s
ISTA: PSNR=45.511, SSIM=0.9927, Time=0.11s
CNN: PSNR=44.931, SSIM=0.9916, Inference Time=0.13s

Evaluating file_brain_AXT2_207_2070286, Slice 9
Zero-Filled: PSNR=43.519, SSIM=0.9913, Time=0.00s
ISTA: PSNR=43.519, SSIM=0.9913, Time=0.11s
CNN: PSNR=43.489, SSIM=0.9905, Inference Time=0.12s

Evaluating file_brain_AXT2_207_2070286, Slice 10
Zero-Filled: PSNR=42.800, SSIM=0.9920, Time=0.00s
ISTA: PSNR=42.801, SSIM=0.9920, Time=0.11s
CNN: PSNR=43.033, SSIM=0.9913, Inference Time=0.12s

--- Summary of Results (R=4) ---
Method     | Mean PSNR    | Mean SSIM    | Mean Time (s)  
--------------------------------------------------
ZF         | 44.18 | 0.9914 | 0.00
ISTA       | 44.18 | 0.9914 | 0.11
CNN        | 43.91 | 0.9906 | 0.14

CNN Total Time (Train+Inf): ~1056.34s

